<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常见软件及系统镜像的下载网址</title>
    <url>/2020/05/27/%E5%90%84%E5%AE%98%E6%96%B9%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<h2 id="后续会更新"><a href="#后续会更新" class="headerlink" title="后续会更新"></a>后续会更新</h2><hr>
<p>Python安装包下载：<a href="https://www.python.org/ftp/python/" target="_blank" rel="noopener">https://www.python.org/ftp/python/</a><br>centos镜像下载：<a href="http://mirror.nsc.liu.se/centos-store/" target="_blank" rel="noopener">http://mirror.nsc.liu.se/centos-store/</a><br>debian镜像下载：<a href="https://cdimage.debian.org/cdimage/archive/" target="_blank" rel="noopener">https://cdimage.debian.org/cdimage/archive/</a><br>ubuntu镜像下载：<a href="http://old-releases.ubuntu.com/releases/" target="_blank" rel="noopener">http://old-releases.ubuntu.com/releases/</a><br>kali镜像下载：<a href="http://old.kali.org/kali-images/" target="_blank" rel="noopener">http://old.kali.org/kali-images/</a><br>微软系统镜像：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a><br>阿里云官方镜像：<a href="https://developer.aliyun.com/mirror/" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/</a><br>清华的新站，加了cloudflare的神秘CDN，各地都非常快: <a href="https://opentuna.cn/" target="_blank" rel="noopener">https://opentuna.cn/</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>运维自动化之Ansible</title>
    <url>/2021/09/22/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B9%8BAnsible/</url>
    <content><![CDATA[<h1 id="运维自动化之Ansible"><a href="#运维自动化之Ansible" class="headerlink" title="运维自动化之Ansible"></a>运维自动化之Ansible</h1><h3 id="本章内容"><a href="#本章内容" class="headerlink" title="本章内容"></a>本章内容</h3><ul>
<li>运维自动化发展历程及技术应用</li>
<li>Ansible命令使用</li>
<li>Ansible常用模块详解</li>
<li>YAML语法简介</li>
<li>Ansible playbook基础</li>
<li>Playbook变量、tags、handlers使用</li>
<li>Playbook模板templates</li>
<li>Playbook条件判断 when</li>
<li>Playbook字典 with_items</li>
<li>Ansible Roles</li>
</ul>
<a id="more"></a>

<h3 id="企业实际应用场景分析"><a href="#企业实际应用场景分析" class="headerlink" title="企业实际应用场景分析"></a>企业实际应用场景分析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dev开发环境</span><br><span class="line">    使用者：程序员</span><br><span class="line">    功能：程序员开发软件，测试BUG的环境</span><br><span class="line">    管理者：程序员</span><br><span class="line"></span><br><span class="line">测试环境    </span><br><span class="line">    使用者：QA测试工程师</span><br><span class="line">    功能：测试经过Dev环境测试通过的软件的功能</span><br><span class="line">    管理者：运维</span><br><span class="line"></span><br><span class="line">说明：测试环境往往有多套,测试环境满足测试功能即可，不宜过多</span><br><span class="line">1、测试人员希望测试环境有多套,公司的产品多产品线并发，即多个版本，意味着多个版本同步测试</span><br><span class="line">2、通常测试环境有多少套和产品线数量保持一样</span><br><span class="line"></span><br><span class="line">发布环境：代码发布机，有些公司为堡垒机（安全屏障）</span><br><span class="line">    使用者：运维</span><br><span class="line">    功能：发布代码至生产环境</span><br><span class="line">    管理者：运维（有经验）</span><br><span class="line">    发布机：往往需要有2台（主备）</span><br><span class="line"></span><br><span class="line">生产环境</span><br><span class="line">    使用者：运维，少数情况开放权限给核心开发人员，极少数公司将权限完全</span><br><span class="line">    开放给开发人员并其维护</span><br><span class="line">    功能：对用户提供公司产品的服务</span><br><span class="line"></span><br><span class="line">管理者：只能是运维</span><br><span class="line">    生产环境服务器数量：一般比较多，且应用非常重要。往往需要自动工具协助部署配置应用</span><br><span class="line"></span><br><span class="line">灰度环境（生产环境的一部分）</span><br><span class="line">    使用者：运维</span><br><span class="line">    功能：在全量发布代码前将代码的功能面向少量精准用户发布的环境,可基</span><br><span class="line">    于主机或用户执行灰度发布</span><br><span class="line">    案例：共100台生产服务器，先发布其中的10台服务器，这10台服务器就是灰度服务器</span><br><span class="line">    管理者：运维</span><br><span class="line">    灰度环境：往往该版本功能变更较大，为保险起见特意先让一部分用户优化体验该功能，</span><br><span class="line">              待这部分用户使用没有重大问题的时候，再全量发布至所有服务器</span><br></pre></td></tr></table></figure>

<h3 id="自动化运维应用场景"><a href="#自动化运维应用场景" class="headerlink" title="自动化运维应用场景"></a>自动化运维应用场景</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件传输</span><br><span class="line">应用部署</span><br><span class="line">配置管理</span><br><span class="line">任务流编排</span><br></pre></td></tr></table></figure>

<h3 id="常用自动化运维工具"><a href="#常用自动化运维工具" class="headerlink" title="常用自动化运维工具"></a>常用自动化运维工具</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ansible：python，Agentless，中小型应用环境</span><br><span class="line">Saltstack：python，一般需部署agent，执行效率更高</span><br><span class="line">Puppet：ruby, 功能强大，配置复杂，重型,适合大型环境</span><br><span class="line">Fabric：python，agentless</span><br><span class="line">Chef：ruby，国内应用少</span><br><span class="line">Cfengine</span><br><span class="line">func</span><br></pre></td></tr></table></figure>


<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&gt; 模块化：调用特定的模块，完成特定任务</span><br><span class="line">2&gt; Paramiko（python对ssh的实现），PyYAML，Jinja2（模板语言）三个关键模块</span><br><span class="line">3&gt; 支持自定义模块</span><br><span class="line">4&gt; 基于Python语言实现</span><br><span class="line">5&gt; 部署简单，基于python和SSH(默认已安装)，agentless</span><br><span class="line">6&gt; 安全，基于OpenSSH</span><br><span class="line">7&gt; 支持playbook编排任务</span><br><span class="line">8&gt; 幂等性：一个任务执行1遍和执行n遍效果一样，不因重复执行带来意外情况</span><br><span class="line">9&gt; 无需代理不依赖PKI（无需ssl）</span><br><span class="line">10&gt; 可使用任何编程语言写模块</span><br><span class="line">11&gt; YAML格式，编排任务，支持丰富的数据结构</span><br><span class="line">12&gt; 较强大的多层解决方案</span><br></pre></td></tr></table></figure>
<h3 id="推公钥"><a href="#推公钥" class="headerlink" title="推公钥"></a>推公钥</h3><p> 系统 环境为centos，该脚本执行前需要在脚本当前目录，创建ip.txt文件，把需要推送的服务器的ip及密码填写好。<br> 1.在脚本当前目录，创建ip.txt文件,填写相应信息<br>  #请填写需要推送的服务器ip和i密码<br>  #格式：ip 空格 密码<br>  #例：192.168.23.111 passwd<br>  #例：192.168.23.112 passwd</p>
<p> 2.执行脚本推送公钥 curl -o ssh.sh <a href="http://103.224.249.63/ssh.sh&amp;&amp;" target="_blank" rel="noopener">http://103.224.249.63/ssh.sh&amp;&amp;</a> bash ssh.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bash/env bash</span></span><br><span class="line"></span><br><span class="line">[ ! -f /root/.ssh/id_rsa.pub ] &amp;&amp; ssh-keygen -P <span class="string">''</span> -f /root/.ssh/id_rsa &amp;&gt;/dev/null</span><br><span class="line">add=`cat ./ip.txt|wc -l`</span><br><span class="line">[ -f /usr/bin/expect ]||yum -y install expect</span><br><span class="line">[ /usr/bin/expect ]&amp;&amp; <span class="built_in">echo</span> <span class="string">"true"</span> || <span class="built_in">echo</span> <span class="string">"file"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq <span class="variable">$add</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	ip=`sed -n  <span class="variable">$&#123;i&#125;</span>p ./ip.txt | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">	pass=`sed -n  <span class="variable">$&#123;i&#125;</span>p ./ip.txt | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">	ping -c1 <span class="variable">$ip</span> &amp;&gt;/dev/null</span><br><span class="line">	<span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$ip</span> &gt;&gt; ./ip_up.txt</span><br><span class="line">	/usr/bin/expect &lt;&lt;-END</span><br><span class="line">	<span class="built_in">set</span> timeout 10</span><br><span class="line">	spawn ssh-copy-id root@<span class="variable">$ip</span></span><br><span class="line">	expect <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">	expect <span class="string">"password:"</span> &#123; send <span class="string">"<span class="variable">$pass</span>\r"</span> &#125;</span><br><span class="line">		expect eof</span><br><span class="line">	END</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="variable">$ip</span> &gt;&gt; ./ip_down.txt</span><br><span class="line">		<span class="built_in">continue</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>=`cat ./ip_up.txt|wc -l`</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq <span class="variable">$test</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	remote_ip=`sed -n <span class="variable">$&#123;i&#125;</span>p ./ip_up.txt`</span><br><span class="line">	ssh root@<span class="variable">$remote_ip</span> hostname</span><br><span class="line">	[ $? -eq 0 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"公钥推送成功"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>


<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm包安装: EPEL源</span><br><span class="line">    yum install ansible</span><br><span class="line"></span><br><span class="line">编译安装:</span><br><span class="line">    yum -y install python-jinja2 PyYAML python-paramiko python-babel</span><br><span class="line">    python-crypto</span><br><span class="line">    tar xf ansible-1.5.4.tar.gz</span><br><span class="line">    cd ansible-1.5.4</span><br><span class="line">    python setup.py build</span><br><span class="line">    python setup.py install</span><br><span class="line">    mkdir &#x2F;etc&#x2F;ansible</span><br><span class="line">    cp -r examples&#x2F;* &#x2F;etc&#x2F;ansible</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Git方式:</span><br><span class="line">    git clone git:&#x2F;&#x2F;github.com&#x2F;ansible&#x2F;ansible.git --recursive</span><br><span class="line">    cd .&#x2F;ansible</span><br><span class="line">    source .&#x2F;hacking&#x2F;env-setup</span><br><span class="line"></span><br><span class="line">pip安装： pip是安装Python包的管理器，类似yum</span><br><span class="line">    yum install python-pip python-devel</span><br><span class="line">    yum install gcc glibc-devel zibl-devel rpm-bulid openssl-devel</span><br><span class="line">    pip install --upgrade pip</span><br><span class="line">    pip install ansible --upgrade</span><br><span class="line"></span><br><span class="line">确认安装：</span><br><span class="line">    ansible --version</span><br></pre></td></tr></table></figure>

<h3 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置文件</span><br><span class="line">    &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg  主配置文件,配置ansible工作特性(一般无需修改)</span><br><span class="line">    &#x2F;etc&#x2F;ansible&#x2F;hosts        主机清单(将被管理的主机放到此文件)</span><br><span class="line">    &#x2F;etc&#x2F;ansible&#x2F;roles&#x2F;       存放角色的目录</span><br><span class="line"></span><br><span class="line">程序</span><br><span class="line">    &#x2F;usr&#x2F;bin&#x2F;ansible          主程序，临时命令执行工具</span><br><span class="line">    &#x2F;usr&#x2F;bin&#x2F;ansible-doc      查看配置文档，模块功能查看工具</span><br><span class="line">    &#x2F;usr&#x2F;bin&#x2F;ansible-galaxy   下载&#x2F;上传优秀代码或Roles模块的官网平台</span><br><span class="line">    &#x2F;usr&#x2F;bin&#x2F;ansible-playbook 定制自动化任务，编排剧本工具</span><br><span class="line">    &#x2F;usr&#x2F;bin&#x2F;ansible-pull     远程执行命令的工具</span><br><span class="line">    &#x2F;usr&#x2F;bin&#x2F;ansible-vault    文件加密工具</span><br><span class="line">    &#x2F;usr&#x2F;bin&#x2F;ansible-console  基于Console界面与用户交互的执行工具</span><br></pre></td></tr></table></figure>

<h3 id="主机清单inventory"><a href="#主机清单inventory" class="headerlink" title="主机清单inventory"></a>主机清单inventory</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Inventory 主机清单</span><br><span class="line">1&gt; ansible的主要功用在于批量主机操作，为了便捷地使用其中的部分主机，可以在inventory file中将其分组命名 </span><br><span class="line">2&gt; 默认的inventory file为&#x2F;etc&#x2F;ansible&#x2F;hosts</span><br><span class="line">3&gt; inventory file可以有多个，且也可以通过Dynamic Inventory来动态生成</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;ansible&#x2F;hosts文件格式</span><br><span class="line">inventory文件遵循INI文件风格，中括号中的字符为组名。</span><br><span class="line">可以将同一个主机同时归并到多个不同的组中；</span><br><span class="line">此外，当如若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明</span><br><span class="line">    ntp.magedu.com   不分组,直接加</span><br><span class="line">    </span><br><span class="line">    [webservers]     webservers组</span><br><span class="line">    www1.magedu.com:2222  可以指定端口</span><br><span class="line">    www2.magedu.com</span><br><span class="line">    </span><br><span class="line">    [dbservers]</span><br><span class="line">    db1.magedu.com</span><br><span class="line">    db2.magedu.com</span><br><span class="line">    db3.magedu.com</span><br><span class="line"></span><br><span class="line">如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机</span><br><span class="line">示例：</span><br><span class="line">    [websrvs]</span><br><span class="line">    www[1:100].example.com   ip: 1-100</span><br><span class="line">    </span><br><span class="line">    [dbsrvs]</span><br><span class="line">    db-[a:f].example.com     dba-dbff</span><br></pre></td></tr></table></figure>

<h3 id="ansible-配置文件"><a href="#ansible-配置文件" class="headerlink" title="ansible 配置文件"></a>ansible 配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ansible 配置文件&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg （一般保持默认）</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg</span><br><span class="line"></span><br><span class="line">[defaults]</span><br><span class="line">#inventory     &#x3D; &#x2F;etc&#x2F;ansible&#x2F;hosts      # 主机列表配置文件</span><br><span class="line">#library       &#x3D; &#x2F;usr&#x2F;share&#x2F;my_modules&#x2F;  # 库文件存放目录</span><br><span class="line">#remote_tmp    &#x3D; $HOME&#x2F;.ansible&#x2F;tmp      # 临时py命令文件存放在远程主机目录</span><br><span class="line">#local_tmp     &#x3D; $HOME&#x2F;.ansible&#x2F;tmp      # 本机的临时命令执行目录  </span><br><span class="line">#forks         &#x3D; 5                       # 默认并发数,同时可以执行5次</span><br><span class="line">#sudo_user     &#x3D; root                    # 默认sudo 用户</span><br><span class="line">#ask_sudo_pass &#x3D; True                    # 每次执行ansible命令是否询问ssh密码</span><br><span class="line">#ask_pass      &#x3D; True                    # 每次执行ansible命令是否询问ssh口令</span><br><span class="line">#remote_port   &#x3D; 22                      # 远程主机的端口号(默认22)</span><br><span class="line"></span><br><span class="line">建议优化项： </span><br><span class="line">host_key_checking &#x3D; False               # 检查对应服务器的host_key，建议取消注释</span><br><span class="line">log_path&#x3D;&#x2F;var&#x2F;log&#x2F;ansible.log           # 日志文件,建议取消注释</span><br><span class="line">module_name   &#x3D; command                 # 默认模块</span><br></pre></td></tr></table></figure>

<h3 id="ansible系列命令"><a href="#ansible系列命令" class="headerlink" title="ansible系列命令"></a>ansible系列命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ansible系列命令</span><br><span class="line">    ansible ansible-doc ansible-playbook ansible-vault ansible-console</span><br><span class="line">    ansible-galaxy ansible-pull</span><br><span class="line"></span><br><span class="line">ansible-doc: 显示模块帮助</span><br><span class="line">    ansible-doc [options] [module...]</span><br><span class="line">        -a            显示所有模块的文档</span><br><span class="line">        -l, --list    列出可用模块</span><br><span class="line">        -s, --snippet 显示指定模块的playbook片段(简化版,便于查找语法)</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    ansible-doc -l      列出所有模块</span><br><span class="line">    ansible-doc ping    查看指定模块帮助用法</span><br><span class="line">    ansible-doc -s ping 查看指定模块帮助用法</span><br></pre></td></tr></table></figure>

<h3 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible通过ssh实现配置管理、应用部署、任务执行等功能，</span><br><span class="line">建议配置ansible端能基于密钥认证的方式联系各被管理节点</span><br><span class="line"></span><br><span class="line">ansible &lt;host-pattern&gt; [-m module_name] [-a args]</span><br><span class="line">ansible +被管理的主机(ALL) +模块  +参数</span><br><span class="line">    --version              显示版本</span><br><span class="line">    -m module              指定模块，默认为command</span><br><span class="line">    -v                     详细过程 –vv -vvv更详细</span><br><span class="line">    --list-hosts           显示主机列表，可简写 --list</span><br><span class="line">    -k, --ask-pass         提示输入ssh连接密码,默认Key验证</span><br><span class="line">    -C, --check            检查，并不执行</span><br><span class="line">    -T, --timeout&#x3D;TIMEOUT  执行命令的超时时间,默认10s</span><br><span class="line">    -u, --user&#x3D;REMOTE_USER 执行远程执行的用户</span><br><span class="line">    -b, --become           代替旧版的sudo切换</span><br><span class="line">        --become-user&#x3D;USERNAME 指定sudo的runas用户,默认为root</span><br><span class="line">    -K, --ask-become-pass  提示输入sudo时的口令</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible all --list  列出所有主机</span><br><span class="line">ping模块: 探测网络中被管理主机是否能够正常使用  走ssh协议</span><br><span class="line">          如果对方主机网络正常,返回pong</span><br><span class="line">ansible-doc -s ping   查看ping模块的语法 </span><br><span class="line"></span><br><span class="line">检测所有主机的网络状态</span><br><span class="line">1&gt;  默认情况下连接被管理的主机是ssh基于key验证,如果没有配置key,权限将会被拒绝</span><br><span class="line">    因此需要指定以谁的身份连接,输入用户密码,必须保证被管理主机用户密码一致</span><br><span class="line">    ansible all -m ping -k</span><br><span class="line"></span><br><span class="line">2&gt; 或者实现基于key验证 将公钥ssh-copy-id到被管理的主机上 , 实现免密登录</span><br><span class="line">   ansible all -m ping</span><br></pre></td></tr></table></figure>

<h3 id="ansible的Host-pattern"><a href="#ansible的Host-pattern" class="headerlink" title="ansible的Host-pattern"></a>ansible的Host-pattern</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible的Host-pattern</span><br><span class="line">匹配主机的列表</span><br><span class="line">    All ：表示所有Inventory中的所有主机</span><br><span class="line">        ansible all –m ping</span><br><span class="line">    * :通配符</span><br><span class="line">        ansible &quot;*&quot; -m ping  (*表示所有主机)</span><br><span class="line">        ansible 192.168.1.* -m ping</span><br><span class="line">        ansible &quot;*srvs&quot; -m ping</span><br><span class="line">    或关系 &quot;:&quot;</span><br><span class="line">        ansible &quot;websrvs:appsrvs&quot; -m ping</span><br><span class="line">        ansible “192.168.1.10:192.168.1.20” -m ping</span><br><span class="line">    逻辑与 &quot;:&amp;&quot;</span><br><span class="line">        ansible &quot;websrvs:&amp;dbsrvs&quot; –m ping</span><br><span class="line">        在websrvs组并且在dbsrvs组中的主机</span><br><span class="line">    逻辑非 &quot;:!&quot;</span><br><span class="line">        ansible &#39;websrvs:!dbsrvs&#39; –m ping</span><br><span class="line">        在websrvs组，但不在dbsrvs组中的主机</span><br><span class="line">        注意：此处为单引号</span><br><span class="line">    综合逻辑</span><br><span class="line">        ansible &#39;websrvs:dbsrvs:&amp;appsrvs:!ftpsrvs&#39; –m ping</span><br><span class="line">    正则表达式</span><br><span class="line">        ansible &quot;websrvs:&amp;dbsrvs&quot; –m ping</span><br><span class="line">        ansible &quot;~(web|db).*\.magedu\.com&quot; –m ping</span><br></pre></td></tr></table></figure>

<h3 id="ansible命令执行过程"><a href="#ansible命令执行过程" class="headerlink" title="ansible命令执行过程"></a>ansible命令执行过程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible命令执行过程</span><br><span class="line">    1. 加载自己的配置文件 默认&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg</span><br><span class="line">    2. 加载自己对应的模块文件，如command</span><br><span class="line">    3. 通过ansible将模块或命令生成对应的临时py文件，</span><br><span class="line">       并将该文件传输至远程服务器的对应执行用户$HOME&#x2F;.ansible&#x2F;tmp&#x2F;ansible-tmp-数字&#x2F;XXX.PY文件</span><br><span class="line">    4. 给文件+x执行</span><br><span class="line">    5. 执行并返回结果</span><br><span class="line">    6. 删除临时py文件，sleep 0退出</span><br><span class="line"></span><br><span class="line">执行状态：</span><br><span class="line">    绿色：执行成功并且不需要做改变的操作</span><br><span class="line">    黄色：执行成功并且对目标主机做变更</span><br><span class="line">    红色：执行失败</span><br></pre></td></tr></table></figure>

<h3 id="ansible使用示例"><a href="#ansible使用示例" class="headerlink" title="ansible使用示例"></a>ansible使用示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例</span><br><span class="line">    以wang用户执行ping存活检测</span><br><span class="line">        ansible all -m ping -u wang -k</span><br><span class="line">    以wang sudo至root执行ping存活检测</span><br><span class="line">        ansible all -m ping -u wang -k -b</span><br><span class="line">    以wang sudo至mage用户执行ping存活检测</span><br><span class="line">        ansible all -m ping -u wang -k -b --become-user&#x3D;mage</span><br><span class="line">    以wang sudo至root用户执行ls</span><br><span class="line">        ansible all -m command -u wang -a &#39;ls &#x2F;root&#39; -b --become-user&#x3D;root -k -K</span><br><span class="line"></span><br><span class="line">ansible ping模块测试连接</span><br><span class="line">    ansible 192.168.38.126,192.168.38.127 -m ping -k</span><br></pre></td></tr></table></figure>

<h3 id="ansible常用模块"><a href="#ansible常用模块" class="headerlink" title="ansible常用模块"></a>ansible常用模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">模块文档：https:&#x2F;&#x2F;docs.ansible.com&#x2F;ansible&#x2F;latest&#x2F;modules&#x2F;modules_by_category.html</span><br><span class="line"></span><br><span class="line">Command：在远程主机执行命令，默认模块，可忽略-m选项</span><br><span class="line">    &gt; ansible srvs -m command -a &#39;service vsftpd start&#39;</span><br><span class="line">    &gt; ansible srvs -m command -a &#39;echo adong |passwd --stdin 123456&#39;</span><br><span class="line">此命令不支持 $VARNAME &lt; &gt; | ; &amp; 等,用shell模块实现</span><br><span class="line"></span><br><span class="line">    chdir:   进入到被管理主机目录</span><br><span class="line">    creates: 如果有一个目录是存在的,步骤将不会运行Command命令</span><br><span class="line">    ansible websrvs -a &#39;chdir&#x3D;&#x2F;data&#x2F; ls&#39;</span><br><span class="line"></span><br><span class="line">Shell：和command相似，用shell执行命令</span><br><span class="line">    &gt; ansible all -m shell  -a &#39;getenforce&#39;  查看SELINUX状态</span><br><span class="line">    &gt;  ansible all -m shell  -a &quot;sed -i &#39;s&#x2F;SELINUX&#x3D;.*&#x2F;SELINUX&#x3D;disabled&#39; &#x2F;etc&#x2F;selinux&#x2F;config&quot;</span><br><span class="line">    &gt; ansible srv -m shell -a &#39;echo magedu |passwd –stdin wang&#39;</span><br><span class="line">      </span><br><span class="line">    调用bash执行命令 类似 cat &#x2F;tmp&#x2F;stanley.md | awk -F&#39;|&#39; &#39;&#123;print $1,$2&#125;&#39; &amp;&gt; &#x2F;tmp&#x2F;example.txt     </span><br><span class="line">    这些复杂命令，即使使用shell也可能会失败，</span><br><span class="line">    解决办法：写到脚本时，copy到远程执行，再把需要的结果拉回执行命令的机器</span><br><span class="line"></span><br><span class="line">    修改配置文件,使shell作为默认模块    </span><br><span class="line">        vim &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg</span><br><span class="line">        module_name &#x3D; shell</span><br><span class="line"></span><br><span class="line">Script：在远程主机上运行ansible服务器上的脚本</span><br><span class="line">    &gt; -a &quot;&#x2F;PATH&#x2F;TO&#x2F;SCRIPT_FILE&quot;</span><br><span class="line">    &gt; ansible websrvs -m script -a &#x2F;data&#x2F;test.sh</span><br><span class="line"></span><br><span class="line">Copy：从主控端复制文件到远程主机</span><br><span class="line">      src : 源文件  指定拷贝文件的本地路径  (如果有&#x2F; 则拷贝目录内容,比拷贝目录本身)</span><br><span class="line">      dest: 指定目标路径</span><br><span class="line">      mode: 设置权限</span><br><span class="line">      backup: 备份源文件</span><br><span class="line">      content: 代替src  指定本机文件内容,生成目标主机文件</span><br><span class="line">      </span><br><span class="line">      &gt; ansible websrvs -m copy -a &quot;src&#x3D;&#x2F;root&#x2F;test1.sh dest&#x3D;&#x2F;tmp&#x2F;test2.showner&#x3D;wang mode&#x3D;600 backup&#x3D;yes&quot;</span><br><span class="line">        如果目标存在，默认覆盖，此处指定先备份</span><br><span class="line">      &gt; ansible websrvs -m copy -a &quot;content&#x3D;&#39;test content\nxxx&#39; dest&#x3D;&#x2F;tmp&#x2F;test.txt&quot;</span><br><span class="line">        指定内容，直接生成目标文件</span><br><span class="line"></span><br><span class="line">Fetch：从远程主机提取文件至主控端，copy相反，目前不支持目录,可以先打包,再提取文件</span><br><span class="line">     &gt; ansible websrvs -m fetch -a &#39;src&#x3D;&#x2F;root&#x2F;test.sh dest&#x3D;&#x2F;data&#x2F;scripts&#39;</span><br><span class="line">     会生成每个被管理主机不同编号的目录,不会发生文件名冲突</span><br><span class="line">     </span><br><span class="line">     &gt; ansible all -m shell -a &#39;tar jxvf test.tar.gz &#x2F;root&#x2F;test.sh&#39;</span><br><span class="line">     &gt; ansible all -m fetch -a &#39;src&#x3D;&#x2F;root&#x2F;test.tar.gz dest&#x3D;&#x2F;data&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">File：设置文件属性</span><br><span class="line">    path: 要管理的文件路径 (强制添加)</span><br><span class="line">    recurse: 递归,文件夹要用递归</span><br><span class="line">    src:  创建硬链接,软链接时,指定源目标,配合&#39;state&#x3D;link&#39; &#39;state&#x3D;hard&#39; 设置软链接,硬链接</span><br><span class="line">    state: 状态</span><br><span class="line">          absent 缺席,删除</span><br><span class="line">          </span><br><span class="line">    &gt; ansible websrvs -m file -a &#39;path&#x3D;&#x2F;app&#x2F;test.txt state&#x3D;touch&#39;       创建文件</span><br><span class="line">    &gt; ansible websrvs -m file -a &quot;path&#x3D;&#x2F;data&#x2F;testdir state&#x3D;directory&quot;   创建目录    </span><br><span class="line">    &gt; ansible websrvs -m file -a &quot;path&#x3D;&#x2F;root&#x2F;test.sh owner&#x3D;wang mode&#x3D;755&quot;  设置权限755</span><br><span class="line">    &gt; ansible websrvs -m file -a &#39;src&#x3D;&#x2F;data&#x2F;testfile dest&#x3D;&#x2F;data&#x2F;testfile-link state&#x3D;link&#39; 创建软链接</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">unarchive：解包解压缩，有两种用法：</span><br><span class="line">    1、将ansible主机上的压缩包传到远程主机后解压缩至特定目录，设置copy&#x3D;yes.</span><br><span class="line">    2、将远程主机上的某个压缩包解压缩到指定路径下，设置copy&#x3D;no</span><br><span class="line"></span><br><span class="line">    常见参数：</span><br><span class="line">        copy：默认为yes，当copy&#x3D;yes，拷贝的文件是从ansible主机复制到远程主机上，</span><br><span class="line">              如果设置为copy&#x3D;no，会在远程主机上寻找src源文件</span><br><span class="line">        src： 源路径，可以是ansible主机上的路径，也可以是远程主机上的路径，</span><br><span class="line">              如果是远程主机上的路径，则需要设置copy&#x3D;no</span><br><span class="line">        dest：远程主机上的目标路径</span><br><span class="line">        mode：设置解压缩后的文件权限</span><br><span class="line">    </span><br><span class="line">    示例：</span><br><span class="line">        ansible websrvs -m unarchive -a &#39;src&#x3D;foo.tgz dest&#x3D;&#x2F;var&#x2F;lib&#x2F;foo&#39;  </span><br><span class="line">          #默认copy为yes ,将本机目录文件解压到目标主机对应目录下</span><br><span class="line">        ansible websrvs -m unarchive -a &#39;src&#x3D;&#x2F;tmp&#x2F;foo.zip dest&#x3D;&#x2F;data copy&#x3D;no mode&#x3D;0777&#39;</span><br><span class="line">          # 解压被管理主机的foo.zip到data目录下, 并设置权限777</span><br><span class="line">        ansible websrvs -m unarchive -a &#39;src&#x3D;https:&#x2F;&#x2F;example.com&#x2F;example.zip dest&#x3D;&#x2F;data copy&#x3D;no&#39;</span><br><span class="line"></span><br><span class="line">Archive：打包压缩</span><br><span class="line">    &gt; ansible all -m archive -a &#39;path&#x3D;&#x2F;etc&#x2F;sysconfig dest&#x3D;&#x2F;data&#x2F;sysconfig.tar.bz2 format&#x3D;bz2 owner&#x3D;wang mode&#x3D;0777&#39;</span><br><span class="line">    将远程主机目录打包 </span><br><span class="line">        path:   指定路径</span><br><span class="line">        dest:   指定目标文件</span><br><span class="line">        format: 指定打包格式</span><br><span class="line">        owner:  指定所属者</span><br><span class="line">        mode:   设置权限</span><br><span class="line"></span><br><span class="line">Hostname：管理主机名</span><br><span class="line">    ansible appsrvs -m hostname -a &quot;name&#x3D;app.adong.com&quot;  更改一组的主机名</span><br><span class="line">    ansible 192.168.38.103 -m hostname -a &quot;name&#x3D;app2.adong.com&quot; 更改单个主机名</span><br><span class="line"></span><br><span class="line">Cron：计划任务</span><br><span class="line">    支持时间：minute,hour,day,month,weekday</span><br><span class="line">    &gt; ansible websrvs -m cron -a &quot;minute&#x3D;*&#x2F;5 job&#x3D;&#39;&#x2F;usr&#x2F;sbin&#x2F;ntpdate 172.16.0.1 &amp;&gt;&#x2F;dev&#x2F;null&#39; name&#x3D;Synctime&quot; </span><br><span class="line">    创建任务</span><br><span class="line">    &gt; ansible websrvs -m cron -a &#39;state&#x3D;absent name&#x3D;Synctime&#39; </span><br><span class="line">    删除任务</span><br><span class="line">    &gt; ansible websrvs -m cron -a &#39;minute&#x3D;*&#x2F;10 job&#x3D;&#39;&#x2F;usr&#x2F;sbin&#x2F;ntpdate 172.30.0.100&quot; name&#x3D;synctime disabled&#x3D;yes&#39;</span><br><span class="line">    注释任务,不在生效</span><br><span class="line"></span><br><span class="line">Yum：管理包</span><br><span class="line">    ansible websrvs -m yum -a &#39;list&#x3D;httpd&#39;  查看程序列表</span><br><span class="line">    </span><br><span class="line">    ansible websrvs -m yum -a &#39;name&#x3D;httpd state&#x3D;present&#39; 安装</span><br><span class="line">    ansible websrvs -m yum -a &#39;name&#x3D;httpd state&#x3D;absent&#39;  删除</span><br><span class="line">    可以同时安装多个程序包</span><br><span class="line">	操作注意；最新版本ansible使用python3，当更换Python后，yum模块就会报错</span><br><span class="line">	&#123;</span><br><span class="line">	    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;msg&quot;: &quot;The Python 2 bindings for rpm are needed for this module. If you require Python 3 support use the &#96;dnf&#96; Ansible module instead.. The Python 2 yum module is needed for this module. If you require Python 3 support use the &#96;dnf&#96; Ansible module instead.&quot;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">	通过强制使用python2解决ansible_python_interpreter&#x3D;&#x2F;usr&#x2F;bin&#x2F;python2了这个问题，在ansible清单文件中为这组主机添加，如以下代码段所示：</span><br><span class="line">	！！编辑时请通过组的形式进行配置，直接添加ansible_python_interpreter参数也是会报错的。</span><br><span class="line">	[amz_linux]</span><br><span class="line">	server2 ansible_host&#x3D;ec2-xx-yy-zz-pp.eu-west-1.compute.amazonaws.com</span><br><span class="line"></span><br><span class="line">	[amz_linux:vars]</span><br><span class="line">	ansible_user&#x3D;ec2-user</span><br><span class="line">	ansible_python_interpreter&#x3D;&#x2F;usr&#x2F;bin&#x2F;python2</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">Service：管理服务</span><br><span class="line">    ansible srv -m service -a &#39;name&#x3D;httpd state&#x3D;stopped&#39;  停止服务</span><br><span class="line">    ansible srv -m service -a &#39;name&#x3D;httpd state&#x3D;started enabled&#x3D;yes&#39; 启动服务,并设为开机自启</span><br><span class="line">    ansible srv -m service -a &#39;name&#x3D;httpd state&#x3D;reloaded&#39;  重新加载</span><br><span class="line">    ansible srv -m service -a &#39;name&#x3D;httpd state&#x3D;restarted&#39; 重启服务</span><br><span class="line"></span><br><span class="line">User：管理用户</span><br><span class="line">    home   指定家目录路径</span><br><span class="line">    system 指定系统账号</span><br><span class="line">    group  指定组</span><br><span class="line">    remove 清除账户</span><br><span class="line">    shell  指定shell类型</span><br><span class="line">    </span><br><span class="line">    ansible websrvs -m user -a &#39;name&#x3D;user1 comment&#x3D;&quot;test user&quot; uid&#x3D;2048 home&#x3D;&#x2F;app&#x2F;user1 group&#x3D;root&#39;</span><br><span class="line">    ansible websrvs -m user -a &#39;name&#x3D;sysuser1 system&#x3D;yes home&#x3D;&#x2F;app&#x2F;sysuser1&#39;</span><br><span class="line">    ansible websrvs -m user -a &#39;name&#x3D;user1 state&#x3D;absent remove&#x3D;yes&#39;  清空用户所有数据</span><br><span class="line">    ansible websrvs -m user -a &#39;name&#x3D;app uid&#x3D;88 system&#x3D;yes home&#x3D;&#x2F;app groups&#x3D;root shell&#x3D;&#x2F;sbin&#x2F;nologin password&#x3D;&quot;$1$zfVojmPy$ZILcvxnXljvTI2PhP2Iqv1&quot;&#39;  创建用户</span><br><span class="line">    ansible websrvs -m user -a &#39;name&#x3D;app state&#x3D;absent&#39;  不会删除家目录</span><br><span class="line">    </span><br><span class="line">    安装mkpasswd </span><br><span class="line">    yum insatll expect </span><br><span class="line">    mkpasswd 生成口令</span><br><span class="line">    openssl passwd -1  生成加密口令</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">删除用户及家目录等数据</span><br><span class="line">    Group：管理组</span><br><span class="line">        ansible srv -m group -a &quot;name&#x3D;testgroup system&#x3D;yes&quot;   创建组</span><br><span class="line">        ansible srv -m group -a &quot;name&#x3D;testgroup state&#x3D;absent&quot; 删除组</span><br></pre></td></tr></table></figure>

<h3 id="ansible系列命令-1"><a href="#ansible系列命令-1" class="headerlink" title="ansible系列命令"></a>ansible系列命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以通过网上写好的</span><br><span class="line">ansible-galaxy</span><br><span class="line">    &gt; 连接 https:&#x2F;&#x2F;galaxy.ansible.com </span><br><span class="line">      下载相应的roles(角色)</span><br><span class="line">    </span><br><span class="line">    &gt; 列出所有已安装的galaxy</span><br><span class="line">        ansible-galaxy list</span><br><span class="line">    </span><br><span class="line">    &gt; 安装galaxy</span><br><span class="line">        ansible-galaxy install geerlingguy.redis</span><br><span class="line">    </span><br><span class="line">    &gt; 删除galaxy</span><br><span class="line">        ansible-galaxy remove geerlingguy.redis</span><br><span class="line">        </span><br><span class="line">ansible-pull</span><br><span class="line">    推送命令至远程，效率无限提升，对运维要求较高</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">ansible-playbook  可以引用按照标准的yml语言写的脚本</span><br><span class="line">    执行playbook</span><br><span class="line">    示例：ansible-playbook hello.yml</span><br><span class="line">        cat hello.yml</span><br><span class="line">        #hello world yml file</span><br><span class="line">        - hosts: websrvs</span><br><span class="line">          remote_user: root</span><br><span class="line">          tasks:</span><br><span class="line">            - name: hello world</span><br><span class="line">              command: &#x2F;usr&#x2F;bin&#x2F;wall hello world</span><br><span class="line"></span><br><span class="line">ansible-vault  (了解)</span><br><span class="line">功能：管理加密解密yml文件</span><br><span class="line">    ansible-vault [create|decrypt|edit|encrypt|rekey|view]</span><br><span class="line">        ansible-vault encrypt hello.yml 加密</span><br><span class="line">        ansible-vault decrypt hello.yml 解密</span><br><span class="line">        ansible-vault view hello.yml    查看</span><br><span class="line">        ansible-vault edit hello.yml    编辑加密文件</span><br><span class="line">        ansible-vault rekey hello.yml   修改口令</span><br><span class="line">        ansible-vault create new.yml    创建新文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ansible-console：2.0+新增，可交互执行命令，支持tab  (了解)</span><br><span class="line"></span><br><span class="line">    root@test (2)[f:10] $</span><br><span class="line">    执行用户@当前操作的主机组 (当前组的主机数量)[f:并发数]$</span><br><span class="line"></span><br><span class="line">    设置并发数：         forks n   例如： forks 10</span><br><span class="line">    切换组：             cd 主机组 例如： cd web</span><br><span class="line">    列出当前组主机列表： list</span><br><span class="line">    列出所有的内置命令： ?或help</span><br><span class="line">    示例：</span><br><span class="line">        root@all (2)[f:5]$ list</span><br><span class="line">        root@all (2)[f:5]$ cd appsrvs</span><br><span class="line">        root@appsrvs (2)[f:5]$ list</span><br><span class="line">        root@appsrvs (2)[f:5]$ yum name&#x3D;httpd state&#x3D;present</span><br><span class="line">        root@appsrvs (2)[f:5]$ service name&#x3D;httpd state&#x3D;started</span><br></pre></td></tr></table></figure>


<h3 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h3><p>使用源码安装的注意：<br>需要复制配置文件到/etc/ansible/ansible.cfg ，如果不操作这个步，执行playbook时由于无法读取配置文件，会报错无法连接到hosts</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; playbook是由一个或多个&quot;play&quot;组成的列表</span><br><span class="line">&gt; play的主要功能在于将预定义的一组主机，装扮成事先通过ansible中的task定义好的角色。</span><br><span class="line">  Task实际是调用ansible的一个module，将多个play组织在一个playbook中，</span><br><span class="line">  即可以让它们联合起来，按事先编排的机制执行预定义的动作</span><br><span class="line">&gt; Playbook采用YAML语言编写</span><br></pre></td></tr></table></figure>
<h3 id="playbook图解"><a href="#playbook图解" class="headerlink" title="playbook图解"></a>playbook图解</h3><p><img src="https://note.youdao.com/yws/res/100098/FD38F2B4BE0B49578DCC4CB58E218543" alt="image">  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户通过ansible命令直接调用yml语言写好的playbook,playbook由多条play组成</span><br><span class="line">每条play都有一个任务(task)相对应的操作,然后调用模块modules，应用在主机清单上,通过ssh远程连接</span><br><span class="line">从而控制远程主机或者网络设备</span><br></pre></td></tr></table></figure>

<h3 id="YAML介绍"><a href="#YAML介绍" class="headerlink" title="YAML介绍"></a>YAML介绍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YAML是一个可读性高的用来表达资料序列的格式。</span><br><span class="line">    YAML参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822等。</span><br><span class="line">    Clark Evans在2001年在首次发表了这种语言，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者</span><br><span class="line"></span><br><span class="line">YAML Ain&#39;t Markup Language，即YAML不是XML。</span><br><span class="line">不过，在开发的这种语言时，YAML的意思其实是：&quot;Yet Another Markup Language&quot;（仍是一种标记语言）</span><br><span class="line"></span><br><span class="line">特性</span><br><span class="line">    YAML的可读性好</span><br><span class="line">    YAML和脚本语言的交互性好</span><br><span class="line">    YAML使用实现语言的数据类型</span><br><span class="line">    YAML有一个一致的信息模型</span><br><span class="line">    YAML易于实现</span><br><span class="line">    YAML可以基于流来处理</span><br><span class="line">    YAML表达能力强，扩展性好</span><br><span class="line"></span><br><span class="line">更多的内容及规范参见：http:&#x2F;&#x2F;www.yaml.org</span><br></pre></td></tr></table></figure>

<h3 id="YAML语法简介"><a href="#YAML语法简介" class="headerlink" title="YAML语法简介"></a>YAML语法简介</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 在单一档案中，可用连续三个连字号(——)区分多个档案。</span><br><span class="line">  另外，还有选择性的连续三个点号( ... )用来表示档案结尾</span><br><span class="line">&gt; 次行开始正常写Playbook的内容，一般建议写明该Playbook的功能</span><br><span class="line">&gt; 使用#号注释代码</span><br><span class="line">&gt; 缩进必须是统一的，不能空格和tab混用</span><br><span class="line">&gt; 缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行来实现的</span><br><span class="line">&gt; YAML文件内容是区别大小写的，k&#x2F;v的值均需大小写敏感</span><br><span class="line">&gt; 多个k&#x2F;v可同行写也可换行写，同行使用:分隔</span><br><span class="line">&gt; v可是个字符串，也可是另一个列表[]</span><br><span class="line">&gt; 一个完整的代码块功能需最少元素需包括 name 和 task</span><br><span class="line">&gt; 一个name只能包括一个task</span><br><span class="line">&gt; YAML文件扩展名通常为yml或yaml</span><br></pre></td></tr></table></figure>

<h3 id="YAML语法简介-1"><a href="#YAML语法简介-1" class="headerlink" title="YAML语法简介"></a>YAML语法简介</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List：列表，其所有元素均使用“-”打头</span><br><span class="line">      列表代表同一类型的元素</span><br><span class="line">示例：</span><br><span class="line"># A list of tasty fruits</span><br><span class="line">- Apple</span><br><span class="line">- Orange</span><br><span class="line">- Strawberry</span><br><span class="line">- Mango</span><br><span class="line"></span><br><span class="line">Dictionary：字典，通常由多个key与value构成 键值对</span><br><span class="line">示例：</span><br><span class="line">---</span><br><span class="line"># An employee record</span><br><span class="line">name: Example Developer</span><br><span class="line">job: Developer</span><br><span class="line">skill: Elite</span><br><span class="line"></span><br><span class="line">也可以将key:value放置于&#123;&#125;中进行表示，用,分隔多个key:value</span><br><span class="line">示例：</span><br><span class="line">---</span><br><span class="line"># An employee record</span><br><span class="line">&#123;name: Example Developer, job: Developer, skill: Elite&#125;  有空格</span><br></pre></td></tr></table></figure>

<h3 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YAML的语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。</span><br><span class="line">其结构（Structure）通过空格来展示，序列（Sequence）里的项用&quot;-&quot;来代表，Map里的键值对用&quot;:&quot;分隔</span><br><span class="line">示例</span><br><span class="line">    name: John Smith</span><br><span class="line">    age: 41</span><br><span class="line">    gender: Male</span><br><span class="line">    spouse:</span><br><span class="line">      name: Jane Smith</span><br><span class="line">      age: 37</span><br><span class="line">      gender: Female</span><br><span class="line">    children:</span><br><span class="line">      - name: Jimmy Smith</span><br><span class="line">        age: 17</span><br><span class="line">        gender: Male</span><br><span class="line">      - name: Jenny Smith</span><br><span class="line">        age 13</span><br><span class="line">        gender: Female</span><br></pre></td></tr></table></figure>

<h3 id="三种常见的数据交换格式"><a href="#三种常见的数据交换格式" class="headerlink" title="三种常见的数据交换格式"></a>三种常见的数据交换格式</h3><p><img src="https://note.youdao.com/yws/res/100106/8B5EADE22C804A65A1D9027206BD15F4" alt="image"></p>
<h3 id="Playbook核心元素"><a href="#Playbook核心元素" class="headerlink" title="Playbook核心元素"></a>Playbook核心元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hosts          执行的远程主机列表(应用在哪些主机上)</span><br><span class="line"></span><br><span class="line">Tasks          任务集</span><br><span class="line"></span><br><span class="line">Variables      内置变量或自定义变量在playbook中调用</span><br><span class="line"></span><br><span class="line">Templates模板  可替换模板文件中的变量并实现一些简单逻辑的文件</span><br><span class="line"></span><br><span class="line">Handlers和notify结合使用，由特定条件触发的操作，满足条件方才执行，否则不执行</span><br><span class="line"></span><br><span class="line">tags标签       指定某条任务执行，用于选择运行playbook中的部分代码。</span><br><span class="line">                ansible具有幂等性，因此会自动跳过没有变化的部分，</span><br><span class="line">                即便如此，有些代码为测试其确实没有发生变化的时间依然会非常地长。</span><br><span class="line">                此时，如果确信其没有变化，就可以通过tags跳过此些代码片断</span><br><span class="line">                ansible-playbook -t tagsname useradd.yml</span><br></pre></td></tr></table></figure>

<h3 id="playbook基础组件"><a href="#playbook基础组件" class="headerlink" title="playbook基础组件"></a>playbook基础组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hosts：</span><br><span class="line">    &gt; playbook中的每一个play的目的都是为了让特定主机以某个指定的用户身份执行任务。</span><br><span class="line">      hosts用于指定要执行指定任务的主机，须事先定义在主机清单中</span><br><span class="line"></span><br><span class="line">    &gt; 可以是如下形式：</span><br><span class="line">        one.example.com</span><br><span class="line">        one.example.com:two.example.com</span><br><span class="line">        192.168.1.50</span><br><span class="line">        192.168.1.*</span><br><span class="line">    &gt; Websrvs:dbsrvs       或者，两个组的并集</span><br><span class="line">    &gt; Websrvs:&amp;dbsrvs      与，两个组的交集</span><br><span class="line">    &gt; webservers:!phoenix  在websrvs组，但不在dbsrvs组</span><br><span class="line">    示例: - hosts: websrvs：dbsrvs</span><br><span class="line"></span><br><span class="line">remote_user: </span><br><span class="line">    可用于Host和task中。</span><br><span class="line">    也可以通过指定其通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务；</span><br><span class="line">    此外，甚至可以在sudo时使用sudo_user指定sudo时切换的用户</span><br><span class="line">    - hosts: websrvs</span><br><span class="line">        remote_user: root   (可省略,默认为root)  以root身份连接</span><br><span class="line">      tasks:    指定任务</span><br><span class="line">    - name: test connection</span><br><span class="line">        ping:</span><br><span class="line">        remote_user: magedu</span><br><span class="line">        sudo: yes           默认sudo为root</span><br><span class="line">        sudo_user:wang      sudo为wang</span><br><span class="line">    </span><br><span class="line">task列表和action</span><br><span class="line">    任务列表task:由多个动作,多个任务组合起来的,每个任务都调用的模块,一个模块一个模块执行</span><br><span class="line">    1&gt; play的主体部分是task list，task list中的各任务按次序逐个在hosts中指定的所有主机上执行，</span><br><span class="line">       即在所有主机上完成第一个任务后，再开始第二个任务</span><br><span class="line"></span><br><span class="line">    2&gt; task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。</span><br><span class="line">       模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致</span><br><span class="line"></span><br><span class="line">    3&gt; 每个task都应该有其name，用于playbook的执行结果输出，建议其内容能清晰地描述任务执行步骤。</span><br><span class="line">       如果未提供name，则action的结果将用于输出</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tasks：任务列表</span><br><span class="line">两种格式：</span><br><span class="line">    (1) action: module arguments</span><br><span class="line">    (2) module: arguments 建议使用  模块: 参数</span><br><span class="line">    注意：shell和command模块后面跟命令，而非key&#x3D;value</span><br><span class="line"></span><br><span class="line">某任务的状态在运行后为changed时，可通过&quot;notify&quot;通知给相应的handlers</span><br><span class="line"></span><br><span class="line">任务可以通过&quot;tags&quot;打标签，可在ansible-playbook命令上使用-t指定进行调用</span><br><span class="line">示例：</span><br><span class="line">tasks:</span><br><span class="line">  - name: disable selinux   描述</span><br><span class="line">    command: &#x2F;sbin&#x2F;setenforce 0   模块名: 模块对应的参数</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果命令或脚本的退出码不为零，可以使用如下方式替代</span><br><span class="line">tasks:</span><br><span class="line">  - name: run this command and ignore the result</span><br><span class="line">    shell: &#x2F;usr&#x2F;bin&#x2F;somecommand || &#x2F;bin&#x2F;true  </span><br><span class="line">    转错为正  如果命令失败则执行 true</span><br><span class="line"></span><br><span class="line">或者使用ignore_errors来忽略错误信息</span><br><span class="line">tasks:</span><br><span class="line">  - name: run this command and ignore the result</span><br><span class="line">    shell: &#x2F;usr&#x2F;bin&#x2F;somecommand</span><br><span class="line">    ignore_errors: True  忽略错误</span><br></pre></td></tr></table></figure>

<h3 id="运行playbook"><a href="#运行playbook" class="headerlink" title="运行playbook"></a>运行playbook</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行playbook的方式</span><br><span class="line">    ansible-playbook &lt;filename.yml&gt; ... [options]</span><br><span class="line"></span><br><span class="line">常见选项</span><br><span class="line">    --check -C       只检测可能会发生的改变，但不真正执行操作 </span><br><span class="line">                     (只检查语法,如果执行过程中出现问题,-C无法检测出来)</span><br><span class="line">                     (执行playbook生成的文件不存在,后面的程序如果依赖这些文件,也会导致检测失败)</span><br><span class="line">    --list-hosts     列出运行任务的主机</span><br><span class="line">    --list-tags      列出tag  (列出标签)</span><br><span class="line">    --list-tasks     列出task (列出任务)</span><br><span class="line">    --limit 主机列表 只针对主机列表中的主机执行</span><br><span class="line">    -v -vv -vvv      显示过程</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">    ansible-playbook hello.yml --check 只检测</span><br><span class="line">    ansible-playbook hello.yml --list-hosts  显示运行任务的主机</span><br><span class="line">    ansible-playbook hello.yml --limit websrvs  限制主机</span><br></pre></td></tr></table></figure>

<h3 id="Playbook-VS-ShellScripts"><a href="#Playbook-VS-ShellScripts" class="headerlink" title="Playbook VS ShellScripts"></a>Playbook VS ShellScripts</h3><p>安装httpd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHELL脚本</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 安装Apache</span><br><span class="line">yum install --quiet -y httpd</span><br><span class="line"># 复制配置文件</span><br><span class="line">cp &#x2F;tmp&#x2F;httpd.conf &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">cp&#x2F;tmp&#x2F;vhosts.conf &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;</span><br><span class="line"># 启动Apache，并设置开机启动</span><br><span class="line">service httpd start</span><br><span class="line">chkconfig httpd on</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Playbook定义</span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: &quot;安装Apache&quot;</span><br><span class="line">      yum: name&#x3D;httpd       yum模块:安装httpd</span><br><span class="line">    - name: &quot;复制配置文件&quot;</span><br><span class="line">      copy: src&#x3D;&#x2F;tmp&#x2F;httpd.conf dest&#x3D;&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;  copy模块: 拷贝文件</span><br><span class="line">    - name: &quot;复制配置文件&quot;</span><br><span class="line">      copy: src&#x3D;&#x2F;tmp&#x2F;vhosts.conf dest&#x3D;&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;  </span><br><span class="line">    - name: &quot;启动Apache，并设置开机启动&quot;</span><br><span class="line">      service: name&#x3D;httpd state&#x3D;started enabled&#x3D;yes   service模块: 启动服务</span><br></pre></td></tr></table></figure>

<h3 id="示例-Playbook-创建用户"><a href="#示例-Playbook-创建用户" class="headerlink" title="示例:Playbook 创建用户"></a>示例:Playbook 创建用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：sysuser.yml</span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: create mysql user</span><br><span class="line">      user: name&#x3D;mysql system&#x3D;yes uid&#x3D;36</span><br><span class="line">    - name: create a group</span><br><span class="line">      group: name&#x3D;httpd system&#x3D;yes</span><br></pre></td></tr></table></figure>

<h3 id="Playbook示例-安装httpd服务"><a href="#Playbook示例-安装httpd服务" class="headerlink" title="Playbook示例  安装httpd服务"></a>Playbook示例  安装httpd服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：httpd.yml</span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: Install httpd</span><br><span class="line">      yum: name&#x3D;httpd state&#x3D;present</span><br><span class="line">    - name: Install configure file</span><br><span class="line">      copy: src&#x3D;files&#x2F;httpd.conf dest&#x3D;&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;</span><br><span class="line">    - name: start service</span><br><span class="line">      service: name&#x3D;httpd state&#x3D;started enabled&#x3D;yes</span><br></pre></td></tr></table></figure>

<h3 id="Playbook示例-安装nginx服务"><a href="#Playbook示例-安装nginx服务" class="headerlink" title="Playbook示例  安装nginx服务"></a>Playbook示例  安装nginx服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例 nginx.yml</span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: add group nginx</span><br><span class="line">      user: name&#x3D;nginx state&#x3D;present</span><br><span class="line">    - name: add user nginx</span><br><span class="line">      user: name&#x3D;nginx state&#x3D;present group&#x3D;nginx</span><br><span class="line">    - name: Install Nginx</span><br><span class="line">      yum: name&#x3D;nginx state&#x3D;present</span><br><span class="line">    - name: Start Nginx</span><br><span class="line">      service: name&#x3D;nginx state&#x3D;started enabled&#x3D;yes</span><br></pre></td></tr></table></figure>

<h3 id="handlers和notify结合使用触发条件"><a href="#handlers和notify结合使用触发条件" class="headerlink" title="handlers和notify结合使用触发条件"></a>handlers和notify结合使用触发条件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Handlers 实际上就是一个触发器</span><br><span class="line">是task列表，这些task与前述的task并没有本质上的不同,用于当关注的资源发生变化时，才会采取一定的操作</span><br><span class="line"></span><br><span class="line">Notify此action可用于在每个play的最后被触发，</span><br><span class="line">这样可避免多次有改变发生时每次都执行指定的操作，仅在所有的变化发生完成后一次性地执行指定操作。</span><br><span class="line">在notify中列出的操作称为handler，也即notify中调用handler中定义的操作</span><br></pre></td></tr></table></figure>

<h3 id="Playbook中handlers使用"><a href="#Playbook中handlers使用" class="headerlink" title="Playbook中handlers使用"></a>Playbook中handlers使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: Install httpd</span><br><span class="line">      yum: name&#x3D;httpd state&#x3D;present</span><br><span class="line">    - name: Install configure file</span><br><span class="line">      copy: src&#x3D;files&#x2F;httpd.conf dest&#x3D;&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;</span><br><span class="line">      notify: restart httpd</span><br><span class="line">    - name: ensure apache is running</span><br><span class="line">      service: name&#x3D;httpd state&#x3D;started enabled&#x3D;yes</span><br><span class="line">  </span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart httpd</span><br><span class="line">      service: name&#x3D;httpd state&#x3D;restarted</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- hosts: webnodes</span><br><span class="line">  vars:</span><br><span class="line">    http_port: 80</span><br><span class="line">    max_clients: 256</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: ensure apache is at the latest version</span><br><span class="line">      yum: name&#x3D;httpd state&#x3D;latest</span><br><span class="line">    - name: ensure apache is running</span><br><span class="line">      service: name&#x3D;httpd state&#x3D;started</span><br><span class="line">    - name: Install configure file</span><br><span class="line">      copy: src&#x3D;files&#x2F;httpd.conf dest&#x3D;&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;</span><br><span class="line">      notify: restart httpd</span><br><span class="line">  </span><br><span class="line">  handlers:</span><br><span class="line">      - name: restart httpd </span><br><span class="line">        service: name&#x3D;httpd state&#x3D;restarted</span><br></pre></td></tr></table></figure>

<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: add group nginx</span><br><span class="line">      tags: user</span><br><span class="line">      user: name&#x3D;nginx state&#x3D;present</span><br><span class="line">    - name: add user nginx</span><br><span class="line">      user: name&#x3D;nginx state&#x3D;present group&#x3D;nginx</span><br><span class="line">    - name: Install Nginx</span><br><span class="line">      yum: name&#x3D;nginx state&#x3D;present</span><br><span class="line">    - name: config</span><br><span class="line">      copy: src&#x3D;&#x2F;root&#x2F;config.txt dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">      notify:</span><br><span class="line">        - Restart Nginx</span><br><span class="line">        - Check Nginx Process</span><br><span class="line">  </span><br><span class="line">  handlers:</span><br><span class="line">    - name: Restart Nginx</span><br><span class="line">      service: name&#x3D;nginx state&#x3D;restarted enabled&#x3D;yes</span><br><span class="line">    - name: Check Nginx process</span><br><span class="line">      shell: killall -0 nginx &gt; &#x2F;tmp&#x2F;nginx.log</span><br></pre></td></tr></table></figure>

<h3 id="Playbook中tags使用"><a href="#Playbook中tags使用" class="headerlink" title="Playbook中tags使用"></a>Playbook中tags使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tage: 添加标签 </span><br><span class="line">可以指定某一个任务添加一个标签,添加标签以后,想执行某个动作可以做出挑选来执行</span><br><span class="line">多个动作可以使用同一个标签</span><br><span class="line"></span><br><span class="line">示例：httpd.yml</span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: Install httpd</span><br><span class="line">      yum: name&#x3D;httpd state&#x3D;present</span><br><span class="line">      tage: install </span><br><span class="line">    - name: Install configure file</span><br><span class="line">      copy: src&#x3D;files&#x2F;httpd.conf dest&#x3D;&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;</span><br><span class="line">      tags: conf</span><br><span class="line">    - name: start httpd service</span><br><span class="line">      tags: service</span><br><span class="line">      service: name&#x3D;httpd state&#x3D;started enabled&#x3D;yes</span><br><span class="line"></span><br><span class="line">ansible-playbook –t install,conf httpd.yml   指定执行install,conf 两个标签</span><br></pre></td></tr></table></figure>

<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;heartbeat.yaml</span><br><span class="line">- hosts: hbhosts</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: ensure heartbeat latest version</span><br><span class="line">      yum: name&#x3D;heartbeat state&#x3D;present</span><br><span class="line">    - name: authkeys configure file</span><br><span class="line">      copy: src&#x3D;&#x2F;root&#x2F;hb_conf&#x2F;authkeys dest&#x3D;&#x2F;etc&#x2F;ha.d&#x2F;authkeys</span><br><span class="line">    - name: authkeys mode 600</span><br><span class="line">      file: path&#x3D;&#x2F;etc&#x2F;ha.d&#x2F;authkeys mode&#x3D;600</span><br><span class="line">      notify:</span><br><span class="line">        - restart heartbeat</span><br><span class="line">    - name: ha.cf configure file</span><br><span class="line">      copy: src&#x3D;&#x2F;root&#x2F;hb_conf&#x2F;ha.cf dest&#x3D;&#x2F;etc&#x2F;ha.d&#x2F;ha.cf</span><br><span class="line">      notify:</span><br><span class="line">        - restart heartbeat</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart heartbeat</span><br><span class="line">      service: name&#x3D;heartbeat state&#x3D;restarted</span><br></pre></td></tr></table></figure>

<h3 id="Playbook中tags使用-1"><a href="#Playbook中tags使用-1" class="headerlink" title="Playbook中tags使用"></a>Playbook中tags使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- hosts: testsrv</span><br><span class="line">  remote_user: root</span><br><span class="line">  tags: inshttpd   针对整个playbook添加tage</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Install httpd</span><br><span class="line">      yum: name&#x3D;httpd state&#x3D;present</span><br><span class="line">    - name: Install configure file</span><br><span class="line">      copy: src&#x3D;files&#x2F;httpd.conf dest&#x3D;&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;</span><br><span class="line">      tags: rshttpd</span><br><span class="line">      notify: restart httpd</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart httpd</span><br><span class="line">      service: name&#x3D;httpd status&#x3D;restarted</span><br><span class="line">     </span><br><span class="line">ansible-playbook –t rshttpd httpd2.yml</span><br></pre></td></tr></table></figure>

<h3 id="Playbook中变量的使用"><a href="#Playbook中变量的使用" class="headerlink" title="Playbook中变量的使用"></a>Playbook中变量的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名：仅能由字母、数字和下划线组成，且只能以字母开头</span><br><span class="line">变量来源：</span><br><span class="line">    1&gt; ansible setup facts 远程主机的所有变量都可直接调用 (系统自带变量)</span><br><span class="line">       setup模块可以实现系统中很多系统信息的显示</span><br><span class="line">                可以返回每个主机的系统信息包括:版本、主机名、cpu、内存</span><br><span class="line">       ansible all -m setup -a &#39;filter&#x3D;&quot;ansible_nodename&quot;&#39;     查询主机名</span><br><span class="line">       ansible all -m setup -a &#39;filter&#x3D;&quot;ansible_memtotal_mb&quot;&#39;  查询主机内存大小</span><br><span class="line">       ansible all -m setup -a &#39;filter&#x3D;&quot;ansible_distribution_major_version&quot;&#39;  查询系统版本</span><br><span class="line">       ansible all -m setup -a &#39;filter&#x3D;&quot;ansible_processor_vcpus&quot;&#39; 查询主机cpu个数</span><br><span class="line">    </span><br><span class="line">    2&gt; 在&#x2F;etc&#x2F;ansible&#x2F;hosts(主机清单)中定义变量</span><br><span class="line">        普通变量：主机组中主机单独定义，优先级高于公共变量(单个主机 )</span><br><span class="line">        公共(组)变量：针对主机组中所有主机定义统一变量(一组主机的同一类别)</span><br><span class="line">    </span><br><span class="line">    3&gt; 通过命令行指定变量，优先级最高</span><br><span class="line">       ansible-playbook –e varname&#x3D;value</span><br><span class="line">    </span><br><span class="line">    4&gt; 在playbook中定义</span><br><span class="line">       vars:</span><br><span class="line">        - var1: value1</span><br><span class="line">        - var2: value2</span><br><span class="line">    </span><br><span class="line">    5&gt; 在独立的变量YAML文件中定义</span><br><span class="line">    </span><br><span class="line">    6&gt; 在role中定义</span><br><span class="line"></span><br><span class="line">变量命名:</span><br><span class="line">    变量名仅能由字母、数字和下划线组成，且只能以字母开头</span><br><span class="line"></span><br><span class="line">变量定义：key&#x3D;value</span><br><span class="line">    示例：http_port&#x3D;80</span><br><span class="line"></span><br><span class="line">变量调用方式：</span><br><span class="line">    1&gt; 通过&#123;&#123; variable_name &#125;&#125; 调用变量，且变量名前后必须有空格，有时用“&#123;&#123; variable_name &#125;&#125;”才生效</span><br><span class="line"></span><br><span class="line">    2&gt; ansible-playbook –e 选项指定</span><br><span class="line">       ansible-playbook test.yml -e &quot;hosts&#x3D;www user&#x3D;magedu&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在主机清单中定义变量,在ansible中使用变量</span><br><span class="line">vim &#x2F;etc&#x2F;ansible&#x2F;hosts</span><br><span class="line">[appsrvs]</span><br><span class="line">192.168.38.17 http_port&#x3D;817 name&#x3D;www</span><br><span class="line">192.168.38.27 http_port&#x3D;827 name&#x3D;web</span><br><span class="line"></span><br><span class="line">调用变量</span><br><span class="line">ansible appsrvs -m hostname -a&#39;name&#x3D;&#123;&#123;name&#125;&#125;&#39;  更改主机名为各自被定义的变量 </span><br><span class="line"></span><br><span class="line">针对一组设置变量</span><br><span class="line">[appsrvs:vars]</span><br><span class="line">make&#x3D;&quot;-&quot;</span><br><span class="line"></span><br><span class="line">ansible appsrvs -m hostname -a &#39;name&#x3D;&#123;&#123;name&#125;&#125;&#123;&#123;mark&#125;&#125;&#123;&#123;http_port&#125;&#125;&#39;  ansible调用变量</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将变量写进单独的配置文件中引用</span><br><span class="line">vim vars.yml</span><br><span class="line">pack: vsftpd</span><br><span class="line">service: vsftpd</span><br><span class="line"></span><br><span class="line">引用变量文件</span><br><span class="line">vars_files:</span><br><span class="line">  - vars.yml</span><br></pre></td></tr></table></figure>

<h3 id="Ansible基础元素"><a href="#Ansible基础元素" class="headerlink" title="Ansible基础元素"></a>Ansible基础元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Facts：是由正在通信的远程目标主机发回的信息，这些信息被保存在ansible变量中。</span><br><span class="line">       要获取指定的远程主机所支持的所有facts，可使用如下命令进行</span><br><span class="line">       ansible websrvs -m setup</span><br><span class="line"></span><br><span class="line">通过命令行传递变量</span><br><span class="line">    在运行playbook的时候也可以传递一些变量供playbook使用</span><br><span class="line">    示例：</span><br><span class="line">        ansible-playbook test.yml -e &quot;hosts&#x3D;www user&#x3D;magedu&quot;</span><br><span class="line">        </span><br><span class="line">register</span><br><span class="line">把任务的输出定义为变量，然后用于其他任务</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">tasks:</span><br><span class="line">- shell: &#x2F;usr&#x2F;bin&#x2F;foo</span><br><span class="line">  register: foo_result</span><br><span class="line">  ignore_errors: True</span><br></pre></td></tr></table></figure>

<h3 id="示例：使用setup变量"><a href="#示例：使用setup变量" class="headerlink" title="示例：使用setup变量"></a>示例：使用setup变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：var.yml</span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: create log file</span><br><span class="line">      file: name&#x3D;&#x2F;var&#x2F;log&#x2F; &#123;&#123; ansible_fqdn &#125;&#125; state&#x3D;touch</span><br><span class="line"></span><br><span class="line">ansible-playbook var.yml</span><br></pre></td></tr></table></figure>

<h3 id="示例：变量"><a href="#示例：变量" class="headerlink" title="示例：变量"></a>示例：变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：var.yml</span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: install package</span><br><span class="line">      yum: name&#x3D;&#123;&#123; pkname &#125;&#125; state&#x3D;present</span><br><span class="line">      </span><br><span class="line">ansible-playbook –e pkname&#x3D;httpd var.yml</span><br></pre></td></tr></table></figure>

<h3 id="示例：变量-1"><a href="#示例：变量-1" class="headerlink" title="示例：变量"></a>示例：变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：var.yml</span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">vars:</span><br><span class="line">  - username: user1</span><br><span class="line">  - groupname: group1</span><br><span class="line">tasks:</span><br><span class="line">  - name: create group</span><br><span class="line">    group: name&#x3D;&#123;&#123; groupname &#125;&#125; state&#x3D;present</span><br><span class="line">  - name: create user</span><br><span class="line">    user: name&#x3D;&#123;&#123; username &#125;&#125; state&#x3D;present</span><br><span class="line"></span><br><span class="line">ansible-playbook var.yml</span><br><span class="line">ansible-playbook -e &quot;username&#x3D;user2 groupname&#x3D;group2” var2.yml</span><br></pre></td></tr></table></figure>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主机变量</span><br><span class="line">可以在inventory中定义主机时为其添加主机变量以便于在playbook中使用</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">[websrvs]</span><br><span class="line">www1.magedu.com http_port&#x3D;80 maxRequestsPerChild&#x3D;808</span><br><span class="line">www2.magedu.com http_port&#x3D;8080 maxRequestsPerChild&#x3D;909</span><br><span class="line"></span><br><span class="line">组变量</span><br><span class="line">组变量是指赋予给指定组内所有主机上的在playbook中可用的变量</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    [websrvs]</span><br><span class="line">    www1.magedu.com</span><br><span class="line">    www2.magedu.com</span><br><span class="line"></span><br><span class="line">    [websrvs:vars]</span><br><span class="line">    ntp_server&#x3D;ntp.magedu.com</span><br><span class="line">    nfs_server&#x3D;nfs.magedu.com</span><br></pre></td></tr></table></figure>

<h3 id="示例：变量-2"><a href="#示例：变量-2" class="headerlink" title="示例：变量"></a>示例：变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">普通变量</span><br><span class="line">    [websrvs]</span><br><span class="line">    192.168.99.101 http_port&#x3D;8080 hname&#x3D;www1</span><br><span class="line">    192.168.99.102 http_port&#x3D;80 hname&#x3D;www2</span><br><span class="line"></span><br><span class="line">公共（组）变量</span><br><span class="line">    [websvrs:vars]</span><br><span class="line">    http_port&#x3D;808</span><br><span class="line">    mark&#x3D;&quot;_&quot;</span><br><span class="line">    [websrvs]</span><br><span class="line">    192.168.99.101 http_port&#x3D;8080 hname&#x3D;www1</span><br><span class="line">    192.168.99.102 http_port&#x3D;80 hname&#x3D;www2</span><br><span class="line">    ansible websvrs –m hostname –a ‘name&#x3D;&#123;&#123; hname &#125;&#125;&#123;&#123; mark &#125;&#125;&#123;&#123; http_port &#125;&#125;’</span><br><span class="line"></span><br><span class="line">命令行指定变量：</span><br><span class="line">    ansible websvrs –e http_port&#x3D;8000 –m hostname –a&#39;name&#x3D;&#123;&#123; hname &#125;&#125;&#123;&#123; mark &#125;&#125;&#123;&#123; http_port &#125;&#125;&#39;</span><br></pre></td></tr></table></figure>

<h3 id="使用变量文件"><a href="#使用变量文件" class="headerlink" title="使用变量文件"></a>使用变量文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat vars.yml</span><br><span class="line">var1: httpd</span><br><span class="line">var2: nginx</span><br><span class="line"></span><br><span class="line">cat var.yml</span><br><span class="line">- hosts: web</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars_files:</span><br><span class="line">    - vars.yml</span><br><span class="line">  tasks:</span><br><span class="line">    - name: create httpd log</span><br><span class="line">      file: name&#x3D;&#x2F;app&#x2F;&#123;&#123; var1 &#125;&#125;.log state&#x3D;touch</span><br><span class="line">    - name: create nginx log</span><br><span class="line">      file: name&#x3D;&#x2F;app&#x2F;&#123;&#123; var2 &#125;&#125;.log state&#x3D;touch</span><br><span class="line">      </span><br><span class="line">hostname app_81.magedu.com  hostname 不支持&quot;_&quot;,认为&quot;_&quot;是非法字符</span><br><span class="line">hostnamectl set-hostname app_80.magedu.com  可以更改主机名</span><br></pre></td></tr></table></figure>

<h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组嵌套</span><br><span class="line">inventory中，组还可以包含其它的组，并且也可以向组中的主机指定变量。</span><br><span class="line">这些变量只能在ansible-playbook中使用，而ansible命令不支持</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    [apache]</span><br><span class="line">    httpd1.magedu.com</span><br><span class="line">    httpd2.magedu.com</span><br><span class="line">    </span><br><span class="line">    [nginx]</span><br><span class="line">    ngx1.magedu.com</span><br><span class="line">    ngx2.magedu.com</span><br><span class="line">    </span><br><span class="line">    [websrvs:children]</span><br><span class="line">    apache</span><br><span class="line">    nginx</span><br><span class="line">    </span><br><span class="line">    [webservers:vars]</span><br><span class="line">    ntp_server&#x3D;ntp.magedu.com</span><br></pre></td></tr></table></figure>

<h3 id="invertory参数"><a href="#invertory参数" class="headerlink" title="invertory参数"></a>invertory参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">invertory参数：用于定义ansible远程连接目标主机时使用的参数，而非传递给playbook的变量</span><br><span class="line">    ansible_ssh_host</span><br><span class="line">    ansible_ssh_port</span><br><span class="line">    ansible_ssh_user</span><br><span class="line">    ansible_ssh_pass</span><br><span class="line">    ansbile_sudo_pass</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    cat &#x2F;etc&#x2F;ansible&#x2F;hosts</span><br><span class="line">    [websrvs]</span><br><span class="line">    192.168.0.1 ansible_ssh_user&#x3D;root ansible_ssh_pass&#x3D;magedu</span><br><span class="line">    192.168.0.2 ansible_ssh_user&#x3D;root ansible_ssh_pass&#x3D;magedu</span><br></pre></td></tr></table></figure>

<h3 id="invertory参数-1"><a href="#invertory参数-1" class="headerlink" title="invertory参数"></a>invertory参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inventory参数</span><br><span class="line">ansible基于ssh连接inventory中指定的远程主机时，还可以通过参数指定其交互方式；</span><br><span class="line">这些参数如下所示：</span><br><span class="line">ansible_ssh_host</span><br><span class="line">The name of the host to connect to, if different from the alias you wishto give to it.</span><br><span class="line"></span><br><span class="line">ansible_ssh_port</span><br><span class="line">The ssh port number, if not 22</span><br><span class="line"></span><br><span class="line">ansible_ssh_user</span><br><span class="line">The default ssh user name to use.</span><br><span class="line"></span><br><span class="line">ansible_ssh_pass</span><br><span class="line">The ssh password to use (this is insecure, we strongly recommendusing --ask-pass or SSH keys)</span><br><span class="line"></span><br><span class="line">ansible_sudo_pass</span><br><span class="line">The sudo password to use (this is insecure, we strongly recommendusing --ask-sudo-pass)</span><br><span class="line"></span><br><span class="line">ansible_connection</span><br><span class="line">Connection type of the host. Candidates are local, ssh or paramiko.</span><br><span class="line">The default is paramiko before Ansible 1.2, and &#39;smart&#39; afterwards which</span><br><span class="line">detects whether usage of &#39;ssh&#39; would be feasible based on whether</span><br><span class="line">ControlPersist is supported.</span><br><span class="line"></span><br><span class="line">ansible_ssh_private_key_file</span><br><span class="line">Private key file used by ssh. Useful if using multiple keys and you don&#39;t want to use SSH agent.</span><br><span class="line"></span><br><span class="line">ansible_shell_type</span><br><span class="line">The shell type of the target system. By default commands are formatted</span><br><span class="line">using &#39;sh&#39;-style syntax by default. Setting this to &#39;csh&#39; or &#39;fish&#39; will cause</span><br><span class="line">commands executed on target systems to follow those shell&#39;s syntax instead.</span><br><span class="line"></span><br><span class="line">ansible_python_interpreter</span><br><span class="line">The target host python path. This is useful for systems with more</span><br><span class="line">than one Python or not located at &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot; such as \*BSD, or where &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"></span><br><span class="line">is not a 2.X series Python. We do not use the &quot;&#x2F;usr&#x2F;bin&#x2F;env&quot; mechanism as that requires the remote user&#39;s</span><br><span class="line"></span><br><span class="line">path to be set right and also assumes the &quot;python&quot; executable is named python,where the executable might</span><br><span class="line"></span><br><span class="line">be named something like &quot;python26&quot;.</span><br><span class="line">ansible\_\*\_interpreter</span><br><span class="line"></span><br><span class="line">Works for anything such as ruby or perl and works just like ansible_python_interpreter.</span><br><span class="line"></span><br><span class="line">This replaces shebang of modules which will run on that host.</span><br></pre></td></tr></table></figure>

<h3 id="模板templates"><a href="#模板templates" class="headerlink" title="模板templates"></a>模板templates</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文本文件，嵌套有脚本（使用模板编程语言编写） 借助模板生成真正的文件</span><br><span class="line">Jinja2语言，使用字面量，有下面形式</span><br><span class="line">    字符串：使用单引号或双引号</span><br><span class="line">    数字：整数，浮点数</span><br><span class="line">    列表：[item1, item2, ...]</span><br><span class="line">    元组：(item1, item2, ...)</span><br><span class="line">    字典：&#123;key1:value1, key2:value2, ...&#125;</span><br><span class="line">    布尔型：true&#x2F;false</span><br><span class="line">算术运算：+, -, *, &#x2F;, &#x2F;&#x2F;, %, **</span><br><span class="line">比较操作：&#x3D;&#x3D;, !&#x3D;, &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;</span><br><span class="line">逻辑运算：and，or，not</span><br><span class="line">流表达式：For，If，When</span><br></pre></td></tr></table></figure>

<h3 id="Jinja2相关"><a href="#Jinja2相关" class="headerlink" title="Jinja2相关"></a>Jinja2相关</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字面量</span><br><span class="line">    1&gt; 表达式最简单的形式就是字面量。字面量表示诸如字符串和数值的 Python对象。如“Hello World”</span><br><span class="line">    双引号或单引号中间的一切都是字符串。</span><br><span class="line">    2&gt; 无论何时你需要在模板中使用一个字符串（比如函数调用、过滤器或只是包含或继承一个模板的参数），如4242.23</span><br><span class="line">    3&gt; 数值可以为整数和浮点数。如果有小数点，则为浮点数，否则为整数。在Python 里， 42 和 42.0 是不一样的</span><br></pre></td></tr></table></figure>

<h3 id="Jinja2-算术运算"><a href="#Jinja2-算术运算" class="headerlink" title="Jinja2:算术运算"></a>Jinja2:算术运算</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">算术运算</span><br><span class="line">Jinja 允许你用计算值。这在模板中很少用到，但为了完整性允许其存在</span><br><span class="line">支持下面的运算符</span><br><span class="line">    +：把两个对象加到一起。</span><br><span class="line">       通常对象是素质，但是如果两者是字符串或列表，你可以用这 种方式来衔接它们。</span><br><span class="line">       无论如何这不是首选的连接字符串的方式！连接字符串见 ~ 运算符。 &#123;&#123; 1 + 1 &#125;&#125; 等于 2</span><br><span class="line">    -：用第一个数减去第二个数。 &#123;&#123; 3 - 2 &#125;&#125; 等于 1</span><br><span class="line">    &#x2F;：对两个数做除法。返回值会是一个浮点数。 &#123;&#123; 1 &#x2F; 2 &#125;&#125; 等于 &#123;&#123; 0.5 &#125;&#125;</span><br><span class="line">    &#x2F;&#x2F;：对两个数做除法，返回整数商。 &#123;&#123; 20 &#x2F;&#x2F; 7 &#125;&#125; 等于 2</span><br><span class="line">    %：计算整数除法的余数。 &#123;&#123; 11 % 7 &#125;&#125; 等于 4</span><br><span class="line">    *：用右边的数乘左边的操作数。 &#123;&#123; 2 * 2 &#125;&#125; 会返回 4 。</span><br><span class="line">       也可以用于重 复一个字符串多次。&#123;&#123; ‘&#x3D;’ * 80 &#125;&#125; 会打印 80 个等号的横条</span><br><span class="line">    **：取左操作数的右操作数次幂。 &#123;&#123; 2**3 &#125;&#125; 会返回 8</span><br></pre></td></tr></table></figure>

<h3 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比较操作符</span><br><span class="line">&#x3D;&#x3D; 比较两个对象是否相等</span><br><span class="line">!&#x3D; 比较两个对象是否不等</span><br><span class="line">&gt; 如果左边大于右边，返回 true</span><br><span class="line">&gt;&#x3D; 如果左边大于等于右边，返回 true</span><br><span class="line">&lt; 如果左边小于右边，返回 true</span><br><span class="line">&lt;&#x3D; 如果左边小于等于右边，返回 true</span><br><span class="line"></span><br><span class="line">逻辑运算符</span><br><span class="line">对于 if 语句，在 for 过滤或 if 表达式中，它可以用于联合多个表达式</span><br><span class="line">and</span><br><span class="line">    如果左操作数和右操作数同为真，返回 true</span><br><span class="line">or</span><br><span class="line">    如果左操作数和右操作数有一个为真，返回 true</span><br><span class="line">not</span><br><span class="line">    对一个表达式取反（见下）</span><br><span class="line">(expr)</span><br><span class="line">    表达式组</span><br><span class="line"></span><br><span class="line">[&#39;list&#39;, &#39;of&#39;, &#39;objects&#39;]:</span><br><span class="line">一对中括号括起来的东西是一个列表。列表用于存储和迭代序列化的数据。</span><br><span class="line">例如 你可以容易地在 for循环中用列表和元组创建一个链接的列表</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &#123;% for href, caption in [(&#39;index.html&#39;, &#39;Index&#39;), (&#39;about.html&#39;, &#39;About&#39;), (&#39;downloads.html&#39;,</span><br><span class="line">&#39;Downloads&#39;)] %&#125;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&quot;&#123;&#123; href &#125;&#125;&quot;&gt;&#123;&#123; caption &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    (&#39;tuple&#39;, &#39;of&#39;, &#39;values&#39;):</span><br><span class="line"></span><br><span class="line">元组与列表类似，只是你不能修改元组。</span><br><span class="line">如果元组中只有一个项，你需要以逗号结尾它。</span><br><span class="line">元组通常用于表示两个或更多元素的项。更多细节见上面的例子</span><br><span class="line">    &#123;&#39;dict&#39;: &#39;of&#39;, &#39;key&#39;: &#39;and&#39;, &#39;value&#39;: &#39;pairs&#39;&#125;:</span><br><span class="line"></span><br><span class="line">Python 中的字典是一种关联键和值的结构。</span><br><span class="line">键必须是唯一的，并且键必须只有一个 值。</span><br><span class="line">字典在模板中很少使用，罕用于诸如 xmlattr() 过滤器之类</span><br><span class="line">    true &#x2F; false:</span><br><span class="line">    true 永远是 true ，而 false 始终是 false</span><br></pre></td></tr></table></figure>

<h3 id="template-的使用"><a href="#template-的使用" class="headerlink" title="template 的使用"></a>template 的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template功能：根据模块文件动态生成对应的配置文件</span><br><span class="line">   &gt; template文件必须存放于templates目录下，且命名为 .j2 结尾</span><br><span class="line">   &gt; yaml&#x2F;yml 文件需和templates目录平级，目录结构如下：</span><br><span class="line">    .&#x2F;</span><br><span class="line">     ├── temnginx.yml</span><br><span class="line">     └── templates</span><br><span class="line">        └── nginx.conf.j2</span><br></pre></td></tr></table></figure>

<h3 id="template示例"><a href="#template示例" class="headerlink" title="template示例"></a>template示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：利用template 同步nginx配置文件</span><br><span class="line">准备templates&#x2F;nginx.conf.j2文件</span><br><span class="line">vim temnginx.yml</span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: template config to remote hosts</span><br><span class="line">      template: src&#x3D;nginx.conf.j2 dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">ansible-playbook temnginx.yml</span><br></pre></td></tr></table></figure>

<h3 id="Playbook中template变更替换"><a href="#Playbook中template变更替换" class="headerlink" title="Playbook中template变更替换"></a>Playbook中template变更替换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改文件nginx.conf.j2 下面行为</span><br><span class="line">worker_processes &#123;&#123; ansible_processor_vcpus &#125;&#125;;</span><br><span class="line"></span><br><span class="line">cat temnginx2.yml</span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: template config to remote hosts</span><br><span class="line">      template: src&#x3D;nginx.conf.j2 dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">ansible-playbook temnginx2.yml</span><br></pre></td></tr></table></figure>

<h3 id="Playbook中template算术运算"><a href="#Playbook中template算术运算" class="headerlink" title="Playbook中template算术运算"></a>Playbook中template算术运算</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">算法运算：</span><br><span class="line">示例：</span><br><span class="line">    vim nginx.conf.j2</span><br><span class="line">    worker_processes &#123;&#123; ansible_processor_vcpus**2 &#125;&#125;;</span><br><span class="line">    worker_processes &#123;&#123; ansible_processor_vcpus+2 &#125;&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="when-实现条件判断"><a href="#when-实现条件判断" class="headerlink" title="when  实现条件判断"></a>when  实现条件判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">条件测试:如果需要根据变量、facts或此前任务的执行结果来做为某task执行与否的前提时要用到条件测试,</span><br><span class="line">通过when语句实现，在task中使用，jinja2的语法格式</span><br><span class="line"></span><br><span class="line">when语句</span><br><span class="line">    在task后添加when子句即可使用条件测试；when语句支持Jinja2表达式语法</span><br><span class="line">示例：</span><br><span class="line">tasks:</span><br><span class="line">  - name: &quot;shutdown RedHat flavored systems&quot;</span><br><span class="line">    command: &#x2F;sbin&#x2F;shutdown -h now</span><br><span class="line">    when: ansible_os_family &#x3D;&#x3D; &quot;RedHat&quot;  当系统属于红帽系列,执行command模块 </span><br><span class="line"> </span><br><span class="line">when语句中还可以使用Jinja2的大多&quot;filter&quot;，</span><br><span class="line">例如要忽略此前某语句的错误并基于其结果(failed或者success)运行后面指定的语句，</span><br><span class="line">可使用类似如下形式：</span><br><span class="line">tasks:</span><br><span class="line">  - command: &#x2F;bin&#x2F;false</span><br><span class="line">    register: result</span><br><span class="line">    ignore_errors: True</span><br><span class="line">  - command: &#x2F;bin&#x2F;something</span><br><span class="line">    when: result|failed</span><br><span class="line">  - command: &#x2F;bin&#x2F;something_else</span><br><span class="line">    when: result|success</span><br><span class="line">  - command: &#x2F;bin&#x2F;still&#x2F;something_else</span><br><span class="line">    when: result|skipped</span><br><span class="line"></span><br><span class="line">此外，when语句中还可以使用facts或playbook中定义的变量</span><br></pre></td></tr></table></figure>
<h3 id="示例：when条件判断"><a href="#示例：when条件判断" class="headerlink" title="示例：when条件判断"></a>示例：when条件判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: add group nginx</span><br><span class="line">      tags: user</span><br><span class="line">      user: name&#x3D;nginx state&#x3D;present</span><br><span class="line">    - name: add user nginx</span><br><span class="line">      user: name&#x3D;nginx state&#x3D;present group&#x3D;nginx</span><br><span class="line">    - name: Install Nginx</span><br><span class="line">      yum: name&#x3D;nginx state&#x3D;present</span><br><span class="line">    - name: restart Nginx</span><br><span class="line">      service: name&#x3D;nginx state&#x3D;restarted</span><br><span class="line">      when: ansible_distribution_major_version &#x3D;&#x3D; &quot;6&quot;</span><br></pre></td></tr></table></figure>

<h3 id="示例：when条件判断-1"><a href="#示例：when条件判断-1" class="headerlink" title="示例：when条件判断"></a>示例：when条件判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">tasks:</span><br><span class="line">  - name: install conf file to centos7</span><br><span class="line">    template: src&#x3D;nginx.conf.c7.j2 dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">    when: ansible_distribution_major_version &#x3D;&#x3D; &quot;7&quot;</span><br><span class="line">  - name: install conf file to centos6</span><br><span class="line">    template: src&#x3D;nginx.conf.c6.j2 dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">    when: ansible_distribution_major_version &#x3D;&#x3D; &quot;6&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Playbook中when条件判断"><a href="#Playbook中when条件判断" class="headerlink" title="Playbook中when条件判断"></a>Playbook中when条件判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: srv120</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name:</span><br><span class="line">      template: src&#x3D;nginx.conf.j2 dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">      when: ansible_distribution_major_version &#x3D;&#x3D; &quot;7&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://note.youdao.com/yws/res/100097/A6150393F3CF41DEAFD7A7002C2F952E" alt="image"></p>
<h3 id="迭代：with-items"><a href="#迭代：with-items" class="headerlink" title="迭代：with_items"></a>迭代：with_items</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">迭代：当有需要重复性执行的任务时，可以使用迭代机制</span><br><span class="line">    &gt; 对迭代项的引用，固定变量名为&quot;item&quot;</span><br><span class="line">    &gt; 要在task中使用with_items给定要迭代的元素列表</span><br><span class="line">    &gt; 列表格式：</span><br><span class="line">         字符串</span><br><span class="line">         字典</span><br></pre></td></tr></table></figure>

<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例： 创建用户</span><br><span class="line">- name: add several users</span><br><span class="line">  user: name&#x3D;&#123;&#123; item &#125;&#125; state&#x3D;present groups&#x3D;wheel   #&#123;&#123; item &#125;&#125; 系统自定义变量</span><br><span class="line">  with_items:       # 定义&#123;&#123; item &#125;&#125; 的值和个数</span><br><span class="line">    - testuser1</span><br><span class="line">    - testuser2</span><br><span class="line"></span><br><span class="line">上面语句的功能等同于下面的语句：</span><br><span class="line">- name: add user testuser1</span><br><span class="line">  user: name&#x3D;testuser1 state&#x3D;present groups&#x3D;wheel</span><br><span class="line">- name: add user testuser2</span><br><span class="line">  user: name&#x3D;testuser2 state&#x3D;present groups&#x3D;wheel</span><br><span class="line">  </span><br><span class="line">with_items中可以使用元素还可为hashes</span><br><span class="line">示例：</span><br><span class="line">- name: add several users</span><br><span class="line">  user: name&#x3D;&#123;&#123; item.name &#125;&#125; state&#x3D;present groups&#x3D;&#123;&#123; item.groups &#125;&#125;</span><br><span class="line">  with_items:</span><br><span class="line">    - &#123; name: &#39;testuser1&#39;, groups: &#39;wheel&#39; &#125;</span><br><span class="line">    - &#123; name: &#39;testuser2&#39;, groups: &#39;root&#39; &#125;</span><br><span class="line"></span><br><span class="line">ansible的循环机制还有更多的高级功能，具体请参见官方文档</span><br><span class="line">http:&#x2F;&#x2F;docs.ansible.com&#x2F;playbooks_loops.html</span><br></pre></td></tr></table></figure>

<h3 id="示例：迭代"><a href="#示例：迭代" class="headerlink" title="示例：迭代"></a>示例：迭代</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：将多个文件进行copy到被控端</span><br><span class="line">---</span><br><span class="line">- hosts: testsrv</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks</span><br><span class="line">  - name: Create rsyncd config</span><br><span class="line">    copy: src&#x3D;&#123;&#123; item &#125;&#125; dest&#x3D;&#x2F;etc&#x2F;&#123;&#123; item &#125;&#125;</span><br><span class="line">    with_items:</span><br><span class="line">  - rsyncd.secrets</span><br><span class="line">  - rsyncd.conf</span><br></pre></td></tr></table></figure>

<h3 id="示例：迭代-1"><a href="#示例：迭代-1" class="headerlink" title="示例：迭代"></a>示例：迭代</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: copy file</span><br><span class="line">      copy: src&#x3D;&#123;&#123; item &#125;&#125; dest&#x3D;&#x2F;tmp&#x2F;&#123;&#123; item &#125;&#125;</span><br><span class="line">      with_items:</span><br><span class="line">    - file1</span><br><span class="line">    - file2</span><br><span class="line">    - file3</span><br><span class="line">- name: yum install httpd</span><br><span class="line">  yum: name&#x3D;&#123;&#123; item &#125;&#125; state&#x3D;present</span><br><span class="line">  with_items:</span><br><span class="line">    - apr</span><br><span class="line">    - apr-util</span><br><span class="line">    - httpd</span><br></pre></td></tr></table></figure>

<h3 id="示例：迭代-2"><a href="#示例：迭代-2" class="headerlink" title="示例：迭代"></a>示例：迭代</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- hosts：websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks</span><br><span class="line">    - name: install some packages</span><br><span class="line">      yum: name&#x3D;&#123;&#123; item &#125;&#125; state&#x3D;present</span><br><span class="line">      with_items:</span><br><span class="line">        - nginx</span><br><span class="line">        - memcached</span><br><span class="line">        - php-fpm</span><br></pre></td></tr></table></figure>

<h3 id="示例：迭代嵌套子变量"><a href="#示例：迭代嵌套子变量" class="headerlink" title="示例：迭代嵌套子变量"></a>示例：迭代嵌套子变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- hosts：websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: add some groups</span><br><span class="line">      group: name&#x3D;&#123;&#123; item &#125;&#125; state&#x3D;present</span><br><span class="line">      with_items:</span><br><span class="line">        - group1</span><br><span class="line">        - group2</span><br><span class="line">        - group3</span><br><span class="line">    - name: add some users</span><br><span class="line">      user: name&#x3D;&#123;&#123; item.name &#125;&#125; group&#x3D;&#123;&#123; item.group &#125;&#125; state&#x3D;present</span><br><span class="line">      with_items:</span><br><span class="line">        - &#123; name: &#39;user1&#39;, group: &#39;group1&#39; &#125;</span><br><span class="line">        - &#123; name: &#39;user2&#39;, group: &#39;group2&#39; &#125;</span><br><span class="line">        - &#123; name: &#39;user3&#39;, group: &#39;group3&#39; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="with-itmes-嵌套子变量"><a href="#with-itmes-嵌套子变量" class="headerlink" title="with_itmes 嵌套子变量"></a>with_itmes 嵌套子变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with_itmes 嵌套子变量</span><br><span class="line">示例</span><br><span class="line">---</span><br><span class="line">- hosts: testweb</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: add several users</span><br><span class="line">      user: name&#x3D;&#123;&#123; item.name &#125;&#125; state&#x3D;present groups&#x3D;&#123;&#123; item.groups &#125;&#125;</span><br><span class="line">      with_items:</span><br><span class="line">    - &#123; name: &#39;testuser1&#39; , groups: &#39;wheel&#39;&#125;</span><br><span class="line">    - &#123; name: &#39;testuser2&#39; , groups: &#39;root&#39;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Playbook字典-with-items"><a href="#Playbook字典-with-items" class="headerlink" title="Playbook字典 with_items"></a>Playbook字典 with_items</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- name: 使用ufw模块来管理哪些端口需要开启</span><br><span class="line">  ufw:</span><br><span class="line">  rule: “&#123;&#123; item.rule &#125;&#125;”</span><br><span class="line">  port: “&#123;&#123; item.port &#125;&#125;”</span><br><span class="line">  proto: “&#123;&#123; item.proto &#125;&#125;”</span><br><span class="line">  with_items:</span><br><span class="line">    - &#123; rule: &#39;allow&#39;, port: 22, proto: &#39;tcp&#39; &#125;</span><br><span class="line">    - &#123; rule: &#39;allow&#39;, port: 80, proto: &#39;tcp&#39; &#125;</span><br><span class="line">    - &#123; rule: &#39;allow&#39;, port: 123, proto: &#39;udp&#39; &#125;</span><br><span class="line"></span><br><span class="line">- name: 配置网络进出方向的默认规则</span><br><span class="line">  ufw:</span><br><span class="line">  direction: &quot;&#123;&#123; item.direction &#125;&#125;&quot;</span><br><span class="line">  policy: &quot;&#123;&#123; item.policy &#125;&#125;&quot;</span><br><span class="line">  state: enabled</span><br><span class="line">  with_items:</span><br><span class="line">    - &#123; direction: outgoing, policy: allow &#125;</span><br><span class="line">    - &#123; direction: incoming, policy: deny &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Playbook中template-for-if-when循环"><a href="#Playbook中template-for-if-when循环" class="headerlink" title="Playbook中template for if  when循环"></a>Playbook中template for if  when循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for vhost in nginx_vhosts %&#125;</span><br><span class="line"></span><br><span class="line">server &#123;    #重复执行server代码</span><br><span class="line">listen &#123;&#123; vhost.listen | default(&#39;80 default_server&#39;) &#125;&#125;;</span><br><span class="line"></span><br><span class="line">&#123;% if vhost.server_name is defined %&#125;</span><br><span class="line">server_name &#123;&#123; vhost.server_name &#125;&#125;;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if vhost.root is defined %&#125;</span><br><span class="line">root &#123;&#123; vhost.root &#125;&#125;;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; temnginx.yml</span><br><span class="line">---</span><br><span class="line">- hosts: testweb</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:      # 调用变量</span><br><span class="line">    nginx_vhosts:</span><br><span class="line">      - listen: 8080  #列表 键值对</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;templates&#x2F;nginx.conf.j2</span><br><span class="line">&#123;% for vhost in nginx_vhosts %&#125;  </span><br><span class="line">server &#123;</span><br><span class="line">  listen &#123;&#123; vhost.listen &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">生成的结果</span><br><span class="line">server &#123;</span><br><span class="line">  listen 8080</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; temnginx.yml</span><br><span class="line">---</span><br><span class="line">- hosts: mageduweb</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:</span><br><span class="line">    nginx_vhosts:</span><br><span class="line">      - web1</span><br><span class="line">      - web2</span><br><span class="line">      - web3</span><br><span class="line">  tasks:</span><br><span class="line">    - name: template config</span><br><span class="line">      template: src&#x3D;nginx.conf.j2 dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; templates&#x2F;nginx.conf.j2</span><br><span class="line">&#123;% for vhost in nginx_vhosts %&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen &#123;&#123; vhost &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">生成的结果：</span><br><span class="line">server &#123;</span><br><span class="line">    listen web1</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen web2</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen web3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roles</span><br><span class="line">    ansible自1.2版本引入的新特性，用于层次性、结构化地组织playbook。</span><br><span class="line">    roles能够根据层次型结构自动装载变量文件、tasks以及handlers等。</span><br><span class="line">    要使用roles只需要在playbook中使用include指令即可。</span><br><span class="line">    简单来讲，roles就是通过分别将变量、文件、任务、模板及处理器放置于单独的目录中，</span><br><span class="line">    并可以便捷地include它们的一种机制。</span><br><span class="line">    角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中</span><br><span class="line"></span><br><span class="line">复杂场景：建议使用roles，代码复用度高</span><br><span class="line">    变更指定主机或主机组</span><br><span class="line">    如命名不规范维护和传承成本大</span><br><span class="line">    某些功能需多个Playbook，通过includes即可实现</span><br></pre></td></tr></table></figure>

<h3 id="Roles"><a href="#Roles" class="headerlink" title="Roles"></a>Roles</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">角色(roles)：角色集合</span><br><span class="line">roles&#x2F;</span><br><span class="line">    mysql&#x2F;</span><br><span class="line">    httpd&#x2F;</span><br><span class="line">    nginx&#x2F;</span><br><span class="line">    memcached&#x2F;</span><br><span class="line">    </span><br><span class="line">可以互相调用</span><br></pre></td></tr></table></figure>

<h3 id="Ansible-Roles目录编排"><a href="#Ansible-Roles目录编排" class="headerlink" title="Ansible Roles目录编排"></a>Ansible Roles目录编排</h3><p><img src="https://note.youdao.com/yws/res/100101/63539E099AD1483D87CD28CBD473463B" alt="image"> </p>
<h3 id="roles目录结构"><a href="#roles目录结构" class="headerlink" title="roles目录结构"></a>roles目录结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每个角色，以特定的层级目录结构进行组织</span><br><span class="line">roles目录结构：</span><br><span class="line"></span><br><span class="line">playbook.yml  调用角色</span><br><span class="line">roles&#x2F;</span><br><span class="line">  project&#x2F; (角色名称)</span><br><span class="line">    tasks&#x2F;</span><br><span class="line">    files&#x2F;</span><br><span class="line">    vars&#x2F;</span><br><span class="line">    templates&#x2F;</span><br><span class="line">    handlers&#x2F;</span><br><span class="line">    default&#x2F; 不常用</span><br><span class="line">    meta&#x2F;    不常用</span><br></pre></td></tr></table></figure>

<h3 id="Roles各目录作用"><a href="#Roles各目录作用" class="headerlink" title="Roles各目录作用"></a>Roles各目录作用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;roles&#x2F;project&#x2F; :项目名称,有以下子目录</span><br><span class="line">    files&#x2F; ：存放由copy或script模块等调用的文件</span><br><span class="line">    templates&#x2F;：template模块查找所需要模板文件的目录</span><br><span class="line">    tasks&#x2F;：定义task,role的基本元素，至少应该包含一个名为main.yml的文件；</span><br><span class="line">            其它的文件需要在此文件中通过include进行包含</span><br><span class="line">    handlers&#x2F;：至少应该包含一个名为main.yml的文件；</span><br><span class="line">               其它的文件需要在此文件中通过include进行包含</span><br><span class="line">    vars&#x2F;：定义变量，至少应该包含一个名为main.yml的文件；</span><br><span class="line">           其它的文件需要在此文件中通过include进行包含</span><br><span class="line">    meta&#x2F;：定义当前角色的特殊设定及其依赖关系,至少应该包含一个名为main.yml的文件，</span><br><span class="line">           其它文件需在此文件中通过include进行包含</span><br><span class="line">    default&#x2F;：设定默认变量时使用此目录中的main.yml文件</span><br><span class="line">    </span><br><span class="line">roles&#x2F;appname 目录结构</span><br><span class="line">    tasks目录：至少应该包含一个名为main.yml的文件，其定义了此角色的任务列表；</span><br><span class="line">               此文件可以使用include包含其它的位于此目录中的task文件</span><br><span class="line">    files目录：存放由copy或script等模块调用的文件；</span><br><span class="line">    templates目录：template模块会自动在此目录中寻找Jinja2模板文件</span><br><span class="line">    handlers目录：此目录中应当包含一个main.yml文件，用于定义此角色用到的各handler；</span><br><span class="line">                  在handler中使用include包含的其它的handler文件也应该位于此目录中；</span><br><span class="line">    vars目录：应当包含一个main.yml文件，用于定义此角色用到的变量；</span><br><span class="line">    meta目录：应当包含一个main.yml文件，用于定义此角色的特殊设定及其依赖关系；</span><br><span class="line">              ansible1.3及其以后的版本才支持；</span><br><span class="line">    default目录：为当前角色设定默认变量时使用此目录；应当包含一个main.yml文件</span><br><span class="line"></span><br><span class="line">roles&#x2F;example_role&#x2F;files&#x2F;             所有文件，都将可存放在这里</span><br><span class="line">roles&#x2F;example_role&#x2F;templates&#x2F;         所有模板都存放在这里</span><br><span class="line">roles&#x2F;example_role&#x2F;tasks&#x2F;main.yml：   主函数，包括在其中的所有任务将被执行</span><br><span class="line">roles&#x2F;example_role&#x2F;handlers&#x2F;main.yml：所有包括其中的 handlers 将被执行</span><br><span class="line">roles&#x2F;example_role&#x2F;vars&#x2F;main.yml：    所有包括在其中的变量将在roles中生效</span><br><span class="line">roles&#x2F;example_role&#x2F;meta&#x2F;main.yml：    roles所有依赖将被正常登入</span><br></pre></td></tr></table></figure>

<h3 id="创建role"><a href="#创建role" class="headerlink" title="创建role"></a>创建role</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建role的步骤</span><br><span class="line">(1) 创建以roles命名的目录</span><br><span class="line">(2) 在roles目录中分别创建以各角色名称命名的目录，如webservers等</span><br><span class="line">(3) 在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录；</span><br><span class="line">    用不到的目录可以创建为空目录，也可以不创建</span><br><span class="line">(4) 在playbook文件中，调用各角色</span><br></pre></td></tr></table></figure>

<h3 id="实验-创建httpd角色"><a href="#实验-创建httpd角色" class="headerlink" title="实验: 创建httpd角色"></a>实验: 创建httpd角色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&gt; 创建roles目录</span><br><span class="line">   mkdir roles&#x2F;&#123;httpd,mysql,redis&#125;&#x2F;tasks -pv</span><br><span class="line">   mkdir  roles&#x2F;httpd&#x2F;&#123;handlers,files&#125;</span><br><span class="line"></span><br><span class="line">查看目录结构</span><br><span class="line">tree roles&#x2F;</span><br><span class="line">    roles&#x2F;</span><br><span class="line">    ├── httpd</span><br><span class="line">    │   ├── files</span><br><span class="line">    │   ├── handlers</span><br><span class="line">    │   └── tasks</span><br><span class="line">    ├── mysql</span><br><span class="line">    │   └── tasks</span><br><span class="line">    └── redis</span><br><span class="line">        └── tasks</span><br><span class="line"></span><br><span class="line">2&gt; 创建目标文件</span><br><span class="line">   cd roles&#x2F;httpd&#x2F;tasks&#x2F;</span><br><span class="line">   touch install.yml config.yml service.yml</span><br><span class="line"></span><br><span class="line">3&gt; vim install.yml</span><br><span class="line">   - name: install httpd package</span><br><span class="line">     yum: name&#x3D;httpd</span><br><span class="line">     </span><br><span class="line">   vim config.yml</span><br><span class="line">   - name: config file  </span><br><span class="line">     copy: src&#x3D;httpd.conf dest&#x3D;&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F; backup&#x3D;yes </span><br><span class="line">   </span><br><span class="line">   vim service.yml</span><br><span class="line">   - name: start service </span><br><span class="line">     service: name&#x3D;httpd state&#x3D;started enabled&#x3D;yes</span><br><span class="line">     </span><br><span class="line">4&gt; 创建main.yml主控文件,调用以上单独的yml文件,</span><br><span class="line">   main.yml定义了谁先执行谁后执行的顺序</span><br><span class="line">   vim main.yml</span><br><span class="line">   - include: install.yml</span><br><span class="line">   - include: config.yml</span><br><span class="line">   - include: service.yml</span><br><span class="line">   </span><br><span class="line">5&gt; 准备httpd.conf文件,放到httpd单独的文件目录下</span><br><span class="line">   cp &#x2F;app&#x2F;ansible&#x2F;flies&#x2F;httpd.conf ..&#x2F;files&#x2F;</span><br><span class="line">   </span><br><span class="line">6&gt; 创建一个网页</span><br><span class="line">   vim flies&#x2F;index.html</span><br><span class="line">   &lt;h1&gt; welcome to weixiaodong home &lt;\h1&gt;</span><br><span class="line"></span><br><span class="line">7&gt; 创建网页的yml文件</span><br><span class="line">   vim tasks&#x2F;index.yml</span><br><span class="line">   - name: index.html</span><br><span class="line">     copy: src&#x3D;index.html dest&#x3D;&#x2F;var&#x2F;www&#x2F;html </span><br><span class="line"></span><br><span class="line">8&gt; 将网页的yml文件写进mian.yml文件中</span><br><span class="line">   vim mian.yml</span><br><span class="line">   - include: install.yml</span><br><span class="line">   - include: config.yml</span><br><span class="line">   - include: index.yml</span><br><span class="line">   - include: service.yml</span><br><span class="line"></span><br><span class="line">9&gt; 在handlers目录下创建handler文件mian.yml</span><br><span class="line">   vim handlers&#x2F;main.yml</span><br><span class="line">   - name: restart service httpd</span><br><span class="line">     service: name&#x3D;httpd state&#x3D;restarted</span><br><span class="line"></span><br><span class="line">10&gt; 创建文件调用httpd角色</span><br><span class="line">    cd &#x2F;app&#x2F;ansidle&#x2F;roles</span><br><span class="line">    vim role_httpd.yml</span><br><span class="line">    ---</span><br><span class="line">    # httpd role</span><br><span class="line">    - hosts: appsrvs</span><br><span class="line">      remote_user: root </span><br><span class="line"></span><br><span class="line">      roles:       #调用角色</span><br><span class="line">        - role: httpd  </span><br><span class="line">        </span><br><span class="line">11&gt; 查看目录结构</span><br><span class="line">    tree </span><br><span class="line">    .</span><br><span class="line">    httpd</span><br><span class="line">    ├── files</span><br><span class="line">    │   ├── httpd.conf</span><br><span class="line">    │   └── index.html</span><br><span class="line">    ├── handlers</span><br><span class="line">    │   └── main.yml</span><br><span class="line">    └── tasks</span><br><span class="line">        ├── config.yml</span><br><span class="line">        ├── index.yml</span><br><span class="line">        ├── install.yml</span><br><span class="line">        ├── main.yml</span><br><span class="line">        └── service.yml</span><br><span class="line"></span><br><span class="line">12&gt; ansible-playbook role_httpd.yml</span><br></pre></td></tr></table></figure>

<h3 id="针对大型项目使用Roles进行编排"><a href="#针对大型项目使用Roles进行编排" class="headerlink" title="针对大型项目使用Roles进行编排"></a>针对大型项目使用Roles进行编排</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roles目录结构：</span><br><span class="line">playbook.yml</span><br><span class="line">roles&#x2F;</span><br><span class="line">  project&#x2F;</span><br><span class="line">    tasks&#x2F;</span><br><span class="line">    files&#x2F;</span><br><span class="line">    vars&#x2F;</span><br><span class="line">    templates&#x2F;</span><br><span class="line">    handlers&#x2F;</span><br><span class="line">    default&#x2F; # 不经常用</span><br><span class="line">    meta&#x2F;    # 不经常用</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">nginx-role.yml</span><br><span class="line">roles&#x2F;</span><br><span class="line">└── nginx</span><br><span class="line">    ├── files</span><br><span class="line">    │ └── main.yml</span><br><span class="line">    ├── tasks</span><br><span class="line">    │ ├── groupadd.yml</span><br><span class="line">    │ ├── install.yml</span><br><span class="line">    │ ├── main.yml</span><br><span class="line">    │ ├── restart.yml</span><br><span class="line">    │ └── useradd.yml</span><br><span class="line">    └── vars</span><br><span class="line">        └── main.yml</span><br></pre></td></tr></table></figure>
<h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roles的示例如下所示：</span><br><span class="line">site.yml</span><br><span class="line">webservers.yml</span><br><span class="line">dbservers.yml</span><br><span class="line">roles&#x2F;</span><br><span class="line">  common&#x2F;</span><br><span class="line">    files&#x2F;</span><br><span class="line">    templates&#x2F;</span><br><span class="line">    tasks&#x2F;</span><br><span class="line">    handlers&#x2F;</span><br><span class="line">    vars&#x2F;</span><br><span class="line">    meta&#x2F;</span><br><span class="line">  webservers&#x2F;</span><br><span class="line">    files&#x2F;</span><br><span class="line">    templates&#x2F;</span><br><span class="line">    tasks&#x2F;</span><br><span class="line">  handlers&#x2F;</span><br><span class="line">    vars&#x2F;</span><br><span class="line">    meta&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="实验：-创建一个nginx角色"><a href="#实验：-创建一个nginx角色" class="headerlink" title="实验： 创建一个nginx角色"></a>实验： 创建一个nginx角色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">建立nginx角色在多台主机上来部署nginx需要安装 创建账号</span><br><span class="line">1&gt; 创建nginx角色目录</span><br><span class="line">     cd &#x2F;app&#x2F;ansible&#x2F;role</span><br><span class="line">     mkdir nginx&#123;tesks,templates,hanslers&#125; -pv</span><br><span class="line"></span><br><span class="line">2&gt; 创建任务目录</span><br><span class="line">     cd tasks&#x2F;</span><br><span class="line">     touch insatll.yml config.yml service.yml file.yml user.yml</span><br><span class="line">   创建main.yml文件定义任务执行顺序</span><br><span class="line">     vim main.yml</span><br><span class="line">     - include: user.yml</span><br><span class="line">     - include: insatll.yml</span><br><span class="line">     - include: config.yml</span><br><span class="line">     - include: file.yml</span><br><span class="line">     - include: service.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">3&gt; 准备配置文件(centos7、8)</span><br><span class="line">   ll &#x2F;app&#x2F;ansible&#x2F;role&#x2F;nginx&#x2F;templates&#x2F;</span><br><span class="line">   nginx7.conf.j2</span><br><span class="line">   nginx8.conf.j2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4&gt; 定义任务</span><br><span class="line">   vim tasks&#x2F;install.yml</span><br><span class="line">   - name: install</span><br><span class="line">     yum: name&#x3D;nginx</span><br><span class="line">     </span><br><span class="line">   vim tasks&#x2F;config.yml</span><br><span class="line">    - name: config file</span><br><span class="line">      template: src&#x3D;nginx7.conf.j2 dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">      when: ansible_distribution_major_version&#x3D;&#x3D;&quot;7&quot;</span><br><span class="line">      notify: restrat</span><br><span class="line">      </span><br><span class="line">    - name: config file</span><br><span class="line">      template: src&#x3D;nginx8.conf.j2 dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">      when: ansible_distribution_major_version&#x3D;&#x3D;&quot;8&quot;</span><br><span class="line">      notify: restrat</span><br><span class="line">      </span><br><span class="line">    vim tasks&#x2F;file.yml   跨角色调用file.yum文件,实现文件复用</span><br><span class="line">    - name: index.html</span><br><span class="line">      copy: src&#x3D;roles&#x2F;httpd&#x2F;files&#x2F;index.html dest&#x3D;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F; </span><br><span class="line">   </span><br><span class="line">    vim tasks&#x2F;service.yml</span><br><span class="line">    - nmae: start service</span><br><span class="line">      service: name&#x3D;nginx state&#x3D;started enabled&#x3D;yes</span><br><span class="line">      </span><br><span class="line">    vim handlers&#x2F;main.yml</span><br><span class="line">    - name: restrat</span><br><span class="line">      service: name&#x3D;nginx state&#x3D;restarted</span><br><span class="line">      </span><br><span class="line">    vim roles&#x2F;role_nginix.yml</span><br><span class="line">    --- </span><br><span class="line">    #test rcle</span><br><span class="line">    - hosts: appsrvs</span><br><span class="line">    </span><br><span class="line">      roles: </span><br><span class="line">        - role: nginx</span><br><span class="line">        </span><br><span class="line">5&gt; 测试安装</span><br><span class="line">   ansible-playbook role_nginx.yml</span><br></pre></td></tr></table></figure>

<h3 id="Roles案例"><a href="#Roles案例" class="headerlink" title="Roles案例"></a>Roles案例</h3><p>Roles目录编排<br><img src="https://note.youdao.com/yws/res/100102/31BB6620C07C4E8DAEC14CB20CF8C573" alt="image"></p>
<p>Playbook中调用<br><img src="https://note.youdao.com/yws/res/100105/B2206BA3F50D46ACBCC941F778A2C845" alt="image"></p>
<h3 id="playbook调用角色"><a href="#playbook调用角色" class="headerlink" title="playbook调用角色"></a>playbook调用角色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调用角色方法1：</span><br><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  roles:</span><br><span class="line">    - mysql</span><br><span class="line">    - memcached</span><br><span class="line">    - nginx</span><br><span class="line">sts:</span><br><span class="line">  remote_user:</span><br><span class="line">  roles:</span><br><span class="line">    - mysql</span><br><span class="line">    - &#123; role: nginx, username: nginx &#125;   #不同的角色调用不同的变量  </span><br><span class="line">    键role用于指定角色名称</span><br><span class="line">    后续的k&#x2F;v用于传递变量给角色</span><br><span class="line"></span><br><span class="line">调用角色方法3：还可基于条件测试实现角色调用</span><br><span class="line">roles:</span><br><span class="line">  - &#123; role: nginx, username: nginx, when: ansible_distribution_major_version &#x3D;&#x3D; &#39;7&#39; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过roles传递变量"><a href="#通过roles传递变量" class="headerlink" title="通过roles传递变量"></a>通过roles传递变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过roles传递变量</span><br><span class="line">当给一个主机应用角色的时候可以传递变量，然后在角色内使用这些变量</span><br><span class="line">示例：</span><br><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">    - common</span><br><span class="line">    - &#123; role: foo_app_instance, dir: &#39;&#x2F;web&#x2F;htdocs&#x2F;a.com&#39;, port: 8080 &#125;</span><br></pre></td></tr></table></figure>

<h3 id="向roles传递参数"><a href="#向roles传递参数" class="headerlink" title="向roles传递参数"></a>向roles传递参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">而在playbook中，可以这样使用roles：</span><br><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">    - common</span><br><span class="line">    - webservers</span><br><span class="line"></span><br><span class="line">也可以向roles传递参数</span><br><span class="line">示例：</span><br><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">    - common</span><br><span class="line">    - &#123; role: foo_app_instance, dir: &#39;&#x2F;opt&#x2F;a&#39;, port: 5000 &#125;</span><br><span class="line">    - &#123; role: foo_app_instance, dir: &#39;&#x2F;opt&#x2F;b&#39;, port: 5001 &#125;</span><br></pre></td></tr></table></figure>

<h3 id="条件式地使用roles"><a href="#条件式地使用roles" class="headerlink" title="条件式地使用roles"></a>条件式地使用roles</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">甚至也可以条件式地使用roles</span><br><span class="line">示例：</span><br><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">    - &#123; role: some_role, when: &quot;ansible_os_family &#x3D;&#x3D; &#39;RedHat&#39;&quot; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Roles条件及变量等案例"><a href="#Roles条件及变量等案例" class="headerlink" title="Roles条件及变量等案例"></a>Roles条件及变量等案例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">When条件</span><br><span class="line">    roles:</span><br><span class="line">      - &#123;role: nginx, when: &quot;ansible_distribution_major_version &#x3D;&#x3D; &#39;7&#39; &quot; ,username: nginx &#125;</span><br><span class="line">变量调用</span><br><span class="line">- hosts: zabbix-proxy</span><br><span class="line">  sudo: yes</span><br><span class="line">  roles:</span><br><span class="line">    - &#123; role: geerlingguy.php-mysql &#125;</span><br><span class="line">    - &#123; role: dj-wasabi.zabbix-proxy, zabbix_server_host: 192.168.37.167 &#125;</span><br></pre></td></tr></table></figure>

<h3 id="完整的roles架构"><a href="#完整的roles架构" class="headerlink" title="完整的roles架构"></a>完整的roles架构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nginx-role.yml 顶层任务调用yml文件</span><br><span class="line">---</span><br><span class="line">- hosts: testweb</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">    - role: nginx</span><br><span class="line">    - role: httpd 可执行多个role</span><br><span class="line"></span><br><span class="line">cat roles&#x2F;nginx&#x2F;tasks&#x2F;main.yml</span><br><span class="line">---</span><br><span class="line">- include: groupadd.yml</span><br><span class="line">- include: useradd.yml</span><br><span class="line">- include: install.yml</span><br><span class="line">- include: restart.yml</span><br><span class="line">- include: filecp.yml</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; roles&#x2F;nginx&#x2F;tasks&#x2F;groupadd.yml</span><br><span class="line">---</span><br><span class="line">- name: add group nginx</span><br><span class="line">  user: name&#x3D;nginx state&#x3D;present</span><br><span class="line"></span><br><span class="line">cat roles&#x2F;nginx&#x2F;tasks&#x2F;filecp.yml</span><br><span class="line">---</span><br><span class="line">- name: file copy</span><br><span class="line">  copy: src&#x3D;tom.conf dest&#x3D;&#x2F;tmp&#x2F;tom.conf</span><br><span class="line"></span><br><span class="line">以下文件格式类似：</span><br><span class="line">useradd.yml,install.yml,restart.yml</span><br><span class="line"></span><br><span class="line">ls roles&#x2F;nginx&#x2F;files&#x2F;</span><br><span class="line">tom.conf</span><br></pre></td></tr></table></figure>

<h3 id="roles-playbook-tags使用"><a href="#roles-playbook-tags使用" class="headerlink" title="roles playbook tags使用"></a>roles playbook tags使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roles playbook tags使用</span><br><span class="line">    ansible-playbook --tags&#x3D;&quot;nginx,httpd,mysql&quot; nginx-role.yml  对标签进行挑选执行</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; nginx-role.yml</span><br><span class="line">---</span><br><span class="line">- hosts: testweb</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">    - &#123; role: nginx ,tags: [ &#39;nginx&#39;, &#39;web&#39; ] ,when: ansible_distribution_major_version &#x3D;&#x3D; &quot;6“ &#125;</span><br><span class="line">    - &#123; role: httpd ,tags: [ &#39;httpd&#39;, &#39;web&#39; ] &#125;</span><br><span class="line">    - &#123; role: mysql ,tags: [ &#39;mysql&#39;, &#39;db&#39; ] &#125;</span><br><span class="line">    - &#123; role: marridb ,tags: [ &#39;mysql&#39;, &#39;db&#39; ] &#125;</span><br><span class="line">    - &#123; role: php &#125;</span><br></pre></td></tr></table></figure>

<h3 id="实验-创建角色memcached"><a href="#实验-创建角色memcached" class="headerlink" title="实验: 创建角色memcached"></a>实验: 创建角色memcached</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">memcacched 当做缓存用,会在内存中开启一块空间充当缓存</span><br><span class="line">cat &#x2F;etc&#x2F;sysconfig&#x2F;memcached </span><br><span class="line">    PORT&#x3D;&quot;11211&quot;</span><br><span class="line">    USER&#x3D;&quot;memcached&quot;</span><br><span class="line">    MAXCONN&#x3D;&quot;1024&quot;</span><br><span class="line">    CACHESIZE&#x3D;&quot;64&quot;    # 缓存空间默认64M </span><br><span class="line">    OPTIONS&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1&gt; 创建对用目录</span><br><span class="line">   cd &#x2F;app&#x2F;ansible</span><br><span class="line">   mkdir roles&#x2F;memcached&#x2F;&#123;tasks,templates&#125; -pv</span><br><span class="line">   </span><br><span class="line">2&gt; 拷贝memcached配置文件模板</span><br><span class="line">   cp &#x2F;etc&#x2F;sysconfig&#x2F;memcached  templates&#x2F;memcached.j2</span><br><span class="line">   vim templates&#x2F;memcached.j2</span><br><span class="line">   CACHESIZE&#x3D;&quot;&#123;&#123;ansible_memtotal_mb&#x2F;&#x2F;4&#125;&#125;&quot;   #物理内存的1&#x2F;4用做缓存</span><br><span class="line">   </span><br><span class="line">3&gt; 创建对应yml文件,并做相应配置</span><br><span class="line">   cd tasks&#x2F;</span><br><span class="line">   touch install.yml config.yml service.yml</span><br><span class="line">   创建main.yml文件定义任务执行顺序</span><br><span class="line">   vim main.yml</span><br><span class="line">   - include: install.yml</span><br><span class="line">   - include: config.yml</span><br><span class="line">   - include: service.yml  </span><br><span class="line">   </span><br><span class="line">   vim install.yml</span><br><span class="line">   - name: install </span><br><span class="line">     yum: name&#x3D;memcached</span><br><span class="line">     </span><br><span class="line">   vim config.yml</span><br><span class="line">   - name: config file</span><br><span class="line">     template: src&#x3D;memcached.j2 dets&#x3D;&#x2F;etc&#x2F;sysconfig&#x2F;memcached</span><br><span class="line"></span><br><span class="line">   vim service.yml</span><br><span class="line">   - name: service</span><br><span class="line">     service: name&#x3D;memcached state&#x3D;started enabled&#x3D;yes</span><br><span class="line"></span><br><span class="line">4&gt; 创建调用角色文件</span><br><span class="line">   cd &#x2F;app&#x2F;ansible&#x2F;roles&#x2F;</span><br><span class="line">   vim role_memcached.yml</span><br><span class="line">    ---</span><br><span class="line">    - hosts: appsrvs</span><br><span class="line">    </span><br><span class="line">      roles: </span><br><span class="line">        - role: memcached</span><br><span class="line"></span><br><span class="line">5&gt; 安装</span><br><span class="line">   ansible-playbook  role_memcached.yml </span><br><span class="line">   memcached端口号11211</span><br></pre></td></tr></table></figure>

<h3 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">委任（指定某一台机器做某一个task）</span><br><span class="line">    delegate_to</span><br><span class="line">    local_action (专指针对ansible命令执行的机器做的变更操作)</span><br><span class="line">交互提示</span><br><span class="line">    prompt</span><br><span class="line">*暂停（java）</span><br><span class="line">    wait_for</span><br><span class="line">Debug</span><br><span class="line">    debug: msg&#x3D;&quot;This always executes.&quot;</span><br><span class="line">Include</span><br><span class="line">Template 多值合并</span><br><span class="line">Template 动态变量配置</span><br></pre></td></tr></table></figure>

<h3 id="Ansible-Roles"><a href="#Ansible-Roles" class="headerlink" title="Ansible Roles"></a>Ansible Roles</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">委任</span><br><span class="line">    delegate_to</span><br><span class="line">交互提示</span><br><span class="line">    prompt</span><br><span class="line">暂停</span><br><span class="line">    wait_for</span><br><span class="line">Debug</span><br><span class="line">    debug: msg&#x3D;&quot;This always executes.&quot;</span><br><span class="line">Include</span><br><span class="line">Template 多值合并</span><br><span class="line">Template 动态变量配置</span><br></pre></td></tr></table></figure>

<h3 id="推荐资料"><a href="#推荐资料" class="headerlink" title="推荐资料"></a>推荐资料</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;galaxy.ansible.com</span><br><span class="line">https:&#x2F;&#x2F;galaxy.ansible.com&#x2F;explore#&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;github.com&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;ansible.com.cn&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;ansible&#x2F;ansible</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;ansible&#x2F;ansible-examples</span><br></pre></td></tr></table></figure>

<h3 id="实验-实现二进制安装mysql的卸载"><a href="#实验-实现二进制安装mysql的卸载" class="headerlink" title="实验: 实现二进制安装mysql的卸载"></a>实验: 实现二进制安装mysql的卸载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat remove_mysql.yml </span><br><span class="line">---</span><br><span class="line"># install mariadb server </span><br><span class="line">- hosts: appsrvs:!192.168.38.108</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: stop service </span><br><span class="line">      shell: &#x2F;etc&#x2F;init.d&#x2F;mysqld stop</span><br><span class="line">    - name: delete user </span><br><span class="line">      user: name&#x3D;mysql state&#x3D;absent remove&#x3D;yes</span><br><span class="line">    - name: delete</span><br><span class="line">      file: path&#x3D;&#123;&#123;item&#125;&#125; state&#x3D;absent</span><br><span class="line">      with_items: </span><br><span class="line">        - &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">        - &#x2F;usr&#x2F;local&#x2F;mariadb-10.2.27-linux-x86_64</span><br><span class="line">        - &#x2F;etc&#x2F;init.d&#x2F;mysqld</span><br><span class="line">        - &#x2F;etc&#x2F;profile.d&#x2F;mysql.sh</span><br><span class="line">        - &#x2F;etc&#x2F;my.cnf</span><br><span class="line">        - &#x2F;data&#x2F;mysql</span><br><span class="line"></span><br><span class="line">ansible-playbook  remove_mysql.yml</span><br></pre></td></tr></table></figure>





















]]></content>
      <categories>
        <category>ansible</category>
      </categories>
  </entry>
  <entry>
    <title>搭建pxe网络批量安装系统环境</title>
    <url>/2021/07/21/%E6%90%AD%E5%BB%BApxe%E7%BD%91%E7%BB%9C%E6%89%B9%E9%87%8F%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="dnsmasq-ipxe无人值守批量安装系统"><a href="#dnsmasq-ipxe无人值守批量安装系统" class="headerlink" title="dnsmasq+ipxe无人值守批量安装系统"></a>dnsmasq+ipxe无人值守批量安装系统</h2><a id="more"></a>

<h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><p>源码在文章底部</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o ipxe.sh http://103.224.249.63/ipxe.sh &amp;&amp; bash ipxe.sh</span><br></pre></td></tr></table></figure>
<p>简介<br>PXE (preboot execute environment，预启动执行环境) 是由 Intel 公司设计的协议，它可以使计算机通过网络启动。当计算机引导时，BIOS 把 PXE client 调入内存执行，并显示出命令菜单，经用户选择后，PXE client将放置在远端的操作系统通过网络下载到本地运行。除了可以通过网络直接运行操作系统外，也可以用于通过网络来将系统安装到本地。在运维中工作中，通过 PXE 来为机房服务器批量部署系统是非常方便的。<br>环境<br>PXE 对运行环境没有什么需求，只需能提供 tftp, dhcp, http 等服务的系统即可。这里使用 Linux 环境来搭建PXE服务。使用 dnsmasq 这个小巧玲珑的软件提供 tftp 和 dhcp 服务，使用 Nginx 来提供 http 服务。<br>步骤<br>PXE 的启动原理是 PXE client 在网卡的 ROM 中，可以在计算机开机的时候选择通过硬盘引导还是 PXE 等引导方式，比如 DELL 的服务器在出现开机 LOGO 画面后通过键入 F12 来进入 PXE 引导，Vmware 新创建的虚拟机在第一次启动的时候如果没有装载光驱或者ISO镜像，则会尝试通过网络引导。如果是笔记本或者台式机可以在开机的时候进入引导菜单，然后选择通过网卡设备启动。<br>当进入 PXE 引导界面后，PXE client 会向网络中的 dhcp 服务器请求IP地址，dhcp 服务器发现是个 PXE client 的请求会将分配好的IP和引导程序的访问地址返回给 PXE client。这个引导程序一般是名为 pxelinux.0 的文件，这个文件是通过 tftp 协议发送给 PXE client 的。当客户端成功获取到引导文件和引导文件的相关配置文件后就成功加载出引导菜单。这个菜单则是我们通过更改 pxelinux.0 的配置文件来的。下面是通过Vmware引导的效果：</p>
<p>如果在30秒内没做任何选择则默认从本地磁盘启动，这样就避免了某些将PXE启动作为第一启动项的服务器重启后误重装系统。当选择了某个项目的时候，比如 Install CentOS6.8 for vmware 则向服务器获取根据配置文件中指定的 CentOS 内核文件和启动参数。当需要的数据都准备好后，系统则开始启动 Linux 内核，接下来的操作就跟普通的安装系统没两样了，只不过需要的数据都是通过网络获取的。比如安装 CentOS 过程中需要的所有 rpm 包都是通过 http 服务提供的 CentOS 镜像站提供的了。<br>但是如何通过 PXE 来同时安装成百上千台服务器呢？在安装系统的过程中，总会遇到各种需要交互的地方，比如给硬盘分区，选择语言，创建用户等地方，幸好大部分的系统安装镜像都支持通过 Kickstart 自动应答在安装过程中免人工干预的进行系统安装。就像是你的所有问题的回答我先写成一个文件，然后你需要问的时候先从文件中找答案一样。自动应答文件通常是 ks.cfg 文件，此文件的位置大多通过在启动 Linux 内核的时候通过启动参数的方式告诉内核。<br>接下来就看看 PXE 启动该如何配置。<br>服务配置</p>
<h2 id="安装-dnsmasq"><a href="#安装-dnsmasq" class="headerlink" title="安装 dnsmasq"></a>安装 dnsmasq</h2><p>可以首先从Linux发行版的官方仓库中找找有没有 dnsmasq 的软件包，如果没有可以下载编译。<br>编译方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</span><br><span class="line">wget http://www.thekelleys.org.uk/dnsmasq/dnsmasq-2.79.tar.xz</span><br><span class="line">tar xvf dnsmasq-2.79.tar.xz</span><br><span class="line"><span class="built_in">cd</span> dnsmasq-2.79 &amp;&amp; make</span><br><span class="line">cp src/dnsmasq /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure>
<p>只需要将 dnsmasq 的二进制文件放到系统环境变量就可以了，接下来给它提供一个配置文件来告诉它要启动哪些服务。源码目录下有一个官方提供的配置文件模板，不过我们并不需要这么多的配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/pxeboot          <span class="comment"># PXE启动所需要的文件就都放到这里了</span></span><br><span class="line"><span class="built_in">cd</span> /data/pxeboot</span><br><span class="line">vim dnsmasq.conf</span><br><span class="line">然后写入以下内容：</span><br><span class="line"><span class="comment"># enable dhcp</span></span><br><span class="line">dhcp-range=192.168.4.10,192.168.4.200,12h</span><br><span class="line">dhcp-option=3,192.168.4.254</span><br><span class="line">dhcp-option=option:dns-server,114.114.114.114,119.29.29.29</span><br><span class="line"><span class="comment">#dhcp-boot=pxelinux.0</span></span><br><span class="line">dhcp-boot=undionly.kpxe</span><br><span class="line"></span><br><span class="line"><span class="comment"># disable dns</span></span><br><span class="line">port=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable tftp</span></span><br><span class="line"><span class="built_in">enable</span>-tftp</span><br><span class="line">tftp-root=/data/pxeboot</span><br></pre></td></tr></table></figure>
<p>一定要注意，dhcp-range 给客户端分配的IP地址池一定要是自己网段的。根据前面讲解的 PXE 启动的原理，可能大家会比较好奇，为什么这里 dhcp 推送的是 undionly.kpxe 这个文件呢？这个会在下面讲到，接下来就可以先启动 dnsmasq 了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnsmasq -C dnsmasq.conf -d      <span class="comment"># 如果不加 -d 参数，dnsmasq 则进入后台运行</span></span><br><span class="line">[root@localhost pxeboot]<span class="comment"># dnsmasq -C dnsmasq.conf -d</span></span><br><span class="line">dnsmasq: started, version 2.79 DNS disabled</span><br><span class="line">dnsmasq: compile time options: IPv6 GNU-getopt no-DBus no-i18n no-IDN ......</span><br><span class="line">dnsmasq-dhcp: DHCP, IP range 192.168.4.10 -- 192.168.4.200, lease time 12h</span><br><span class="line">dnsmasq-tftp: TFTP root is /data/pxeboot</span><br></pre></td></tr></table></figure>
<p>现在基础的 dhcp 和 tftp 服务已经搭建完成了，dhcp 监听在 udp 67 端口，tftp 监听在 udp 69，使用前最好关闭服务器的 selinux 和 iptables。<br>安装 Nginx<br>也不一定非要使用 Nginx，只要是能提供通过 HTTP 协议对文件进行访问服务的程序都可以，只不过感觉 Nginx 用起来更得心应手一些。同样，如果可以从发行版的官方仓库安装就非常省事了，或者手动编译也可以。<br>编译方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</span><br><span class="line">wget http://nginx.org/download/nginx-1.14.0.tar.gz</span><br><span class="line">tar xf nginx-1.14.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.0</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --without-http_rewrite_module</span><br><span class="line">make -j4 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>因为用不到 Nginx 的 rewrite 规则，而且这个模块依赖 pcre 库，所以就去掉了，接下来简单的配置下 Nginx。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/wwwroot/pxefiles         <span class="comment"># /data/wwwroot 作为HTTP根目录</span></span><br><span class="line">vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">然后写入以下内容：</span><br><span class="line">worker_processes  4;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    autoindex       on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /data/wwwroot;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx     <span class="comment"># 启动Nginx服务</span></span><br></pre></td></tr></table></figure>
<h2 id="安装-ipxe-引导文件"><a href="#安装-ipxe-引导文件" class="headerlink" title="安装 ipxe 引导文件"></a>安装 ipxe 引导文件</h2><p>为什么这里又出现了 ipxe 引导文件呢？理论上来说，只是用 pxelinux.0 确实也可以引导各种系统，但是 pxelinux.0 只支持使用 tftp 协议来加载需要的文件。 tftp 在使用 UDP 传输数据，为了保证文件的完整性，tftp 自己实现了一套数据校验机制，但是却大大降低了文件传输效率。而且某些未知情况下 tftp 在局域网内居然只有 KB 级别的传输速率。于是，一些支持 http 、ftp、nfs 等文件传输协议的引导程序诞生了，ipxe 就是其中一种。<br>ipxe 提供的引导文件针对不同使用场合又分好几种，比如 .pxe，.kpxe，.kkpxe 格式的引导文件。比较常见的是 .pxe，.kpxe，其中的区别可以看这里：点此打开，这里使用 undionly.kpxe 引导文件，采用链式加载的方法加载 pxelinux.0。这样就可以实现既使用 ipxe 提供的网络协议支持，还可以使用 pxelinux.0 提供的引导界面了。<br>编译 undionly.kpxe：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</span><br><span class="line">git <span class="built_in">clone</span> git://git.ipxe.org/ipxe.git</span><br><span class="line"><span class="built_in">cd</span> ipxe/src</span><br><span class="line">vim embed.ipxe</span><br><span class="line">写入如下内容：</span><br><span class="line"><span class="comment">#!ipxe</span></span><br><span class="line">dhcp</span><br><span class="line">chain tftp://<span class="variable">$&#123;next-server&#125;</span>/menu.ipxe</span><br><span class="line">其中 <span class="variable">$&#123;next-server&#125;</span> 会自动解析为 dhcp 服务器的地址，tftp 也搭建在这个地址上。当通过 dhcp 获取到IP地址后，通过 tftp 协议请求 menu.ipxe 文件，然后 ipxe 会解析和执行文件里的内容，这个文件可以说就是 ipxe 的配置文件了。接着编译出 undionly.kpxe，这样 undionly.kpxe 才会默认就加载同目录下的 menu.ipxe 文件了。</span><br><span class="line">make bin/undionly.kpxe EMBED=embed.ipxe</span><br><span class="line">cp bin/undionly.kpxe /data/pxeboot/</span><br></pre></td></tr></table></figure>
<p>其中编译步骤需要 lzma.h 这个头文件，需要安装你的发行版上提供这个头文件的软件包。编译好的 undionly.kpxe 可以保存下来下次搭建环境的时候直接用，如果服务是搭建在 Windows 系统上也可以使用这个编译好的文件。<br>然后编辑 menu.ipxe 文件，配置接下来的文件都通过 http 协议来访问，并且链接到 pxelinux.0。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /data/pxeboot/menu.ipxe</span><br><span class="line">写入如下内容：</span><br><span class="line"><span class="comment">#!ipxe</span></span><br><span class="line"><span class="built_in">set</span> 210:string http://192.168.4.6/pxefiles/</span><br><span class="line"><span class="built_in">set</span> 209:string pxelinux.cfg/default</span><br><span class="line">chain <span class="variable">$&#123;210:string&#125;</span>pxelinux.0</span><br></pre></td></tr></table></figure>
<p>其中 set 210:string 定义了请求的文件的主目录，因为之前创建的 /data/wwwroot/ 为 http 的根目录，/data/wwwroot/pxefiles/ 目录中存放 pxelinux.0 相关的数据文件。其中的服务器IP地址需要替换为你实际的服务器IP。<br>set 209:string 则定义了 pxelinux.0 直接加载 pxelinux.cfg/default 这个配置文件，否则 pxelinux.0 会阶梯性的查找配置文件，如果都没找到最后默认才加载 pxelinux.cfg/default。<br>安装 pxelinux.0 引导文件<br>接下来的操作就是在 /data/wwwroot/pxefiles/ 目录下进行了，因为 ipxe 启动后剩下的文件都是通过 http 协议访问的。<br>pxelinux.0 可以通过发行版的 syslinux 包来获取，或者自己从官方下载也可，这里采用从官方下载的方式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/linux/utils/boot/syslinux/Testing/3.86/syslinux-3.86-pre4.tar.xz</span><br><span class="line">tar xvf syslinux-3.86-pre4.tar.xz</span><br><span class="line"><span class="built_in">cd</span> syslinux-3.86-pre4</span><br><span class="line">cp com32/menu/vesamenu.c32 /data/wwwroot/pxefiles/</span><br><span class="line">cp core/pxelinux.0 /data/wwwroot/pxefiles/</span><br><span class="line">cp memdisk/memdisk /data/wwwroot/pxefiles/</span><br><span class="line">syslinux 最新版是16年发布的 6.04，但是使用中发现无法引导 ESXI，而且 pxelinux.0 引导后还要加载好几个 .c32 文件，所以采用老一点的 3.86 版本。 接着给 pxelinux.0 提供配置文件</span><br><span class="line"><span class="built_in">cd</span> /data/wwwroot/pxefiles/</span><br><span class="line">mkdir pxelinux.cfg</span><br></pre></td></tr></table></figure>
<p>vim pxelinux.cfg/default<br>写入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default vesamenu.c32</span><br><span class="line">timeout 300</span><br><span class="line"></span><br><span class="line">menu title Welcome to PXE server!</span><br><span class="line">menu background splash.jpg</span><br><span class="line">menu color border 0 <span class="comment">#ffffffff #00000000</span></span><br><span class="line">menu color sel 7 <span class="comment">#ffffffff #ff000000</span></span><br><span class="line">menu color title 0 <span class="comment">#ffffffff #00000000</span></span><br><span class="line">menu color tabmsg 0 <span class="comment">#ffffffff #00000000</span></span><br><span class="line">menu color unsel 0 <span class="comment">#ffffffff #00000000</span></span><br><span class="line">menu color hotsel 0 <span class="comment">#ff000000 #ffffffff</span></span><br><span class="line">menu color hotkey 7 <span class="comment">#ffffffff #ff000000</span></span><br><span class="line">menu color scrollbar 0 <span class="comment">#ffffffff #00000000</span></span><br><span class="line"></span><br><span class="line">label <span class="built_in">local</span></span><br><span class="line">    menu label Boot from <span class="built_in">local</span> drive</span><br><span class="line">    menu default</span><br><span class="line">    localboot 0xffff</span><br></pre></td></tr></table></figure>
<p>这里为了界面美观使用了一张背景图片: splash.jpg，图片需要是一张 640*480 像素的 jpg 图片，并根据图片的主题颜色调整下页面边框、文字等颜色，如果不需要使用背景图片的话可以将 menu background 和 menu color 的配置项都删掉或者注释掉。<br>其中 timeout 300 会在引导界面30秒无操作就就启动下面 label 中定义为 menu default 的条目。到这一步已经可以尝试将虚拟机或者主机通过 PXE 启动，看看是否可以加载出引导界面了。</p>
<p>接下来，试试通过 PXE 实际启动或安装一些系统吧！<br>网络启动<br>即使是通过网络安装，也是需要系统的镜像包的。最好先将需要安装的系统的镜像下载到本地，当然如果对自己网速很自信的话是可以直接通过公网来安装系统的（方法见附录）。</p>
<h2 id="安装-CentOS"><a href="#安装-CentOS" class="headerlink" title="安装 CentOS"></a>安装 CentOS</h2><p>下载系统镜像<br>下载最新的CentOS镜像可以去官网或者国内的镜像站找，旧版本的可以在官网里找到。或者一个简单的方法，<a href="http://mirror.nsc.liu.se/centos-store/6.8/isos/x86_64/" target="_blank" rel="noopener">http://mirror.nsc.liu.se/centos-store/6.8/isos/x86_64/</a> 把其中的6.8改为相应的版本号就可以了。<br>这里使用和机房服务器系统版本一致的 CentOS 6.8 镜像，如果只是想安装一个最小化的 CentOS 系统的话，选择 minimal.iso，而如果想安装带桌面的甚至想搭建一个本地的yum源，就使用 bin-DVD1.iso 和 bin-DVD2.iso 这两个镜像。其中 bin-DVD2.iso 不可用于系统安装，因为里面只是额外的RPM包，搭建 yum源的话可以将两个镜像的内容合并到一个目录中。还有个是 LiveCD.iso 或者 LiveDVD.iso 的镜像，这种镜像可以直接刻录到光盘并从光盘启动系统。<br>这里直接使用 bin-DVD 的镜像。<br>配置安装源<br>首先将 bin-DVD1.iso 和 bin-DVD2.iso 的内容合并到一个目录中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/wwwroot/yum/CentOS6.8/ </span><br><span class="line">mount -o loop CentOS-6.8-x86_64-bin-DVD1.iso /mnt/</span><br><span class="line">cp -rf /mnt/* /data/wwwroot/yum/CentOS6.8/</span><br><span class="line">umount /mnt/</span><br><span class="line">mount -o loop CentOS-6.8-x86_64-bin-DVD2.iso /mnt/</span><br><span class="line">cp -rf /mnt/* /data/wwwroot/yum/CentOS6.8/      <span class="comment"># 所有同名文件都覆盖掉</span></span><br><span class="line">umount /mnt/</span><br><span class="line">ln -s /data/wwwroot/yum/ /data/wwwroot/pxefiles/yum</span><br></pre></td></tr></table></figure>
<p>这里创建了一个软链接的原因是 menu.ipxe 中定义为pxe主目录在 /data/wwwroot/pxefiles/ 中。<br>准备自动应答文件<br>每次安装完 CentOS 的系统后不知道大家是否有留意root用户家目录下的三个文本文件 anaconda-ks.cfg，install.log，install.log.syslog。其中 anaconda-ks.cfg 就是系统安装过程中的所有问答产生的 ks.cfg 自动应答文件，这个是可以直接拿来用的。<br>如果这个文件被删除了，那么也可以通过软件包 system-config-kickstart 来定制，此工具需要在图形化界面下或者配置好了X11转移的环境中使用。使用 yum -y install system-config-kickstart 安装后使用 system-config-kickstart 运行程序。</p>
<p>配置好后使用 Ctrl+S 保存并退出，将制作好的 ks.cfg 文件或者 anaconda-ks.cfg 复制到刚才创建的yum源中。因为不同的主机类型可能对应着不同的自动应答文件，所以可以保存为针对不同安装类型或平台的自动应答文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /root/anaconda-ks.cfg /data/wwwroot/yum/CentOS6.8/ks-minimal-vmware.cfg</span><br><span class="line">ks-minimal-vmware.cfg 文件内容为：</span><br><span class="line">install</span><br><span class="line">reboot</span><br><span class="line">text</span><br><span class="line">url --url=http://192.168.4.6/yum/CentOS6.8</span><br><span class="line">lang zh_CN.UTF-8</span><br><span class="line">keyboard us</span><br><span class="line">network --onboot yes --device eth0 --mtu=1500 --bootproto dhcp --noipv6</span><br><span class="line"><span class="comment"># root passwd : 123456</span></span><br><span class="line">rootpw  --iscrypted <span class="variable">$6</span><span class="variable">$5dCFp4Me</span><span class="variable">$YkPWb8h0M</span>/wRUPH3puKXcmbhsErJxfFPCXTtIzfglpfHriMBJsRtqjS5Ewh6Vj/h3mnRdXfsAGcadD3TpRAlk1</span><br><span class="line">firewall --service=ssh</span><br><span class="line">authconfig --enableshadow --passalgo=sha512</span><br><span class="line">selinux --disabled</span><br><span class="line">timezone --utc Asia/Shanghai</span><br><span class="line">bootloader --location=mbr --driveorder=sda --append=<span class="string">"crashkernel=auto rhgb rhgb quiet quiet"</span></span><br><span class="line">zerombr</span><br><span class="line">clearpart --all --drives=sda</span><br><span class="line">part /boot --fstype=ext4 --size=500</span><br><span class="line">part swap --size=2048</span><br><span class="line">part / --fstype=ext4 --grow --size=1</span><br><span class="line">repo --name=<span class="string">"CentOS"</span>  --baseurl=http://192.168.4.6/yum/CentOS6.8 --cost=100</span><br><span class="line">%packages</span><br><span class="line">@Base</span><br><span class="line">@Core</span><br><span class="line">%post</span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">mkdir bak</span><br><span class="line">mv * bak</span><br><span class="line">cat &gt;&gt; CentOS-Base.repo &lt;&lt;END</span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> Base</span><br><span class="line">baseurl=http://192.168.4.6/yum/CentOS6.8</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">END</span><br><span class="line">yum update</span><br><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure>
<p>其中配置了 root 密码为 123456，只安装了最基础的软件包。在安装完之后自动配置系统的yum源到本地服务器上，并且安装 lrzsz 工具包。这里密码是通过加密后的，也可以直接使用 rootpw 123456 这种方式。其中 reboot 会在安装完成后自动重启。<br>添加PXE启动项<br>该为 pxelinux.0 添加 CentOS6.8 的启动项了，编辑 pxelinux.cfg/default，在 label local 前添加如下配置块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">label centos6.8</span><br><span class="line">    menu label Install CentOS6.8 <span class="keyword">for</span> vmware (minimal install)</span><br><span class="line">    kernel /yum/CentOS6.8/images/pxeboot/vmlinuz</span><br><span class="line">    append initrd=/yum/CentOS6.8/images/pxeboot/initrd.img ks=http://192.168.4.6/yum/CentOS6.8/ks-minimal-vmware.cfg ksdevice=eth0</span><br></pre></td></tr></table></figure>
<p>kernel 和 initrd 可以使用文件对于URL的相对路径，加载的内核也是 CentOS 镜像中提供的支持PXE启动的内核文件。ks 是传给内核的参数，制定了自动应答文件的位置。内核启动后就不是由PXE控制网卡了，就无法使用相对路径的方式获取文件，所以自动应答文件要使用全路径。ksdevice 在单网卡的情况下可以不指定，如果是多网卡的服务器不指定 ksdevice 的话，安装过程则会停在让你手动选择要使用的网卡界面。<br>开始安装<br>再次进入PXE引导界面，可以看到刚才新加的启动项生效了，接着选择它并回车。</p>
<p>可以看到剩下的过程根本没有人工干预就安装完成了。</p>
<p>安装完成后会自动重启。</p>
<h2 id="安装-Ubuntu"><a href="#安装-Ubuntu" class="headerlink" title="安装 Ubuntu"></a>安装 Ubuntu</h2><p>下载系统镜像<br>镜像可以从Ubuntu官网下载，也可以在中科大或其他的国内开源镜像站中下载。点此打开<br>这里使用 ubuntu-16.04.4-server-amd64.iso 这个镜像，最新的 ubuntu-18.04 并没有经过测试，不知道是否还能用此方法进行安装。<br>配置安装源<br>同理将镜像解压到web目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/wwwroot/apt/ubuntu16.04</span><br><span class="line">mount -o loop ubuntu-16.04.4-server-amd64.iso /mnt/</span><br><span class="line">cp -rf /mnt/* /data/wwwroot/apt/ubuntu16.04</span><br><span class="line">umount /mnt/</span><br><span class="line">ln -s /data/wwwroot/apt/ /data/wwwroot/pxefiles/apt</span><br></pre></td></tr></table></figure>
<p>准备自动应答文件<br>也可以在 ubuntu 上使用 system-config-kickstart 工具来制作自动应答文件，使用前先安装：apt install system-config-kickstart。ubuntu 的自动应答文件不可以和 CentOS 的通用。<br>vim /data/wwwroot/apt/ubuntu16.04/ks-server-vmware.cfg<br>文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lang en_US</span><br><span class="line">langsupport en_US</span><br><span class="line">keyboard us</span><br><span class="line">mouse</span><br><span class="line">timezone Asia/Shanghai</span><br><span class="line">rootpw --disabled</span><br><span class="line"><span class="comment"># ubuntu password: 123456</span></span><br><span class="line">user ubuntu --fullname <span class="string">"ubuntu"</span> --iscrypted --password <span class="variable">$1</span><span class="variable">$4C9x9TxO</span><span class="variable">$PfPaSIUWQwN80J0MtEyQ3</span>.</span><br><span class="line">reboot</span><br><span class="line">text</span><br><span class="line">install</span><br><span class="line">url --url http://192.168.4.6/apt/ubuntu16.04/</span><br><span class="line">bootloader --location=mbr </span><br><span class="line">zerombr yes</span><br><span class="line">clearpart --all --initlabel </span><br><span class="line">part / --fstype ext4 --size 1 --grow </span><br><span class="line">part swap --size 2048 </span><br><span class="line">auth  --useshadow  --enablemd5 </span><br><span class="line">network --bootproto=dhcp --device=eth0</span><br><span class="line">firewall --disabled </span><br><span class="line">skipx</span><br><span class="line">%packages</span><br><span class="line">@^minimal</span><br><span class="line">@core</span><br><span class="line">openssh-server</span><br></pre></td></tr></table></figure>
<p>其中新建了一个叫 ubuntu 的用户，用户密码是 123456。默认没有配置root用户的密码，可以使用普通用户登陆后使用 sudo 来切换到 root 用户。ubuntu 默认是不允许 root 用户登陆的，需要修改 /etc/ssh/sshd_config 中的 PermitRootLogin 为 yes。<br>添加PXE启动项<br>编辑 pxelinux.cfg/default 添加如下 label 块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">label ubuntu server 16.04</span><br><span class="line">    menu label Install Ubuntu server 16.04.4 (minimal install)</span><br><span class="line">    kernel /apt/ubuntu16.04/install/netboot/ubuntu-installer/amd64/linux</span><br><span class="line">    append initrd=apt/ubuntu16.04/install/netboot/ubuntu-installer/amd64/initrd.gz ks=http://192.168.4.6/apt/ubuntu16.04/ks-server-vmware.cfg  --- live-installer/net-image=http://192.168.4.6/apt/ubuntu16.04/install/filesystem.squashfs</span><br></pre></td></tr></table></figure>
<p>开始安装<br>安装完成后会自动重启。</p>
<h2 id="安装-ESXI"><a href="#安装-ESXI" class="headerlink" title="安装 ESXI"></a>安装 ESXI</h2><p>下载系统镜像<br>在官网下载需要登陆，官方下载地址。如果是用于服务器安装，那最好找找有没有服务器官方提供的针对服务器硬件的 ESXI 版本，比如戴尔官方提供的定制版 ESXI 戴尔官方下载地址<br>这里使用戴尔官方提供的 VMware ESXi 5.5 Update 3 点此下载<br>配置安装源<br>ESXI 的镜像比较特殊，需要做些调整才可以通过 PXE 安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/wwwroot/esxi/5.5</span><br><span class="line">mount -o loop VMware-VMvisor-Installer-5.5.0.update03-3029944.x86_64-Dell_Customized-A00.iso /mnt</span><br><span class="line">cp -rf /mnt/* /data/wwwroot/esxi/5.5/</span><br><span class="line">umount /mnt</span><br><span class="line">ln -s /data/wwwroot/esxi/ /data/wwwroot/pxefiles/esxi</span><br></pre></td></tr></table></figure>
<p>修改 exsi/5.5 目录中的 boot.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'1a\prefix=/esxi/5.5/'</span> /data/wwwroot/esxi/5.5/boot.cfg</span><br><span class="line">sed -i <span class="string">'6s/\///g'</span> /data/wwwroot/esxi/5.5/boot.cfg</span><br><span class="line">sed -i <span class="string">'s/^kernel=.*$/kernel=tboot.b00/g'</span> /data/wwwroot/esxi/5.5/boot.cfg</span><br></pre></td></tr></table></figure>
<p>准备自动应答文件<br>编辑 /data/wwwroot/esxi/5.5/ks.cfg，写入如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">accepteula</span><br><span class="line">rootpw 12345678</span><br><span class="line">clearpart --firstdisk=<span class="built_in">local</span> --overwritevmfs</span><br><span class="line">install --firstdisk=<span class="built_in">local</span>  --overwritevmfs</span><br><span class="line">network --bootproto=dhcp --device=vmnic0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>root 用户的密码是 12345678<br>添加PXE启动项<br>编辑 pxelinux.cfg/default 添加如下 label 块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">label Install ESXI 5.5 <span class="keyword">for</span> dell</span><br><span class="line">    menu label Install ESXI 5.5 <span class="keyword">for</span> dell</span><br><span class="line">    kernel /esxi/5.5/mboot.c32</span><br><span class="line">    append -c /esxi/5.5/boot.cfg ks=http://192.168.4.6/esxi/5.5/ks.cfg</span><br></pre></td></tr></table></figure>
<p>开始安装<br>虽然下载的是针对服务器的，但是为了方便截图依然使用虚拟机测试。需要注意的是，虚拟机安装 ESXI 需要将操作系统设置为 VMware EXS(X)</p>
<p>然后正常进入PXE引导菜单</p>
<p>安装完成后会自动重启。</p>
<h2 id="安装-Windows"><a href="#安装-Windows" class="headerlink" title="安装 Windows"></a>安装 Windows</h2><p>Windows 系统的安装就比较特殊了，因为不像 Linux 可以通过内核引导启动，虽然也可以实现无人应答安装，但是研究的成本高于工作中的实际成本，所以这里只实现了可以通过网络手动安装 Windows 系统。<br>Windows 系统的安装需要一个 WinPE 的安装环境，先通过网络引导启动 WinPE，然后在 WinPE 环境中安装 Windows 镜像。<br>下载系统镜像<br>除了可以在微软官方下载镜像，也可以在国内好心人制作的 MSDN I Tell You 里下载。<br>这里使用 windows_server_2008_R2_standard_enterprise_and_datacenter_x64_dvd_x15-59777.iso 这个镜像。<br>配置镜像站<br>首先需要一个带网络功能的 WinPE，如果不嫌麻烦的话可以百度如何制作 WinPE 镜像，如果采用第三方提供做好的 WinPE 就需要保证镜像是否是干净安全的，而且还需要集成了网卡驱动，如果是用于服务器安装，可能还需要集成 Raid 卡的驱动。<br>这里使用无垠PE制作的 Win8PE64网络版.iso 点此打开网盘分享 密码：sees。其中有一个 win8pe_x64_raid_network.iso 的镜像据说是集成了 Raid 卡驱动适用于服务器的 WinPE，实际还并未测试过。<br>PXE环境对中文的支持能力几乎没有，所以下载后需要将文件名中的中文去掉，然后放到相应目录。然后将 Windows 系统安装镜像解压。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/wwwroot/windows/windows_server_2008_x64</span><br><span class="line">mv Win8PE64网络版.iso /data/wwwroot/windows/win8pe.iso</span><br><span class="line">ln -s /data/wwwroot/windows/ /data/wwwroot/pxefiles/windows</span><br><span class="line">mount -o loop windows_server_2008_R2_standard_enterprise_and_datacenter_x64_dvd_x15-59777.iso /mnt</span><br><span class="line">cp -rf /mnt/* /data/wwwroot/windows/windows_server_2008_x64/</span><br><span class="line">umount /mnt</span><br></pre></td></tr></table></figure>
<p>接下来就是另一个比较麻烦的地方了，因为在 WinPE 中通过网络安装 Windows 系统最简单方便的方法就是在 Linux 上创建 Samba 共享，然后 WinPE 中挂载使用。Samba 软件也可以从发行版的官方仓库中获得，或者手动编译安装。<br>编译安装 Samba：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.samba.org/pub/samba/stable/samba-4.8.2.tar.gz</span><br><span class="line">tar xf samba-4.8.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> samba-4.8.2</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/samba</span><br><span class="line">make -j4 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>配置过程中如果出现了什么错误，就根据提示自行解决依赖。接着配置 Samba 共享目录并启动服务。<br>vim /usr/local/samba/etc/smb.conf<br>写入如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">workgroup = MYGROUP</span><br><span class="line">server string = Samba Server</span><br><span class="line">server role = standalone server</span><br><span class="line"><span class="built_in">log</span> file = /dev/stdout</span><br><span class="line">max <span class="built_in">log</span> size = 50</span><br><span class="line">dns proxy = no </span><br><span class="line">pam password change = yes</span><br><span class="line">map to guest = bad user</span><br><span class="line">usershare allow guests = yes</span><br><span class="line">create mask = 0664</span><br><span class="line">force create mode = 0664</span><br><span class="line">directory mask = 0775</span><br><span class="line">force directory mode = 0775</span><br><span class="line">force user = root</span><br><span class="line">force group = root</span><br><span class="line">follow symlinks = yes</span><br><span class="line">load printers = no</span><br><span class="line">printing = bsd</span><br><span class="line">printcap name = /dev/null</span><br><span class="line"><span class="built_in">disable</span> spoolss = yes</span><br><span class="line">socket options = TCP_NODELAY</span><br><span class="line">strict locking = no</span><br><span class="line">vfs objects = recycle</span><br><span class="line">recycle:keeptree = yes</span><br><span class="line">recycle:versions = yes</span><br><span class="line">min protocol = SMB2</span><br><span class="line"></span><br><span class="line">[public]</span><br><span class="line">path = /data/wwwroot/windows/</span><br><span class="line">browsable = yes</span><br><span class="line"><span class="built_in">read</span> only = yes</span><br><span class="line">guest ok = yes</span><br><span class="line">veto files = /._*/.apdisk/.AppleDouble/.DS_Store/.TemporaryItems/.Trashes/desktop.ini/ehthumbs.db/Network Trash Folder/Temporary Items/Thumbs.db/</span><br><span class="line">delete veto files = yes</span><br></pre></td></tr></table></figure>
<p>启动 Samba 服务后可以在 Windows 上连接试试<br>/usr/local/samba/sbin/smbd -D<br>在 Windows 资源管理器中输入 \192.168.4.6 就可以打开共享的目录了。</p>
<p>添加PXE启动项<br>还记得之前和 pxelinux.0 同一目录的 memdisk 文件吧，这通过这个文件可以将 iso 镜像加载到内存中启动，就利用这个方式来启动 WinPE 镜像。<br>编辑 pxelinux.cfg/default 添加如下 label 块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">label Install windows <span class="keyword">for</span> vmware (WinPE)</span><br><span class="line">    menu label Install Windows <span class="keyword">for</span> vmware (WinPE)</span><br><span class="line">    kernel memdisk</span><br><span class="line">    append initrd=/windows/win8pe.iso ksdevice=bootif raw iso</span><br></pre></td></tr></table></figure>
<p>开始安装<br>选择启动 WinPE</p>
<p>进入 WinPE 桌面环境后连接到服务端的 Samba 共享目录，然后执行 Windows 系统安装镜像中的 setup.exe</p>
<p>剩下的步骤就是 Windows 系统的普遍安装方式了。</p>
<h2 id="Ubuntu-LiveCD"><a href="#Ubuntu-LiveCD" class="headerlink" title="Ubuntu LiveCD"></a>Ubuntu LiveCD</h2><p>LiveCD 是个比较有意思的模式，用于直接通过光盘或者镜像启动 Linux，相当于直接将光盘作为根文件系统，在不安装到硬盘的情况下就可以体验到当前发行版了。而且稍加修改就可以通过网络来启动，由于不依赖硬盘启动，个人认为还可以将 LiveCD 模式当作救援模式使用，因为 LiveCD 模式下相当于正常启动了 Linux 系统，因此也可以正常使用包管理器来安装软件，以及挂载和卸载硬盘。<br>LiveCD 需要通过 NFS 来加载镜像内容，因此还需要搭建一个 NFS 目录共享。<br>下载系统镜像<br>由于 Ubuntu Server 的镜像不支持 LiveCD 模式，所以这里使用桌面版的 Ubuntu-16.04 镜像。镜像名为：ubuntu-16.04.3-desktop-amd64.iso<br>配置 NFS 共享<br>各发行版的 NFS 使用的软件包名称都不太一样，可以借助搜索引擎获取你所使用的发行版是如何安装 NFS 共享软件包的，这里就使用 CentOS 6.8 的 NFS 共享为例。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /data/wwwroot/apt/ubuntu16.04-desktop/</span><br><span class="line">mount -o loop ubuntu-16.04.3-desktop-amd64.iso /mnt/</span><br><span class="line">cp -rf /mnt/* /data/wwwroot/apt/ubuntu16.04-desktop/</span><br><span class="line">umount /mnt</span><br><span class="line">yum install -y rpcbind nfs-utils</span><br></pre></td></tr></table></figure>
<p>vim /etc/exports<br>写入如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/data/wwwroot/apt/ubuntu16.04-desktop/    *    (ro,sync,no_root_squash)</span><br><span class="line">启动 NFS 服务</span><br><span class="line">1</span><br><span class="line">2	service rpcbind restart</span><br><span class="line">service nfs restart</span><br></pre></td></tr></table></figure>
<p>共享成功后可以在其他主机上看到自己的共享：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># showmount -e 192.168.4.6</span></span><br><span class="line">Export list <span class="keyword">for</span> 192.168.4.6:</span><br><span class="line">/data/wwwroot/apt/ubuntu16.04-desktop *</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br><span class="line">添加PXE启动项</span><br><span class="line">编辑 pxelinux.cfg/default 添加如下 label 块：</span><br><span class="line">label Ubuntu 16.04 amd64</span><br><span class="line">    menu label Ubuntu 16.04 amd64 LiveCD</span><br><span class="line">    kernel /apt/ubuntu16.04-desktop/casper/vmlinuz.efi</span><br><span class="line">    append initrd=/apt/ubuntu16.04-desktop/casper/initrd.lz boot=casper netboot=nfs nfsroot=192.168.4.133:/data/wwwroot/apt/ubuntu16.04-desktop/  splash locale=zh_CN url=http://192.168.4.133/apt/ubuntu16.04-desktop/preseed/ubuntu.seed</span><br></pre></td></tr></table></figure>
<p>进入 LiveCD 模式</p>
<p>加载过程可能会比较慢，但最后还是成功进入了 Ubuntu 桌面。</p>
<h2 id="脚本源码"><a href="#脚本源码" class="headerlink" title="脚本源码"></a>脚本源码</h2><p>该脚本参考此教程编写，适配了centos和Ubuntu系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/env bash</span></span><br><span class="line"><span class="comment">#dnsmasq+pxe无人值守批量安装系统</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">input</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ];<span class="keyword">then</span>  </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Enter not null."</span> </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> == <span class="built_in">exit</span> -o <span class="variable">$1</span> == quit -o <span class="variable">$1</span> == q ];<span class="keyword">then</span>        </span><br><span class="line">	<span class="built_in">exit</span> 1;</span><br><span class="line">	<span class="keyword">elif</span> [[ <span class="variable">$1</span> =~ ^[1-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;$ ]];<span class="keyword">then</span></span><br><span class="line">		a=`<span class="built_in">echo</span> <span class="variable">$ip</span> |cut -d. -f1`</span><br><span class="line">		b=`<span class="built_in">echo</span> <span class="variable">$ip</span> |cut -d. -f2`</span><br><span class="line">		c=`<span class="built_in">echo</span> <span class="variable">$ip</span> |cut -d. -f3`</span><br><span class="line">		d=`<span class="built_in">echo</span> <span class="variable">$ip</span> |cut -d. -f4`</span><br><span class="line">		<span class="keyword">if</span> [ <span class="variable">$a</span> -le 255 -a <span class="variable">$b</span> -le 255 -a <span class="variable">$c</span> -le 255 -a <span class="variable">$d</span> -le 255 ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"继续执行...."</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"IP format error,Please enter the IP again."</span></span><br><span class="line">		<span class="built_in">exit</span> 1;</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"IP format error,Please enter the IP again."</span></span><br><span class="line">	<span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入服务器ip："</span> ip</span><br><span class="line">input <span class="variable">$&#123;ip&#125;</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入DHCP的ip分发的范围(请填写开始网段ip）："</span> dhcp1</span><br><span class="line">input <span class="variable">$&#123;dhcp1&#125;</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入DHCP的ip分发的范围(请填写结束网段ip）："</span> dhcp2</span><br><span class="line">input <span class="variable">$&#123;dhcp2&#125;</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入服务器的网关："</span> mask</span><br><span class="line">input <span class="variable">$&#123;mask&#125;</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入需要安装的系统类型(Centos7.9请输入1，Ubuntu16.10请输入2,两个系统都预装请输入3)："</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$sys</span> ];<span class="keyword">then</span>  </span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"Enter not null."</span> </span><br><span class="line"><span class="keyword">elif</span>  [ <span class="variable">$sys</span> -ne 1 -a <span class="variable">$sys</span> -ne 2 -a <span class="variable">$sys</span> -ne 3 ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"Enter fail!."</span>	</span><br><span class="line"><span class="keyword">fi</span>		</span><br><span class="line"></span><br><span class="line">sed -e <span class="string">'s|^mirrorlist=|#mirrorlist=|g'</span> \</span><br><span class="line">         -e <span class="string">'s|^#baseurl=http://mirror.centos.org|baseurl=https://opentuna.cn|g'</span> \</span><br><span class="line">         -i.bak \</span><br><span class="line">         /etc/yum.repos.d/CentOS-*.repo</span><br><span class="line">		 </span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">yum install gcc gcc-g++ gdb git wget xz-devel net-tools -y</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</span><br><span class="line">`wget http://103.224.249.63/dnsmasq-2.79.tar.xz`</span><br><span class="line">tar xvf dnsmasq-2.79.tar.xz</span><br><span class="line"><span class="built_in">cd</span> dnsmasq-2.79 &amp;&amp; make</span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line">cp src/dnsmasq /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">mkdir -p /data/pxeboot   <span class="comment"># PXE启动所需要的文件存放的目录</span></span><br><span class="line"><span class="built_in">cd</span> /data/pxeboot</span><br><span class="line">cat &lt;&lt;EOF &gt; dnsmasq.conf</span><br><span class="line"><span class="comment"># enable dhcp</span></span><br><span class="line">dhcp-range=<span class="variable">$&#123;dhcp1&#125;</span>,<span class="variable">$&#123;dhcp2&#125;</span>,12h</span><br><span class="line">dhcp-option=3,<span class="variable">$&#123;mask&#125;</span></span><br><span class="line">dhcp-option=option:dns-server,114.114.114.114,8.8.8.8</span><br><span class="line"><span class="comment">#dhcp-boot=pxelinux.0</span></span><br><span class="line">dhcp-boot=undionly.kpxe</span><br><span class="line"></span><br><span class="line"><span class="comment"># disable dns</span></span><br><span class="line">port=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable tftp</span></span><br><span class="line"><span class="built_in">enable</span>-tftp</span><br><span class="line">tftp-root=/data/pxeboot</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">wget -P /etc/yum.repos.d/ http://103.224.249.63/nginx.repo</span><br><span class="line">yum install nginx -y</span><br><span class="line"></span><br><span class="line">mkdir -p /data/wwwroot/pxefiles         <span class="comment"># /data/wwwroot 作为HTTP根目录</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/nginx/nginx.conf </span><br><span class="line">worker_processes  4;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    autoindex       on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /data/wwwroot;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">service nginx restart</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</span><br><span class="line">git <span class="built_in">clone</span> git://git.ipxe.org/ipxe.git</span><br><span class="line"><span class="built_in">cd</span> ipxe/src</span><br><span class="line">cat &lt;&lt;EOF &gt; embed.ipxe</span><br><span class="line"><span class="comment">#!ipxe</span></span><br><span class="line">dhcp</span><br><span class="line">chain tftp://\<span class="variable">$&#123;next-server&#125;</span>/menu.ipxe</span><br><span class="line">EOF</span><br><span class="line">make bin/undionly.kpxe EMBED=embed.ipxe</span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line">cp bin/undionly.kpxe /data/pxeboot/</span><br><span class="line">cat &lt;&lt; EOF &gt; /data/pxeboot/menu.ipxe</span><br><span class="line"><span class="comment">#!ipxe</span></span><br><span class="line"><span class="built_in">set</span> 210:string http://<span class="variable">$&#123;ip&#125;</span>/pxefiles/</span><br><span class="line"><span class="built_in">set</span> 209:string pxelinux.cfg/default</span><br><span class="line">chain \<span class="variable">$&#123;210:string&#125;</span>pxelinux.0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</span><br><span class="line">`wget http://103.224.249.63/syslinux-3.86-pre1.tar.xz`</span><br><span class="line">tar xvf syslinux-3.86-pre1.tar.xz</span><br><span class="line"><span class="built_in">cd</span> syslinux-3.86-pre1</span><br><span class="line">cp com32/menu/vesamenu.c32 /data/wwwroot/pxefiles/</span><br><span class="line">cp core/pxelinux.0 /data/wwwroot/pxefiles/</span><br><span class="line">cp memdisk/memdisk /data/wwwroot/pxefiles/</span><br><span class="line"><span class="built_in">cd</span> /data/wwwroot/pxefiles/</span><br><span class="line">mkdir pxelinux.cfg</span><br><span class="line">touch pxelinux.cfg/default</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">centos</span></span>()&#123;</span><br><span class="line">mkdir -p /data/wwwroot/yum/CentOS7.9/</span><br><span class="line">`wget -P /data/wwwroot/yum/CentOS7.9/ https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso`</span><br><span class="line">mount -o loop /data/wwwroot/yum/CentOS7.9/CentOS-7-x86_64-Minimal-2009.iso /mnt/</span><br><span class="line">cp -rf /mnt/* /data/wwwroot/yum/CentOS7.9/</span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line">umount /mnt/</span><br><span class="line">ln -s /data/wwwroot/yum/ /data/wwwroot/pxefiles/yum</span><br><span class="line">cat &lt;&lt; EOF &gt;/data/wwwroot/yum/CentOS7.9/ks-minimal-vmware.cfg</span><br><span class="line"><span class="comment">#version=DEVEL</span></span><br><span class="line"><span class="comment"># System authorization information</span></span><br><span class="line">auth --enableshadow --passalgo=sha512</span><br><span class="line"><span class="comment"># Install OS instead of upgrade</span></span><br><span class="line">install</span><br><span class="line"><span class="comment"># Use text mode install</span></span><br><span class="line">text</span><br><span class="line"><span class="comment"># Firewall configuration</span></span><br><span class="line">firewall --enabled --service=ssh</span><br><span class="line">firstboot --<span class="built_in">disable</span></span><br><span class="line">ignoredisk --only-use=sda</span><br><span class="line"><span class="comment"># Keyboard layouts</span></span><br><span class="line">keyboard --vckeymap=us --xlayouts=<span class="string">''</span></span><br><span class="line"><span class="comment"># System language</span></span><br><span class="line">lang zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># Network information</span></span><br><span class="line">network  --bootproto=dhcp --device=eth0 --mtu=1500 --noipv6 --activate</span><br><span class="line">network  --bootproto=dhcp --hostname=localhost.localdomain</span><br><span class="line"><span class="comment"># Reboot after installation</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># Use network installation</span></span><br><span class="line">url --url=<span class="string">"http://<span class="variable">$&#123;ip&#125;</span>/yum/CentOS7.9/"</span></span><br><span class="line"><span class="comment"># Root password</span></span><br><span class="line">rootpw --iscrypted \<span class="variable">$1</span>\$/Hu9dpB5\<span class="variable">$XRyJZbN9NOqoF10Qh2ZSp</span>.</span><br><span class="line"><span class="comment"># SELinux configuration</span></span><br><span class="line">selinux --disabled</span><br><span class="line"><span class="comment"># System services</span></span><br><span class="line">services --enabled=<span class="string">"chronyd"</span></span><br><span class="line"><span class="comment"># Do not configure the X Window System</span></span><br><span class="line">skipx</span><br><span class="line"><span class="comment"># System timezone</span></span><br><span class="line">timezone Asia/Shanghai --isUtc</span><br><span class="line"><span class="comment"># System bootloader configuration</span></span><br><span class="line">bootloader --append=<span class="string">"rhgb rhgb quiet quiet crashkernel=auto"</span> --location=mbr --driveorder=<span class="string">"sda"</span> --boot-drive=sda</span><br><span class="line"><span class="comment"># Clear the Master Boot Record</span></span><br><span class="line">zerombr</span><br><span class="line"><span class="comment"># Partition clearing information</span></span><br><span class="line">clearpart --all --drives=sda</span><br><span class="line"><span class="comment"># Disk partitioning information</span></span><br><span class="line">part swap --fstype=<span class="string">"swap"</span> --size=2048</span><br><span class="line">part /boot --fstype=<span class="string">"ext4"</span> --size=500</span><br><span class="line">part / --fstype=<span class="string">"ext4"</span> --size=17931</span><br><span class="line"></span><br><span class="line">%packages</span><br><span class="line">@core</span><br><span class="line">chrony</span><br><span class="line">kexec-tools</span><br><span class="line">kexec-tools</span><br><span class="line"></span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%addon com_redhat_kdump --<span class="built_in">enable</span> --reserve-mb=<span class="string">'auto'</span></span><br><span class="line"></span><br><span class="line">%end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; pxelinux.cfg/default</span><br><span class="line">default vesamenu.c32</span><br><span class="line">timeout 50</span><br><span class="line"></span><br><span class="line">menu title Welcome to PXE server!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">label centos7.9</span><br><span class="line">    menu label Install CentOS7.9 <span class="keyword">for</span> vmware (minimal install)</span><br><span class="line">    kernel /yum/CentOS7.9/images/pxeboot/vmlinuz</span><br><span class="line">    append initrd=/yum/CentOS7.9/images/pxeboot/initrd.img ks=http://<span class="variable">$&#123;ip&#125;</span>/yum/CentOS7.9/ks-minimal-vmware.cfg</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">ubuntu</span></span>()&#123;</span><br><span class="line">mkdir -p /data/wwwroot/apt/ubuntu16.10</span><br><span class="line"><span class="built_in">cd</span> /data/wwwroot/apt/ubuntu16.10</span><br><span class="line">`wget http://old-releases.ubuntu.com/releases/yakkety/ubuntu-16.10-server-amd64.iso`</span><br><span class="line">mount -o loop ubuntu-16.10-server-amd64.iso /mnt/</span><br><span class="line">cp -rf /mnt/* /data/wwwroot/apt/ubuntu16.10</span><br><span class="line">umount /mnt/</span><br><span class="line">ln -s /data/wwwroot/apt/ /data/wwwroot/pxefiles/apt</span><br><span class="line">cat &lt;&lt; EOF &gt; /data/wwwroot/apt/ubuntu16.10/ks-server-vmware.cfg</span><br><span class="line">lang en_US</span><br><span class="line">langsupport en_US</span><br><span class="line">keyboard us</span><br><span class="line">mouse</span><br><span class="line">timezone Asia/Shanghai</span><br><span class="line">rootpw --disabled</span><br><span class="line"><span class="comment"># ubuntu password: 123456</span></span><br><span class="line">user ubuntu --fullname <span class="string">"ubuntu"</span> --iscrypted --password \<span class="variable">$1</span>\$/Hu9dpB5\<span class="variable">$XRyJZbN9NOqoF10Qh2ZSp</span>.</span><br><span class="line">reboot</span><br><span class="line">text</span><br><span class="line">install</span><br><span class="line">url --url http://<span class="variable">$&#123;ip&#125;</span>/apt/ubuntu16.10/</span><br><span class="line">bootloader --location=mbr </span><br><span class="line">zerombr yes</span><br><span class="line">clearpart --all --initlabel </span><br><span class="line">part / --fstype ext4 --size 1 --grow </span><br><span class="line">part swap --size 2048 </span><br><span class="line">auth  --useshadow  --enablemd5 </span><br><span class="line">network --bootproto=dhcp --device=eth0</span><br><span class="line">firewall --disabled </span><br><span class="line">skipx</span><br><span class="line">%packages</span><br><span class="line">@^minimal</span><br><span class="line">@core</span><br><span class="line">openssh-server</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /data/wwwroot/pxefiles/pxelinux.cfg/default</span><br><span class="line">default vesamenu.c32</span><br><span class="line">timeout 50</span><br><span class="line"></span><br><span class="line">menu title Welcome to PXE server!</span><br><span class="line"></span><br><span class="line">label ubuntu server 16.10</span><br><span class="line">    menu label Install Ubuntu server 16.10 (minimal install)</span><br><span class="line">    kernel /apt/ubuntu16.10/install/netboot/ubuntu-installer/amd64/linux</span><br><span class="line">    append initrd=apt/ubuntu16.10/install/netboot/ubuntu-installer/amd64/initrd.gz ks=http://<span class="variable">$&#123;ip&#125;</span>/apt/ubuntu16.10/ks-server-vmware.cfg  --- live-installer/net-image=http://<span class="variable">$&#123;ip&#125;</span>/apt/ubuntu16.10/install/filesystem.squashfs</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$sys</span> -eq 1 ];<span class="keyword">then</span></span><br><span class="line">	centos</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$sys</span> -eq 2 ];<span class="keyword">then</span></span><br><span class="line">	ubuntu</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$sys</span> -eq 3 ];<span class="keyword">then</span></span><br><span class="line">	centos</span><br><span class="line">	ubuntu</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">service firewalld status &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">	kou1=(80 22)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!kou1[@]&#125;</span></span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">                firewall-cmd --permanent --zone=public --add-port=<span class="variable">$&#123;kou1[$i]&#125;</span>/tcp</span><br><span class="line">                firewall-cmd --reload</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">	kou2=(67 68 69)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!kou2[@]&#125;</span></span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">                firewall-cmd --permanent --zone=public --add-port=<span class="variable">$&#123;kou2[$i]&#125;</span>/udp</span><br><span class="line">                firewall-cmd --reload</span><br><span class="line">        <span class="keyword">done</span>	</span><br><span class="line">		</span><br><span class="line"><span class="keyword">fi</span> &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------------------------------"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"tftp和DHCP，pxe服务器已经开启,请把裸金属接入于pxe服务器同一网卡，重启即可自动安装系统。"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"系统默认密码是123456，Ubuntu系统是ubuntu用户，root密码请登录后修改。应答文件建议可以根据自己需求进行修改。"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------------------------------------------"</span></span><br><span class="line"><span class="built_in">cd</span> /data/pxeboot/</span><br><span class="line">dnsmasq -C dnsmasq.conf -d</span><br></pre></td></tr></table></figure>


<p>该文章摘自：<a href="https://yunfwe.cn/2018/06/03/2018/一步步搭建PXE网络装机" target="_blank" rel="noopener">https://yunfwe.cn/2018/06/03/2018/一步步搭建PXE网络装机</a></p>
]]></content>
      <categories>
        <category>pxe</category>
      </categories>
  </entry>
  <entry>
    <title>kubernetes常用命令(k8s)</title>
    <url>/2021/07/11/kubernetes%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-k8s/</url>
    <content><![CDATA[<h3 id="docker-k8s"><a href="#docker-k8s" class="headerlink" title="docker+k8s"></a>docker+k8s</h3><a id="more"></a>


<p>基础命令：create，delete，get，run，expose，set，explain，edit。<br>create命令：根据文件或者输入来创建资源</p>
<h1 id="创建Deployment和Service资源"><a href="#创建Deployment和Service资源" class="headerlink" title="创建Deployment和Service资源"></a>创建Deployment和Service资源</h1><p>kubectl create -f javak8s-deployment.yaml<br>kubectl create -f javak8s-service.yaml<br>delete命令：删除资源</p>
<h1 id="根据yaml文件删除对应的资源，但是yaml文件并不会被删除，这样更加高效"><a href="#根据yaml文件删除对应的资源，但是yaml文件并不会被删除，这样更加高效" class="headerlink" title="根据yaml文件删除对应的资源，但是yaml文件并不会被删除，这样更加高效"></a>根据yaml文件删除对应的资源，但是yaml文件并不会被删除，这样更加高效</h1><p>kubectl delete -f javak8s-deployment.yaml<br>kubectl delete -f javak8s-service.yaml</p>
<h1 id="也可以通过具体的资源名称来进行删除，使用这个删除资源，需要同时删除pod和service资源才行"><a href="#也可以通过具体的资源名称来进行删除，使用这个删除资源，需要同时删除pod和service资源才行" class="headerlink" title="也可以通过具体的资源名称来进行删除，使用这个删除资源，需要同时删除pod和service资源才行"></a>也可以通过具体的资源名称来进行删除，使用这个删除资源，需要同时删除pod和service资源才行</h1><p>kubectl delete 具体的资源名称<br>get命令：获得资源信息</p>
<h1 id="查看所有的资源信息"><a href="#查看所有的资源信息" class="headerlink" title="查看所有的资源信息"></a>查看所有的资源信息</h1><p>kubectl get all</p>
<h1 id="查看pod列表"><a href="#查看pod列表" class="headerlink" title="查看pod列表"></a>查看pod列表</h1><p>kubectl get pod</p>
<h1 id="显示pod节点的标签信息"><a href="#显示pod节点的标签信息" class="headerlink" title="显示pod节点的标签信息"></a>显示pod节点的标签信息</h1><p>kubectl get pod –show-labels</p>
<h1 id="根据指定标签匹配到具体的pod"><a href="#根据指定标签匹配到具体的pod" class="headerlink" title="根据指定标签匹配到具体的pod"></a>根据指定标签匹配到具体的pod</h1><p>kubectl get pods -l app=example</p>
<h1 id="查看node节点列表"><a href="#查看node节点列表" class="headerlink" title="查看node节点列表"></a>查看node节点列表</h1><p>kubectl get node </p>
<h1 id="显示node节点的标签信息"><a href="#显示node节点的标签信息" class="headerlink" title="显示node节点的标签信息"></a>显示node节点的标签信息</h1><p>kubectl get node –show-labels</p>
<h1 id="查看pod详细信息，也就是可以查看pod具体运行在哪个节点上（ip地址信息）"><a href="#查看pod详细信息，也就是可以查看pod具体运行在哪个节点上（ip地址信息）" class="headerlink" title="查看pod详细信息，也就是可以查看pod具体运行在哪个节点上（ip地址信息）"></a>查看pod详细信息，也就是可以查看pod具体运行在哪个节点上（ip地址信息）</h1><p>kubectl get pod -o wide</p>
<h1 id="查看服务的详细信息，显示了服务名称，类型，集群ip，端口，时间等信息"><a href="#查看服务的详细信息，显示了服务名称，类型，集群ip，端口，时间等信息" class="headerlink" title="查看服务的详细信息，显示了服务名称，类型，集群ip，端口，时间等信息"></a>查看服务的详细信息，显示了服务名称，类型，集群ip，端口，时间等信息</h1><p>kubectl get svc<br>[root@master ~]# kubectl get svc<br>NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE<br>go-service      NodePort    10.10.10.247   <none>        8089:33702/TCP   29m<br>java-service    NodePort    10.10.10.248   <none>        8082:32823/TCP   5h17m<br>kubernetes      ClusterIP   10.10.10.1     <none>        443/TCP          5d16h<br>nginx-service   NodePort    10.10.10.146   <none>        88:34823/TCP     2d19h</p>
<h1 id="查看命名空间"><a href="#查看命名空间" class="headerlink" title="查看命名空间"></a>查看命名空间</h1><p>kubectl get ns</p>
<h1 id="查看所有pod所属的命名空间"><a href="#查看所有pod所属的命名空间" class="headerlink" title="查看所有pod所属的命名空间"></a>查看所有pod所属的命名空间</h1><p>kubectl get pod –all-namespaces</p>
<h1 id="查看所有pod所属的命名空间并且查看都在哪些节点上运行"><a href="#查看所有pod所属的命名空间并且查看都在哪些节点上运行" class="headerlink" title="查看所有pod所属的命名空间并且查看都在哪些节点上运行"></a>查看所有pod所属的命名空间并且查看都在哪些节点上运行</h1><p>kubectl get pod –all-namespaces  -o wide</p>
<h1 id="查看目前所有的replica-set，显示了所有的pod的副本数，以及他们的可用数量以及状态等信息"><a href="#查看目前所有的replica-set，显示了所有的pod的副本数，以及他们的可用数量以及状态等信息" class="headerlink" title="查看目前所有的replica set，显示了所有的pod的副本数，以及他们的可用数量以及状态等信息"></a>查看目前所有的replica set，显示了所有的pod的副本数，以及他们的可用数量以及状态等信息</h1><p>kubectl get rs<br>[root@master ~]# kubectl get rs<br>NAME                          DESIRED   CURRENT   READY   AGE<br>go-deployment-58c76f7d5c      1         1         1       32m<br>java-deployment-76889f56c5    1         1         1       5h21m<br>nginx-deployment-58d6d6ccb8   3         3         3       2d19h</p>
<h1 id="查看目前所有的deployment"><a href="#查看目前所有的deployment" class="headerlink" title="查看目前所有的deployment"></a>查看目前所有的deployment</h1><p>kubectl get deployment<br>[root@master ~]# kubectl get deployment<br>NAME               READY   UP-TO-DATE   AVAILABLE   AGE<br>go-deployment      1/1     1            1           34m<br>java-deployment    1/1     1            1           5h23m<br>nginx-deployment   3/3     3            3           2d19h</p>
<h1 id="查看已经部署了的所有应用，可以看到容器，以及容器所用的镜像，标签等信息"><a href="#查看已经部署了的所有应用，可以看到容器，以及容器所用的镜像，标签等信息" class="headerlink" title="查看已经部署了的所有应用，可以看到容器，以及容器所用的镜像，标签等信息"></a>查看已经部署了的所有应用，可以看到容器，以及容器所用的镜像，标签等信息</h1><p> kubectl get deploy -o wide<br>[root@master bin]# kubectl get deploy -o wide<br>NAME    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES       SELECTOR<br>nginx   3/3     3            3           16m   nginx        nginx:1.10   app=example<br>run命令：在集群中创建并运行一个或多个容器镜像。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>run NAME –image=image [–env=”key=value”] [–port=port] [–replicas=replicas] [–dry-run=bool] [–overrides=inline-json] [–command] – [COMMAND] [args…]</p>
<h1 id="示例，运行一个名称为nginx，副本数为3，标签为app-example，镜像为nginx-1-10，端口为80的容器实例"><a href="#示例，运行一个名称为nginx，副本数为3，标签为app-example，镜像为nginx-1-10，端口为80的容器实例" class="headerlink" title="示例，运行一个名称为nginx，副本数为3，标签为app=example，镜像为nginx:1.10，端口为80的容器实例"></a>示例，运行一个名称为nginx，副本数为3，标签为app=example，镜像为nginx:1.10，端口为80的容器实例</h1><p>kubectl run nginx –replicas=3 –labels=”app=example” –image=nginx:1.10 –port=80<br>其他用法参见：<a href="http://docs.kubernetes.org.cn/468.html" target="_blank" rel="noopener">http://docs.kubernetes.org.cn/468.html</a><br>expose命令：创建一个service服务，并且暴露端口让外部可以访问</p>
<h1 id="创建一个nginx服务并且暴露端口让外界可以访问"><a href="#创建一个nginx服务并且暴露端口让外界可以访问" class="headerlink" title="创建一个nginx服务并且暴露端口让外界可以访问"></a>创建一个nginx服务并且暴露端口让外界可以访问</h1><p>kubectl expose deployment nginx –port=88 –type=NodePort –target-port=80 –name=nginx-service<br>关于expose的详细用法参见：<a href="http://docs.kubernetes.org.cn/475.html" target="_blank" rel="noopener">http://docs.kubernetes.org.cn/475.html</a><br>set命令： 配置应用的一些特定资源，也可以修改应用已有的资源</p>
<h1 id="使用kubectl-set-–help查看，它的子命令，env，image，resources，selector，serviceaccount，subject。"><a href="#使用kubectl-set-–help查看，它的子命令，env，image，resources，selector，serviceaccount，subject。" class="headerlink" title="使用kubectl set –help查看，它的子命令，env，image，resources，selector，serviceaccount，subject。"></a>使用kubectl set –help查看，它的子命令，env，image，resources，selector，serviceaccount，subject。</h1><p>set命令详情参见：<a href="http://docs.kubernetes.org.cn/669.html" target="_blank" rel="noopener">http://docs.kubernetes.org.cn/669.html</a><br>语法：<br>resources (-f FILENAME | TYPE NAME) ([–limits=LIMITS &amp; –requests=REQUESTS]<br>kubectl set resources 命令</p>
<p>这个命令用于设置资源的一些范围限制。</p>
<p>资源对象中的Pod可以指定计算资源需求（CPU-单位m、内存-单位Mi），即使用的最小资源请求（Requests），限制（Limits）的最大资源需求，Pod将保证使用在设置的资源数量范围。</p>
<p>对于每个Pod资源，如果指定了Limits（限制）值，并省略了Requests（请求），则Requests默认为Limits的值。</p>
<p>可用资源对象包括(支持大小写)：replicationcontroller、deployment、daemonset、job、replicaset。</p>
<p>例如：</p>
<h1 id="将deployment的nginx容器cpu限制为“200m”，将内存设置为“512Mi”"><a href="#将deployment的nginx容器cpu限制为“200m”，将内存设置为“512Mi”" class="headerlink" title="将deployment的nginx容器cpu限制为“200m”，将内存设置为“512Mi”"></a>将deployment的nginx容器cpu限制为“200m”，将内存设置为“512Mi”</h1><p>kubectl set resources deployment nginx -c=nginx –limits=cpu=200m,memory=512Mi</p>
<h1 id="为nginx中的所有容器设置-Requests和Limits"><a href="#为nginx中的所有容器设置-Requests和Limits" class="headerlink" title="为nginx中的所有容器设置 Requests和Limits"></a>为nginx中的所有容器设置 Requests和Limits</h1><p>kubectl set resources deployment nginx –limits=cpu=200m,memory=512Mi –requests=cpu=100m,memory=256Mi</p>
<h1 id="删除nginx中容器的计算资源值"><a href="#删除nginx中容器的计算资源值" class="headerlink" title="删除nginx中容器的计算资源值"></a>删除nginx中容器的计算资源值</h1><p>kubectl set resources deployment nginx –limits=cpu=0,memory=0 –requests=cpu=0,memory=0<br>kubectl set selector命令</p>
<p>设置资源的selector（选择器）。如果在调用”set selector”命令之前已经存在选择器，则新创建的选择器将覆盖原来的选择器。</p>
<p>selector必须以字母或数字开头，最多包含63个字符，可使用：字母、数字、连字符” - “ 、点”.”和下划线” _ “。如果指定了–resource-version，则更新将使用此资源版本，否则将使用现有的资源版本。</p>
<p>注意：目前selector命令只能用于Service对象。</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>selector (-f FILENAME | TYPE NAME) EXPRESSIONS [–resource-version=version]<br>kubectl set image命令</p>
<p>​ 用于更新现有资源的容器镜像。</p>
<p>可用资源对象包括：pod (po)、replicationcontroller (rc)、deployment (deploy)、daemonset (ds)、job、replicaset (rs)。</p>
<h1 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h1><p>image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 … CONTAINER_NAME_N=CONTAINER_IMAGE_N</p>
<h1 id="将deployment中的nginx容器镜像设置为“nginx：1-9-1”。"><a href="#将deployment中的nginx容器镜像设置为“nginx：1-9-1”。" class="headerlink" title="将deployment中的nginx容器镜像设置为“nginx：1.9.1”。"></a>将deployment中的nginx容器镜像设置为“nginx：1.9.1”。</h1><p>kubectl set image deployment/nginx busybox=busybox nginx=nginx:1.9.1</p>
<h1 id="所有deployment和rc的nginx容器镜像更新为“nginx：1-9-1”"><a href="#所有deployment和rc的nginx容器镜像更新为“nginx：1-9-1”" class="headerlink" title="所有deployment和rc的nginx容器镜像更新为“nginx：1.9.1”"></a>所有deployment和rc的nginx容器镜像更新为“nginx：1.9.1”</h1><p>kubectl set image deployments,rc nginx=nginx:1.9.1 –all</p>
<h1 id="将daemonset-abc的所有容器镜像更新为“nginx：1-9-1”"><a href="#将daemonset-abc的所有容器镜像更新为“nginx：1-9-1”" class="headerlink" title="将daemonset abc的所有容器镜像更新为“nginx：1.9.1”"></a>将daemonset abc的所有容器镜像更新为“nginx：1.9.1”</h1><p>kubectl set image daemonset abc *=nginx:1.9.1</p>
<h1 id="从本地文件中更新nginx容器镜像"><a href="#从本地文件中更新nginx容器镜像" class="headerlink" title="从本地文件中更新nginx容器镜像"></a>从本地文件中更新nginx容器镜像</h1><p>kubectl set image -f path/to/file.yaml nginx=nginx:1.9.1 –local -o yaml<br>explain命令：用于显示资源文档信息</p>
<p>kubectl explain rs<br>edit命令:用于编辑资源信息</p>
<h1 id="编辑Deployment-nginx的一些信息"><a href="#编辑Deployment-nginx的一些信息" class="headerlink" title="编辑Deployment nginx的一些信息"></a>编辑Deployment nginx的一些信息</h1><p>kubectl edit deployment nginx</p>
<h1 id="编辑service类型的nginx的一些信息"><a href="#编辑service类型的nginx的一些信息" class="headerlink" title="编辑service类型的nginx的一些信息"></a>编辑service类型的nginx的一些信息</h1><p>kubectl edit service/nginx<br>设置命令：label，annotate，completion<br>label命令:用于更新（增加、修改或删除）资源上的 label（标签）</p>
<p>label 必须以字母或数字开头，可以使用字母、数字、连字符、点和下划线，最长63个字符。<br>如果–overwrite 为 true，则可以覆盖已有的 label，否则尝试覆盖 label 将会报错。<br>如果指定了–resource-version，则更新将使用此资源版本，否则将使用现有的资源版本。</p>
<h1 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h1><p>label [–overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 … KEY_N=VAL_N [–resource-version=version]</p>
<h1 id="给名为foo的Pod添加label-unhealthy-true"><a href="#给名为foo的Pod添加label-unhealthy-true" class="headerlink" title="给名为foo的Pod添加label unhealthy=true"></a>给名为foo的Pod添加label unhealthy=true</h1><p>kubectl label pods foo unhealthy=true</p>
<h1 id="给名为foo的Pod修改label-为-‘status’-value-‘unhealthy’，且覆盖现有的value"><a href="#给名为foo的Pod修改label-为-‘status’-value-‘unhealthy’，且覆盖现有的value" class="headerlink" title="给名为foo的Pod修改label 为 ‘status’ / value ‘unhealthy’，且覆盖现有的value"></a>给名为foo的Pod修改label 为 ‘status’ / value ‘unhealthy’，且覆盖现有的value</h1><p>kubectl label –overwrite pods foo status=unhealthy</p>
<h1 id="给-namespace-中的所有-pod-添加-label"><a href="#给-namespace-中的所有-pod-添加-label" class="headerlink" title="给 namespace 中的所有 pod 添加 label"></a>给 namespace 中的所有 pod 添加 label</h1><p>kubectl label  pods –all status=unhealthy</p>
<h1 id="仅当resource-version-1时才更新-名为foo的Pod上的label"><a href="#仅当resource-version-1时才更新-名为foo的Pod上的label" class="headerlink" title="仅当resource-version=1时才更新 名为foo的Pod上的label"></a>仅当resource-version=1时才更新 名为foo的Pod上的label</h1><p>kubectl label pods foo status=unhealthy –resource-version=1</p>
<h1 id="删除名为“bar”的label-。（使用“-”减号相连）"><a href="#删除名为“bar”的label-。（使用“-”减号相连）" class="headerlink" title="删除名为“bar”的label 。（使用“ - ”减号相连）"></a>删除名为“bar”的label 。（使用“ - ”减号相连）</h1><p>kubectl label pods foo bar-<br>annotate命令：更新一个或多个资源的Annotations信息。也就是注解信息，可以方便的查看做了哪些操作。</p>
<p>Annotations由key/value组成。<br>Annotations的目的是存储辅助数据，特别是通过工具和系统扩展操作的数据，更多介绍在这里。<br>如果–overwrite为true，现有的annotations可以被覆盖，否则试图覆盖annotations将会报错。<br>如果设置了–resource-version，则更新将使用此resource version，否则将使用原有的resource version。</p>
<h1 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h1><p>annotate [–overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 … KEY_N=VAL_N [–resource-version=version]</p>
<h1 id="更新Pod“foo”，设置annotation-“description”的value-“my-frontend”，如果同一个annotation多次设置，则只使用最后设置的value值"><a href="#更新Pod“foo”，设置annotation-“description”的value-“my-frontend”，如果同一个annotation多次设置，则只使用最后设置的value值" class="headerlink" title="更新Pod“foo”，设置annotation “description”的value “my frontend”，如果同一个annotation多次设置，则只使用最后设置的value值"></a>更新Pod“foo”，设置annotation “description”的value “my frontend”，如果同一个annotation多次设置，则只使用最后设置的value值</h1><p>kubectl annotate pods foo description=’my frontend’</p>
<h1 id="根据“pod-json”中的type和name更新pod的annotation"><a href="#根据“pod-json”中的type和name更新pod的annotation" class="headerlink" title="根据“pod.json”中的type和name更新pod的annotation"></a>根据“pod.json”中的type和name更新pod的annotation</h1><p>kubectl annotate -f pod.json description=’my frontend’</p>
<h1 id="更新Pod”foo”，设置annotation“description”的value“my-frontend-running-nginx”，覆盖现有的值"><a href="#更新Pod”foo”，设置annotation“description”的value“my-frontend-running-nginx”，覆盖现有的值" class="headerlink" title="更新Pod”foo”，设置annotation“description”的value“my frontend running nginx”，覆盖现有的值"></a>更新Pod”foo”，设置annotation“description”的value“my frontend running nginx”，覆盖现有的值</h1><p>kubectl annotate –overwrite pods foo description=’my frontend running nginx’</p>
<h1 id="更新-namespace中的所有pod"><a href="#更新-namespace中的所有pod" class="headerlink" title="更新 namespace中的所有pod"></a>更新 namespace中的所有pod</h1><p>kubectl annotate pods –all description=’my frontend running nginx’</p>
<h1 id="只有当resource-version为1时，才更新pod-‘-foo-‘"><a href="#只有当resource-version为1时，才更新pod-‘-foo-‘" class="headerlink" title="只有当resource-version为1时，才更新pod ‘ foo ‘"></a>只有当resource-version为1时，才更新pod ‘ foo ‘</h1><p>kubectl annotate pods foo description=’my frontend running nginx’ –resource-version=1</p>
<h1 id="通过删除名为“description”的annotations来更新pod-‘-foo-‘。-不需要-overwrite-flag。"><a href="#通过删除名为“description”的annotations来更新pod-‘-foo-‘。-不需要-overwrite-flag。" class="headerlink" title="通过删除名为“description”的annotations来更新pod ‘ foo ‘。#不需要- overwrite flag。"></a>通过删除名为“description”的annotations来更新pod ‘ foo ‘。#不需要- overwrite flag。</h1><p>kubectl annotate pods foo description-<br>completion命令：用于设置kubectl命令自动补全</p>
<p>$ source &lt;(kubectl completion bash) # setup autocomplete in bash, bash-completion package should be installed first.<br>$ source &lt;(kubectl completion zsh)  # setup autocomplete in zsh<br>kubectl 部署命令：rollout，rolling-update，scale，autoscale<br>rollout命令:用于对资源进行管理</p>
<p>可用资源包括：deployments，daemonsets。</p>
<p>子命令：</p>
<p>history（查看历史版本）<br>pause（暂停资源）<br>resume（恢复暂停资源）<br>status（查看资源状态）<br>undo（回滚版本）</p>
<h1 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h1><p>kubectl rollout SUBCOMMAND</p>
<h1 id="回滚到之前的deployment"><a href="#回滚到之前的deployment" class="headerlink" title="回滚到之前的deployment"></a>回滚到之前的deployment</h1><p>kubectl rollout undo deployment/abc</p>
<h1 id="查看daemonet的状态"><a href="#查看daemonet的状态" class="headerlink" title="查看daemonet的状态"></a>查看daemonet的状态</h1><p>kubectl rollout status daemonset/foo<br>rolling-update命令:执行指定ReplicationController的滚动更新。</p>
<p>该命令创建了一个新的RC， 然后一次更新一个pod方式逐步使用新的PodTemplate，最终实现Pod滚动更新，new-controller.json需要与之前RC在相同的namespace下。</p>
<h1 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h1><p>rolling-update OLD_CONTROLLER_NAME ([NEW_CONTROLLER_NAME] –image=NEW_CONTAINER_IMAGE | -f NEW_CONTROLLER_SPEC)</p>
<h1 id="使用frontend-v2-json中的新RC数据更新frontend-v1的pod"><a href="#使用frontend-v2-json中的新RC数据更新frontend-v1的pod" class="headerlink" title="使用frontend-v2.json中的新RC数据更新frontend-v1的pod"></a>使用frontend-v2.json中的新RC数据更新frontend-v1的pod</h1><p>kubectl rolling-update frontend-v1 -f frontend-v2.json</p>
<h1 id="使用JSON数据更新frontend-v1的pod"><a href="#使用JSON数据更新frontend-v1的pod" class="headerlink" title="使用JSON数据更新frontend-v1的pod"></a>使用JSON数据更新frontend-v1的pod</h1><p>cat frontend-v2.json | kubectl rolling-update frontend-v1 -f -</p>
<h1 id="其他的一些滚动更新"><a href="#其他的一些滚动更新" class="headerlink" title="其他的一些滚动更新"></a>其他的一些滚动更新</h1><p>kubectl rolling-update frontend-v1 frontend-v2 –image=image:v2</p>
<p>kubectl rolling-update frontend –image=image:v2</p>
<p>kubectl rolling-update frontend-v1 frontend-v2 –rollback<br>scale命令：扩容或缩容 Deployment、ReplicaSet、Replication Controller或 Job 中Pod数量</p>
<p>scale也可以指定多个前提条件，如：当前副本数量或 –resource-version ，进行伸缩比例设置前，系统会先验证前提条件是否成立。这个就是弹性伸缩策略</p>
<h1 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h1><p>kubectl scale [–resource-version=version] [–current-replicas=count] –replicas=COUNT (-f FILENAME | TYPE NAME)</p>
<h1 id="将名为foo中的pod副本数设置为3。"><a href="#将名为foo中的pod副本数设置为3。" class="headerlink" title="将名为foo中的pod副本数设置为3。"></a>将名为foo中的pod副本数设置为3。</h1><p>kubectl scale –replicas=3 rs/foo<br>kubectl scale deploy/nginx –replicas=30</p>
<h1 id="将由“foo-yaml”配置文件中指定的资源对象和名称标识的Pod资源副本设为3"><a href="#将由“foo-yaml”配置文件中指定的资源对象和名称标识的Pod资源副本设为3" class="headerlink" title="将由“foo.yaml”配置文件中指定的资源对象和名称标识的Pod资源副本设为3"></a>将由“foo.yaml”配置文件中指定的资源对象和名称标识的Pod资源副本设为3</h1><p>kubectl scale –replicas=3 -f foo.yaml</p>
<h1 id="如果当前副本数为2，则将其扩展至3。"><a href="#如果当前副本数为2，则将其扩展至3。" class="headerlink" title="如果当前副本数为2，则将其扩展至3。"></a>如果当前副本数为2，则将其扩展至3。</h1><p>kubectl scale –current-replicas=2 –replicas=3 deployment/mysql</p>
<h1 id="设置多个RC中Pod副本数量"><a href="#设置多个RC中Pod副本数量" class="headerlink" title="设置多个RC中Pod副本数量"></a>设置多个RC中Pod副本数量</h1><p>kubectl scale –replicas=5 rc/foo rc/bar rc/baz<br>autoscale命令： 这个比scale更加强大，也是弹性伸缩策略 ，它是根据流量的多少来自动进行扩展或者缩容</p>
<p>指定Deployment、ReplicaSet或ReplicationController，并创建已经定义好资源的自动伸缩器。使用自动伸缩器可以根据需要自动增加或减少系统中部署的pod数量。</p>
<h1 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h1><p>kubectl autoscale (-f FILENAME | TYPE NAME | TYPE/NAME) [–min=MINPODS] –max=MAXPODS [–cpu-percent=CPU] [flags]</p>
<h1 id="使用-Deployment-“foo”设定，使用默认的自动伸缩策略，指定目标CPU使用率，使其Pod数量在2到10之间"><a href="#使用-Deployment-“foo”设定，使用默认的自动伸缩策略，指定目标CPU使用率，使其Pod数量在2到10之间" class="headerlink" title="使用 Deployment “foo”设定，使用默认的自动伸缩策略，指定目标CPU使用率，使其Pod数量在2到10之间"></a>使用 Deployment “foo”设定，使用默认的自动伸缩策略，指定目标CPU使用率，使其Pod数量在2到10之间</h1><p>kubectl autoscale deployment foo –min=2 –max=10</p>
<h1 id="使用RC“foo”设定，使其Pod的数量介于1和5之间，CPU使用率维持在80％"><a href="#使用RC“foo”设定，使其Pod的数量介于1和5之间，CPU使用率维持在80％" class="headerlink" title="使用RC“foo”设定，使其Pod的数量介于1和5之间，CPU使用率维持在80％"></a>使用RC“foo”设定，使其Pod的数量介于1和5之间，CPU使用率维持在80％</h1><p>kubectl autoscale rc foo –max=5 –cpu-percent=80<br>集群管理命令：certificate，cluster-info，top，cordon，uncordon，drain，taint<br>certificate命令：用于证书资源管理，授权等</p>
<p>[root@master ~]# kubectl certificate –help<br>Modify certificate resources.</p>
<p>Available Commands:<br>  approve     Approve a certificate signing request<br>  deny        Deny a certificate signing request</p>
<p>Usage:<br>  kubectl certificate SUBCOMMAND [options]</p>
<p>Use “kubectl <command> –help” for more information about a given command.<br>Use “kubectl options” for a list of global command-line options (applies to all commands).</p>
<h1 id="例如，当有node节点要向master请求，那么是需要master节点授权的"><a href="#例如，当有node节点要向master请求，那么是需要master节点授权的" class="headerlink" title="例如，当有node节点要向master请求，那么是需要master节点授权的"></a>例如，当有node节点要向master请求，那么是需要master节点授权的</h1><p>kubectl  certificate approve node-csr-81F5uBehyEyLWco5qavBsxc1GzFcZk3aFM3XW5rT3mw node-csr-Ed0kbFhc_q7qx14H3QpqLIUs0uKo036O2SnFpIheM18<br>cluster-info命令：显示集群信息</p>
<p>kubectl cluster-info</p>
<p>[root@master ~]# kubectl cluster-info<br>Kubernetes master is running at <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>To further debug and diagnose cluster problems, use ‘kubectl cluster-info dump’.<br>top命令：用于查看资源的cpu，内存磁盘等资源的使用率</p>
<p>kubectl top pod –all-namespaces<br>它需要heapster运行才行<br>cordon命令：用于标记某个节点不可调度</p>
<p>uncordon命令：用于标签节点可以调度</p>
<p>drain命令： 用于在维护期间排除节点。</p>
<p>taint命令：参见：<a href="https://blog.frognew.com/2018/05/taint-and-toleration.html" target="_blank" rel="noopener">https://blog.frognew.com/2018/05/taint-and-toleration.html</a></p>
<p>集群故障排查和调试命令：describe，logs，exec，attach，port-foward，proxy，cp，auth<br>describe命令：显示特定资源的详细信息</p>
<h1 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h1><p>kubectl describe TYPE NAME_PREFIX<br>（首先检查是否有精确匹配TYPE和NAME_PREFIX的资源，如果没有，将会输出所有名称以NAME_PREFIX开头的资源详细信息）<br>支持的资源包括但不限于（大小写不限）：pods (po)、services (svc)、 replicationcontrollers (rc)、nodes (no)、events (ev)、componentstatuses (cs)、 limitranges (limits)、persistentvolumes (pv)、persistentvolumeclaims (pvc)、 resourcequotas (quota)和secrets。<br>#查看my-nginx pod的详细状态<br>kubectl describe po my-nginx<br>logs命令：用于在一个pod中打印一个容器的日志，如果pod中只有一个容器，可以省略容器名</p>
<h1 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h1><p>kubectl logs [-f] [-p] POD [-c CONTAINER]</p>
<h1 id="返回仅包含一个容器的pod-nginx的日志快照"><a href="#返回仅包含一个容器的pod-nginx的日志快照" class="headerlink" title="返回仅包含一个容器的pod nginx的日志快照"></a>返回仅包含一个容器的pod nginx的日志快照</h1><p>$ kubectl logs nginx</p>
<h1 id="返回pod-ruby中已经停止的容器web-1的日志快照"><a href="#返回pod-ruby中已经停止的容器web-1的日志快照" class="headerlink" title="返回pod ruby中已经停止的容器web-1的日志快照"></a>返回pod ruby中已经停止的容器web-1的日志快照</h1><p>$ kubectl logs -p -c ruby web-1</p>
<h1 id="持续输出pod-ruby中的容器web-1的日志"><a href="#持续输出pod-ruby中的容器web-1的日志" class="headerlink" title="持续输出pod ruby中的容器web-1的日志"></a>持续输出pod ruby中的容器web-1的日志</h1><p>$ kubectl logs -f -c ruby web-1</p>
<h1 id="仅输出pod-nginx中最近的20条日志"><a href="#仅输出pod-nginx中最近的20条日志" class="headerlink" title="仅输出pod nginx中最近的20条日志"></a>仅输出pod nginx中最近的20条日志</h1><p>$ kubectl logs –tail=20 nginx</p>
<h1 id="输出pod-nginx中最近一小时内产生的所有日志"><a href="#输出pod-nginx中最近一小时内产生的所有日志" class="headerlink" title="输出pod nginx中最近一小时内产生的所有日志"></a>输出pod nginx中最近一小时内产生的所有日志</h1><p>$ kubectl logs –since=1h nginx</p>
<h1 id="参数选项"><a href="#参数选项" class="headerlink" title="参数选项"></a>参数选项</h1><p>  -c, –container=””: 容器名。<br>  -f, –follow[=false]: 指定是否持续输出日志（实时日志）。<br>      –interactive[=true]: 如果为true，当需要时提示用户进行输入。默认为true。<br>      –limit-bytes=0: 输出日志的最大字节数。默认无限制。<br>  -p, –previous[=false]: 如果为true，输出pod中曾经运行过，但目前已终止的容器的日志。<br>      –since=0: 仅返回相对时间范围，如5s、2m或3h，之内的日志。默认返回所有日志。只能同时使用since和since-time中的一种。<br>      –since-time=””: 仅返回指定时间（RFC3339格式）之后的日志。默认返回所有日志。只能同时使用since和since-time中的一种。<br>      –tail=-1: 要显示的最新的日志条数。默认为-1，显示所有的日志。<br>      –timestamps[=false]: 在日志中包含时间戳。<br>exec命令：进入容器进行交互，在容器中执行命令</p>
<h1 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h1><p>kubectl exec POD [-c CONTAINER] – COMMAND [args…]<br>#命令选项<br>  -c, –container=””: 容器名。如果未指定，使用pod中的一个容器。<br>  -p, –pod=””: Pod名。<br>  -i, –stdin[=false]: 将控制台输入发送到容器。<br>  -t, –tty[=false]: 将标准输入控制台作为容器的控制台输入。</p>
<h1 id="进入nginx容器，执行一些命令操作"><a href="#进入nginx容器，执行一些命令操作" class="headerlink" title="进入nginx容器，执行一些命令操作"></a>进入nginx容器，执行一些命令操作</h1><p>kubectl exec -it nginx-deployment-58d6d6ccb8-lc5fp bash<br>attach命令：连接到一个正在运行的容器。</p>
<p>#语法<br>kubectl attach POD -c CONTAINER</p>
<h1 id="参数选项-1"><a href="#参数选项-1" class="headerlink" title="参数选项"></a>参数选项</h1><p>-c, –container=””: 容器名。如果省略，则默认选择第一个 pod<br>  -i, –stdin[=false]: 将控制台输入发送到容器。<br>  -t, –tty[=false]: 将标准输入控制台作为容器的控制台输入。</p>
<h1 id="获取正在运行中的pod-123456-7890的输出，默认连接到第一个容器"><a href="#获取正在运行中的pod-123456-7890的输出，默认连接到第一个容器" class="headerlink" title="获取正在运行中的pod 123456-7890的输出，默认连接到第一个容器"></a>获取正在运行中的pod 123456-7890的输出，默认连接到第一个容器</h1><p>kubectl attach 123456-7890</p>
<h1 id="获取pod-123456-7890中ruby-container的输出"><a href="#获取pod-123456-7890中ruby-container的输出" class="headerlink" title="获取pod 123456-7890中ruby-container的输出"></a>获取pod 123456-7890中ruby-container的输出</h1><p>kubectl attach 123456-7890 -c ruby-container</p>
<h1 id="切换到终端模式，将控制台输入发送到pod-123456-7890的ruby-container的“bash”命令，并将其输出到控制台"><a href="#切换到终端模式，将控制台输入发送到pod-123456-7890的ruby-container的“bash”命令，并将其输出到控制台" class="headerlink" title="切换到终端模式，将控制台输入发送到pod 123456-7890的ruby-container的“bash”命令，并将其输出到控制台/"></a>切换到终端模式，将控制台输入发送到pod 123456-7890的ruby-container的“bash”命令，并将其输出到控制台/</h1><h1 id="错误控制台的信息发送回客户端。"><a href="#错误控制台的信息发送回客户端。" class="headerlink" title="错误控制台的信息发送回客户端。"></a>错误控制台的信息发送回客户端。</h1><p>kubectl attach 123456-7890 -c ruby-container -i -t<br>cp命令：拷贝文件或者目录到pod容器中</p>
<p>用于pod和外部的文件交换,类似于docker 的cp，就是将容器中的内容和外部的内容进行交换。</p>
<p>其他命令：api-servions，config，help，plugin，version<br>api-servions命令：打印受支持的api版本信息</p>
<h1 id="kubectl-api-versions"><a href="#kubectl-api-versions" class="headerlink" title="kubectl api-versions"></a>kubectl api-versions</h1><p>[root@master ~]# kubectl api-versions<br>admissionregistration.k8s.io/v1beta1<br>apiextensions.k8s.io/v1beta1<br>apiregistration.k8s.io/v1beta1<br>apps/v1<br>apps/v1beta1<br>apps/v1beta2<br>authentication.k8s.io/v1<br>authentication.k8s.io/v1beta1<br>authorization.k8s.io/v1<br>authorization.k8s.io/v1beta1<br>autoscaling/v1<br>autoscaling/v2beta1<br>batch/v1<br>batch/v1beta1<br>certificates.k8s.io/v1beta1<br>events.k8s.io/v1beta1<br>extensions/v1beta1<br>networking.k8s.io/v1<br>policy/v1beta1<br>rbac.authorization.k8s.io/v1<br>rbac.authorization.k8s.io/v1beta1<br>storage.k8s.io/v1<br>storage.k8s.io/v1beta1<br>v1<br>help命令：用于查看命令帮助</p>
<h1 id="显示全部的命令帮助提示"><a href="#显示全部的命令帮助提示" class="headerlink" title="显示全部的命令帮助提示"></a>显示全部的命令帮助提示</h1><p>kubectl –help</p>
<h1 id="具体的子命令帮助，例如"><a href="#具体的子命令帮助，例如" class="headerlink" title="具体的子命令帮助，例如"></a>具体的子命令帮助，例如</h1><p>kubectl create –help<br>config:用于修改kubeconfig配置文件（用于访问api，例如配置认证信息）</p>
<p>version命令：打印客户端和服务端版本信息</p>
<p>[root@master ~]# kubectl version<br>Client Version: version.Info{Major:”1”, Minor:”15”, GitVersion:”v1.15.3”, GitCommit:”2d3c76f9091b6bec110a5e63777c332469e0cba2”, GitTreeState:”clean”, BuildDate:”2019-08-19T11:13:54Z”, GoVersion:”go1.12.9”, Compiler:”gc”, Platform:”linux/amd64”}<br>Server Version: version.Info{Major:”1”, Minor:”9”, GitVersion:”v1.9.0”, GitCommit:”925c127ec6b946659ad0fd596fa959be43f0cc05”, GitTreeState:”clean”, BuildDate:”2017-12-15T20:55:30Z”, GoVersion:”go1.9.2”, Compiler:”gc”, Platform:”linux/amd64”}<br>plugin命令：运行一个命令行插件</p>
<p>高级命令：apply，patch，replace，convert<br>apply命令： 通过文件名或者标准输入对资源应用配置</p>
<p>通过文件名或控制台输入，对资源进行配置。 如果资源不存在，将会新建一个。可以使用 JSON 或者 YAML 格式。</p>
<h1 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h1><p>kubectl apply -f FILENAME</p>
<h1 id="将pod-json中的配置应用到pod"><a href="#将pod-json中的配置应用到pod" class="headerlink" title="将pod.json中的配置应用到pod"></a>将pod.json中的配置应用到pod</h1><p>kubectl apply -f ./pod.json</p>
<h1 id="将控制台输入的JSON配置应用到Pod"><a href="#将控制台输入的JSON配置应用到Pod" class="headerlink" title="将控制台输入的JSON配置应用到Pod"></a>将控制台输入的JSON配置应用到Pod</h1><p>cat pod.json | kubectl apply -f -</p>
<p>选项<br>-f, –filename=[]: 包含配置信息的文件名，目录名或者URL。<br>      –include-extended-apis[=true]: If true, include definitions of new APIs via calls to the API server. [default true]<br>  -o, –output=””: 输出模式。”-o name”为快捷输出(资源/name).<br>      –record[=false]: 在资源注释中记录当前 kubectl 命令。<br>  -R, –recursive[=false]: Process the directory used in -f, –filename recursively. Useful when you want to manage related manifests organized within the same directory.<br>      –schema-cache-dir=”~/.kube/schema”: 非空则将API schema缓存为指定文件，默认缓存到’$HOME/.kube/schema’<br>      –validate[=true]: 如果为true，在发送到服务端前先使用schema来验证输入。<br>patch命令： 使用补丁修改，更新资源的字段，也就是修改资源的部分内容</p>
<h1 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h1><p>kubectl patch (-f FILENAME | TYPE NAME) -p PATCH</p>
<h1 id="Partially-update-a-node-using-strategic-merge-patch"><a href="#Partially-update-a-node-using-strategic-merge-patch" class="headerlink" title="Partially update a node using strategic merge patch"></a>Partially update a node using strategic merge patch</h1><p>kubectl patch node k8s-node-1 -p ‘{“spec”:{“unschedulable”:true}}’</p>
<h1 id="Update-a-container’s-image-spec-containers-name-is-required-because-it’s-a-merge-key"><a href="#Update-a-container’s-image-spec-containers-name-is-required-because-it’s-a-merge-key" class="headerlink" title="Update a container’s image; spec.containers[*].name is required because it’s a merge key"></a>Update a container’s image; spec.containers[*].name is required because it’s a merge key</h1><p>kubectl patch pod valid-pod -p ‘{“spec”:{“containers”:[{“name”:”kubernetes-serve-hostname”,”image”:”new image”}]}}’<br>replace命令： 通过文件或者标准输入替换原有资源</p>
<h1 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h1><p>kubectl replace -f FILENAME</p>
<h1 id="Replace-a-pod-using-the-data-in-pod-json"><a href="#Replace-a-pod-using-the-data-in-pod-json" class="headerlink" title="Replace a pod using the data in pod.json."></a>Replace a pod using the data in pod.json.</h1><p>kubectl replace -f ./pod.json</p>
<h1 id="Replace-a-pod-based-on-the-JSON-passed-into-stdin"><a href="#Replace-a-pod-based-on-the-JSON-passed-into-stdin" class="headerlink" title="Replace a pod based on the JSON passed into stdin."></a>Replace a pod based on the JSON passed into stdin.</h1><p>cat pod.json | kubectl replace -f -</p>
<h1 id="Update-a-single-container-pod’s-image-version-tag-to-v4"><a href="#Update-a-single-container-pod’s-image-version-tag-to-v4" class="headerlink" title="Update a single-container pod’s image version (tag) to v4"></a>Update a single-container pod’s image version (tag) to v4</h1><p>kubectl get pod mypod -o yaml | sed ‘s/(image: myimage):.*$/\1:v4/‘ | kubectl replace -f -</p>
<h1 id="Force-replace-delete-and-then-re-create-the-resource"><a href="#Force-replace-delete-and-then-re-create-the-resource" class="headerlink" title="Force replace, delete and then re-create the resource"></a>Force replace, delete and then re-create the resource</h1><p>kubectl replace –force -f ./pod.json<br>convert命令： 不同的版本之间转换配置文件</p>
<h1 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h1><p>kubectl convert -f FILENAME</p>
<h1 id="Convert-‘pod-yaml’-to-latest-version-and-print-to-stdout"><a href="#Convert-‘pod-yaml’-to-latest-version-and-print-to-stdout" class="headerlink" title="Convert ‘pod.yaml’ to latest version and print to stdout."></a>Convert ‘pod.yaml’ to latest version and print to stdout.</h1><p>kubectl convert -f pod.yaml</p>
<h1 id="Convert-the-live-state-of-the-resource-specified-by-‘pod-yaml’-to-the-latest-version"><a href="#Convert-the-live-state-of-the-resource-specified-by-‘pod-yaml’-to-the-latest-version" class="headerlink" title="Convert the live state of the resource specified by ‘pod.yaml’ to the latest version"></a>Convert the live state of the resource specified by ‘pod.yaml’ to the latest version</h1><h1 id="and-print-to-stdout-in-json-format"><a href="#and-print-to-stdout-in-json-format" class="headerlink" title="and print to stdout in json format."></a>and print to stdout in json format.</h1><p>kubectl convert -f pod.yaml –local -o json</p>
<h1 id="Convert-all-files-under-current-directory-to-latest-version-and-create-them-all"><a href="#Convert-all-files-under-current-directory-to-latest-version-and-create-them-all" class="headerlink" title="Convert all files under current directory to latest version and create them all."></a>Convert all files under current directory to latest version and create them all.</h1><p>kubectl convert -f . | kubectl create -f -</p>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
  </entry>
  <entry>
    <title>Shell脚本安装lnmp</title>
    <url>/2021/07/11/Shell%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85lnmp/</url>
    <content><![CDATA[<h2 id="复制脚本在服务器执行即可安装：curl-o-lnmp-sh-http-103-224-249-63-lnmp-sh-amp-amp-bash-lnmp-sh"><a href="#复制脚本在服务器执行即可安装：curl-o-lnmp-sh-http-103-224-249-63-lnmp-sh-amp-amp-bash-lnmp-sh" class="headerlink" title="复制脚本在服务器执行即可安装：curl -o lnmp.sh http://103.224.249.63/lnmp.sh &amp;&amp; bash lnmp.sh"></a>复制脚本在服务器执行即可安装：curl -o lnmp.sh <a href="http://103.224.249.63/lnmp.sh" target="_blank" rel="noopener">http://103.224.249.63/lnmp.sh</a> &amp;&amp; bash lnmp.sh</h2><a id="more"></a>

<h3 id="本脚本目前支持指定版本的nginx-mysql-php的安装，脚本有待优化。"><a href="#本脚本目前支持指定版本的nginx-mysql-php的安装，脚本有待优化。" class="headerlink" title="本脚本目前支持指定版本的nginx+mysql+php的安装，脚本有待优化。"></a>本脚本目前支持指定版本的nginx+mysql+php的安装，脚本有待优化。</h3><h2 id="目前我发现有较好的处理脚本可学习参考：-https-lnmp-org-download-html"><a href="#目前我发现有较好的处理脚本可学习参考：-https-lnmp-org-download-html" class="headerlink" title="目前我发现有较好的处理脚本可学习参考： https://lnmp.org/download.html"></a>目前我发现有较好的处理脚本可学习参考： <a href="https://lnmp.org/download.html" target="_blank" rel="noopener">https://lnmp.org/download.html</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/env bash</span></span><br><span class="line"></span><br><span class="line">sed -e <span class="string">'s|^mirrorlist=|#mirrorlist=|g'</span> \</span><br><span class="line">         -e <span class="string">'s|^#baseurl=http://mirror.centos.org|baseurl=https://opentuna.cn|g'</span> \</span><br><span class="line">         -i.bak \</span><br><span class="line">         /etc/yum.repos.d/CentOS-*.repo</span><br><span class="line">		 </span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">yum install -y apr* autoconf automake bison bzip2 bzip2* cloog-ppl compat* cpp curl curl-devel fontconfig fontconfig-devel freetype freetype* freetype-devel gcc gcc-c++ gtk+-devel gd gettext gettext-devel glibc kernel kernel-headers keyutils keyutils-libs-devel krb5-devel libcom_err-devel libpng libpng-devel libjpeg* libsepol-devel libselinux-devel libstdc++-devel libtool* libgomp libxml2 libxml2-devel libXpm* libxml* libtiff libtiff* make mpfr ncurses* ntp openssl openssl-devel patch pcre-devel perl php-common php-gd policycoreutils telnet t1lib t1lib* nasm nasm* wget zlib-devel net-tools</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">`wget -P /usr/<span class="built_in">local</span>/src/ http://103.224.249.63/lanmp/lnmp.tar.gz`</span><br><span class="line">tar -zxvf lnmp.tar.gz </span><br><span class="line">way=/usr/<span class="built_in">local</span>/src/lnmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install</span></span>() &#123;</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">		make 1&gt;/dev/null</span><br><span class="line">		<span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">				make install 1&gt;/dev/null</span><br><span class="line">				<span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">					<span class="built_in">echo</span> <span class="string">"make install ERROR,exit..."</span>;<span class="built_in">exit</span> 1</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="built_in">cd</span> -</span><br><span class="line">				<span class="keyword">fi</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"make install ERROR,exit..."</span>;<span class="built_in">exit</span> 1</span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"make install ERROR,exit..."</span>;<span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mysql</span></span>() &#123;</span><br><span class="line"><span class="comment">#安装cmake</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$way</span> ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">cd</span> <span class="variable">$way</span></span><br><span class="line">	tar zxvf cmake-2.8.12.2.tar.gz</span><br><span class="line">	<span class="built_in">cd</span> cmake-2.8.12.2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$way</span>不存在！"</span>;<span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">./configure 1&gt;/dev/null</span><br><span class="line">install</span><br><span class="line"><span class="comment">#安装mysql</span></span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/boost</span><br><span class="line">cp boost_1_59_0.tar.gz /usr/<span class="built_in">local</span>/boost</span><br><span class="line">groupadd mysql <span class="comment">#添加mysql组</span></span><br><span class="line">useradd -g mysql mysql -s /bin/<span class="literal">false</span> <span class="comment">#创建用户mysql并加入到mysql组，不允许mysql用户直接登录系统</span></span><br><span class="line">mkdir -p /data/mysql <span class="comment">#创建MySQL数据库存放目录</span></span><br><span class="line">chown -R mysql:mysql /data/mysql <span class="comment">#设置MySQL数据库存放目录权限</span></span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/mysql <span class="comment">#创建MySQL安装目录</span></span><br><span class="line">tar zxvf mysql-5.7.27.tar.gz <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> mysql-5.7.27 <span class="comment">#进入目录</span></span><br><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql -DMYSQL_DATADIR=/data/mysql -DWITH_INNOBASE_STORAGE_ENGINE=1 -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EMBEDDED_SERVER=OFF -DWITH_BOOST=/usr/<span class="built_in">local</span>/boost 1&gt;/dev/null</span><br><span class="line">install</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">./bin/mysqld --user=mysql --initialize --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/data/mysql <span class="comment">#生成mysql系统数据库</span></span><br><span class="line">`wget -P /usr/<span class="built_in">local</span>/mysql/ http://103.224.249.63/my.cnf`</span><br><span class="line">ln -fs /usr/<span class="built_in">local</span>/mysql/my.cnf /etc/my.cnf <span class="comment">#添加到/etc目录的软连接</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server /etc/rc.d/init.d/mysqld <span class="comment">#把Mysql加入系统启动</span></span><br><span class="line">chmod 755 /etc/init.d/mysqld <span class="comment">#增加执行权限</span></span><br><span class="line">chkconfig mysqld on <span class="comment">#加入开机启动</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/rc.d/init.d/mysqld</span><br><span class="line">basedir=/usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir=/data/mysql</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/mysql/bin"</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面这两行把myslq的库文件链接到系统默认的位置，这样你在编译类似PHP等软件时可以不用指定mysql的库文件地址。</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/mysql/lib/ /usr/lib/mysql</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/mysql/include/mysql /usr/include/mysql</span><br><span class="line">mkdir -p /var/lib/mysql <span class="comment">#创建目录</span></span><br><span class="line">ln -s /tmp/mysql.sock /var/lib/mysql/mysql.sock <span class="comment">#添加软链接</span></span><br><span class="line">service mysqld start</span><br><span class="line">[ $? -eq 0 ]&amp;&amp;<span class="built_in">echo</span> <span class="string">"mysql安装成功。"</span>||<span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">nginx</span></span>() &#123;</span><br><span class="line"><span class="comment">#安装pcre zlib</span></span><br><span class="line">array=(pcre-8.43 zlib-1.2.11)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">cd</span> <span class="variable">$way</span></span><br><span class="line">	tar zxvf <span class="variable">$&#123;array[$i]&#125;</span>.tar.gz</span><br><span class="line">	<span class="built_in">cd</span> <span class="variable">$&#123;array[$i]&#125;</span></span><br><span class="line">	./configure --prefix=/usr/<span class="built_in">local</span>/<span class="variable">$&#123;array[$i]&#125;</span></span><br><span class="line">	install</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装openssl</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$way</span></span><br><span class="line">tar zxvf openssl-1.1.0l.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssl-1.1.0l</span><br><span class="line">./config --prefix=/usr/<span class="built_in">local</span>/openssl-1.1.0l</span><br><span class="line">install</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装nginx</span></span><br><span class="line">groupadd www</span><br><span class="line">useradd -g www www -s /bin/<span class="literal">false</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$way</span></span><br><span class="line">tar zxvf nginx-1.16.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.16.1</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --without-http_memcached_module --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-openssl=/usr/<span class="built_in">local</span>/src/lnmp/openssl-1.1.0l --with-zlib=/usr/<span class="built_in">local</span>/src/lnmp/zlib-1.2.11 --with-pcre=/usr/<span class="built_in">local</span>/src/lnmp/pcre-8.43</span><br><span class="line"></span><br><span class="line">install</span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line">`wget -P /etc/rc.d/init.d/ http://103.224.249.63/nginx`</span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line">chmod 775 /etc/rc.d/init.d/nginx</span><br><span class="line"></span><br><span class="line">chkconfig nginx on</span><br><span class="line">service nginx restart</span><br><span class="line">[ $? -eq 0 ]&amp;&amp;<span class="built_in">echo</span> <span class="string">"nginx安装成功。"</span>||<span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">php</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">tar zxvf php-7.1.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> php-7.1.2</span><br><span class="line"></span><br><span class="line">yum install -y  zlib zlib-devel pcre pcre-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php --with-config-file-path=/usr/<span class="built_in">local</span>/php/etc --with-mysqli=/usr/<span class="built_in">local</span>/mysql/bin/mysql_config --with-mysql-sock=/tmp/mysql.sock --with-pdo-mysql=/usr/<span class="built_in">local</span>/mysql --<span class="built_in">enable</span>-mbstring --with-openssl --<span class="built_in">enable</span>-ftp --with-gd --with-jpeg-dir=/usr --with-png-dir=/usr  --with-pear --<span class="built_in">enable</span>-sockets --with-freetype-dir=/usr --with-zlib --with-libxml-dir=/usr --with-xmlrpc --<span class="built_in">enable</span>-zip --<span class="built_in">enable</span>-fpm --<span class="built_in">enable</span>-xml --<span class="built_in">enable</span>-sockets --with-gd --with-zlib --with-iconv --<span class="built_in">enable</span>-zip --with-freetype-dir=/usr/lib/ --<span class="built_in">enable</span>-soap --<span class="built_in">enable</span>-pcntl --<span class="built_in">enable</span>-cli --with-curl</span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line">install</span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> php-7.1.2</span><br><span class="line">cp php.ini-production /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line">rm -rf /etc/php.ini</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/php/etc/php.ini /etc/php.ini</span><br><span class="line">cp /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf.default /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf /etc/php-fpm.conf</span><br><span class="line">sed -i <span class="string">'/^;pid =/cpid = run/php-fpm.pid'</span> /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf</span><br><span class="line">cp /usr/<span class="built_in">local</span>/php/etc/php-fpm.d/www.conf.default /usr/<span class="built_in">local</span>/php/etc/php-fpm.d/www.conf</span><br><span class="line">sed -i <span class="string">'/^user =/cuser = www'</span> /usr/<span class="built_in">local</span>/php/etc/php-fpm.d/www.conf</span><br><span class="line">sed -i <span class="string">'/^group =/cgroup = www'</span> /usr/<span class="built_in">local</span>/php/etc/php-fpm.d/www.conf</span><br><span class="line">cp /usr/<span class="built_in">local</span>/src/lnmp/php-7.1.2/sapi/fpm/init.d.php-fpm /etc/rc.d/init.d/php-fpm</span><br><span class="line">chmod +x /etc/rc.d/init.d/php-fpm</span><br><span class="line">chkconfig php-fpm on</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"zend_extension=opcache.so"</span> &gt;&gt; /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line">yes|rm -rf /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">`wget -P /usr/<span class="built_in">local</span>/nginx/conf/ http://103.224.249.63/nginx.conf`</span><br><span class="line">service nginx restart</span><br><span class="line">service php-fpm start</span><br><span class="line">[ $? -eq 0 ]&amp;&amp;<span class="built_in">echo</span> <span class="string">"php安装成功。"</span>||<span class="built_in">exit</span></span><br><span class="line">ip=`ifconfig ens33 | grep inet  | grep netmask |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">mv /usr/<span class="built_in">local</span>/nginx/html/index.html /usr/<span class="built_in">local</span>/nginx/html/index.php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;?php phpinfo();?&gt;"</span> &gt; /usr/<span class="built_in">local</span>/nginx/html/index.php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请问访问该网站测试环境：http://<span class="variable">$&#123;ip&#125;</span>/index.php"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql</span><br><span class="line">nginx</span><br><span class="line">php</span><br><span class="line"></span><br><span class="line">service firewalld status</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">	kou=(80 3306 22)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!kou[@]&#125;</span></span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">                firewall-cmd --permanent --zone=public --add-port=<span class="variable">$&#123;kou[$i]&#125;</span>/tcp</span><br><span class="line">                firewall-cmd --reload</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span> &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>kvm虚拟vcpu亲缘性绑定脚本</title>
    <url>/2021/04/23/kvm%E8%99%9A%E6%8B%9Fvcpu%E4%BA%B2%E7%BC%98%E6%80%A7%E7%BB%91%E5%AE%9A%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="vcpupin命令设置虚拟机某个vcpu在某个固定cpu上运行"><a href="#vcpupin命令设置虚拟机某个vcpu在某个固定cpu上运行" class="headerlink" title="vcpupin命令设置虚拟机某个vcpu在某个固定cpu上运行"></a>vcpupin命令设置虚拟机某个vcpu在某个固定cpu上运行</h2><a id="more"></a>

<h3 id="进程的处理器亲和性和VCPU绑定"><a href="#进程的处理器亲和性和VCPU绑定" class="headerlink" title="进程的处理器亲和性和VCPU绑定"></a>进程的处理器亲和性和VCPU绑定</h3><pre><code>什么是进程亲和性：简单的一句话就是我这个Linux进程到底可以在哪几个cpu上做负载均衡。
KVM虚拟机是一个普通的linux进程，vcpu是一个线程，我们可以在宿主机上将vcpu线程对应的tid绑定到指定的cpu上。</code></pre><p>应用场景<br>用户希望把虚拟机的VCPU绑定在特定物理CPU上，VCPU只在绑定的物理CPU上调度，达到隔离VCPU并提升虚拟机性能的目的。如果没有作VCPU绑定，则虚拟机的VCPU可以在所有物理CPU上调度。<br>绑定vcpu到指定的cpu上，的确会提高性能，因为在vcpu的线程在物理cpu做负载均衡的时候，会有一些必要的数据结构初始化（vmlaunch）相对于VM-Entry来说是比较奢侈的，<br>加上cache的命中，性能必然会有所提高，但破坏了负载均衡。当绑定在同一cpu上的两个vcpu同时高负载的时候，性能就会大打折扣，而其他的cpu也没有得到充分的利用。</p>
<pre><code>在KVM环境中，一般并不推荐手动设置qemu进程的处理器亲和性来绑定vCPU，</code></pre><p>但是，在非常了解系统硬件架构的基础上，根据实际应用的需求，可以将其绑定到特定的CPU上，从而提高客户机中的CPU执行效率或实现CPU资源独享的隔离性</p>
<p>Taskset是以task（也就是虚拟机）为单位，也就是以虚拟机上的所有cpu为一个单位，与物理机上的cpu进行绑定，<br>它不能指定虚拟机上的某个vcpu与物理机上某个物理cpu进行绑定，其粒度较大。</p>
<p>vcpupin命令就可以单独把虚拟机上的vcpu与物理机上的物理cpu进行绑定。<br>比如vm1和vm2都有3个vcpu（core），物理机有8个cpu（8个core，假如每个core一个线程），taskset能做到把vm2的3个vcpu同时绑定到一个或者多个cpu上，<br>但vcpupin能把vm1的每个vcpu与每个cpu进行绑定。</p>
<p><img src="/images/20150430153219576.png" alt="blog图片"></p>
<p>两种方案都是同样的，但是有细微的调整，第一个使用了数组调用变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">num=`virsh list |tr -d <span class="string">'a-zA-Z-'</span>|awk <span class="string">'&#123;$1=null;print $0&#125;'</span>|grep -v <span class="string">"^$"</span>|wc -l` </span><br><span class="line">he=`cat /proc/cpuinfo| grep <span class="string">"processor"</span>| wc -l`</span><br><span class="line">inum=`expr <span class="variable">$num</span> - 1`</span><br><span class="line">henum1=`expr <span class="variable">$he</span> / 2 - 1`</span><br><span class="line">henum2=`expr <span class="variable">$he</span> / 2`</span><br><span class="line">henum3=`expr <span class="variable">$he</span> - 1`</span><br><span class="line">xiaoji=(`virsh list |tr -d <span class="string">'a-zA-Z-'</span>|awk <span class="string">'&#123;$1=null;print $0&#125;'</span>|grep -v <span class="string">"^$"</span>`)</span><br><span class="line"><span class="keyword">for</span> ((i=0;i&lt;=<span class="variable">$inum</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> [ `expr <span class="variable">$i</span> / 2` -eq 0 ];<span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> ((a=0;a&lt;=1;a++))</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">			virsh vcpupin <span class="variable">$&#123;xiaoji[$i]&#125;</span> <span class="variable">$a</span> 0-<span class="variable">$henum1</span></span><br><span class="line">		<span class="keyword">done</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">for</span> ((a=0;a&lt;=1;a++))</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">			virsh vcpupin <span class="variable">$&#123;xiaoji[$i]&#125;</span> <span class="variable">$a</span> <span class="variable">$henum2</span>-<span class="variable">$henum3</span></span><br><span class="line">		<span class="keyword">done</span>		</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">num=`virsh list |tr -d <span class="string">'a-zA-Z-'</span>|awk <span class="string">'&#123;$1=null;print $0&#125;'</span>|grep -v <span class="string">"^$"</span>|wc -l` </span><br><span class="line">he=`cat /procuinfo| grep <span class="string">"processor"</span>| wc -l`</span><br><span class="line">henum1=`expr <span class="variable">$he</span> / 2 - 1`</span><br><span class="line">henum2=`expr <span class="variable">$he</span> / 2`</span><br><span class="line">henum3=`expr <span class="variable">$he</span> - 1`</span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=<span class="variable">$num</span>;i++));<span class="keyword">do</span></span><br><span class="line">		xiaoji=`virsh list |tr -d <span class="string">'a-zA-Z-'</span>|awk <span class="string">'&#123;$1=null;print $0&#125;'</span>|grep -v <span class="string">"^$"</span>|sed -n <span class="variable">$&#123;i&#125;</span>p`</span><br><span class="line">	<span class="keyword">if</span> [ `expr <span class="variable">$i</span> % 2` -eq 0 ];<span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> ((a=0;a&lt;=1;a++));<span class="keyword">do</span></span><br><span class="line">		<span class="built_in">echo</span> virsh vcpupin <span class="variable">$xiaoji</span> <span class="variable">$a</span> 0-<span class="variable">$henum1</span></span><br><span class="line">		<span class="keyword">done</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">for</span> ((a=0;a&lt;=1;a++));<span class="keyword">do</span></span><br><span class="line">		<span class="built_in">echo</span>  virsh vcpupin <span class="variable">$xiaoji</span> <span class="variable">$a</span> <span class="variable">$henum2</span>-<span class="variable">$henum3</span></span><br><span class="line">		<span class="keyword">done</span>		</span><br><span class="line">	<span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>这个是脚本的测试<br><img src="/images/2021423.png" alt="blog图片"></p>
<p>numastat -c qemu-kvm<br>检查绑定情况</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>Shell脚本教程</title>
    <url>/2021/01/22/Shell%E8%84%9A%E6%9C%AC%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<hr>
<h1 id="教程一共8章："><a href="#教程一共8章：" class="headerlink" title="教程一共8章："></a>教程一共8章：</h1><p>01_SHELL编程前奏_小工具<br>02_SHELL编程之变量定义<br>03_SHELL编程之条件判断和流程控制<br>04_SHELL编程之循环语句_2<br>05_SHELL编程之嵌套循环+随机数及综合案例<br>06_SHELL编程之CASE语句+函数+正则<br>07_SHELL编程之文本处理工具sed<br>08_SHELL编程之文本处理工具awk</p>
<a id="more"></a>
<hr>
<h1 id="01-SHELL编程前奏-小工具"><a href="#01-SHELL编程前奏-小工具" class="headerlink" title="01_SHELL编程前奏_小工具"></a>01_SHELL编程前奏_小工具</h1><h1 id="本节课程目标"><a href="#本节课程目标" class="headerlink" title="本节课程目标"></a>本节课程目标</h1><ul>
<li>了解shell中的通配符</li>
<li>熟悉grep、cut、sort等小工具和shell中的通配符的使用</li>
</ul>
<h1 id="一、文本处理工具"><a href="#一、文本处理工具" class="headerlink" title="一、文本处理工具"></a>一、文本处理工具</h1><h2 id="1-grep工具"><a href="#1-grep工具" class="headerlink" title="1. ==grep工具=="></a>1. ==grep工具==</h2><blockquote>
<p>grep是<strong>==行==</strong>过滤工具；用于根据关键字进行行过滤</p>
</blockquote>
<h3 id="语法和选项"><a href="#语法和选项" class="headerlink" title="语法和选项"></a>语法和选项</h3><p><strong>语法：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep [选项] '关键字' 文件名</span></span><br></pre></td></tr></table></figure>

<p><strong>常见选项：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">OPTIONS:</span><br><span class="line">    <span class="literal">-i</span>: 不区分大小写</span><br><span class="line">    <span class="literal">-v</span>: 查找不包含指定内容的行,反向选择</span><br><span class="line">    <span class="literal">-w</span>: 按单词搜索</span><br><span class="line">    <span class="literal">-o</span>: 打印匹配关键字</span><br><span class="line">    <span class="literal">-c</span>: 统计匹配到的行数</span><br><span class="line">    <span class="literal">-n</span>: 显示行号</span><br><span class="line">    <span class="literal">-r</span>: 逐层遍历目录查找</span><br><span class="line">    <span class="literal">-A</span>: 显示匹配行及后面多少行	</span><br><span class="line">    <span class="literal">-B</span>: 显示匹配行及前面多少行</span><br><span class="line">    <span class="literal">-C</span>: 显示匹配行前后多少行</span><br><span class="line">    <span class="literal">-l</span>：只列出匹配的文件名</span><br><span class="line">    <span class="literal">-L</span>：列出不匹配的文件名</span><br><span class="line">    <span class="literal">-e</span>: 使用正则匹配</span><br><span class="line">    <span class="literal">-E</span>:使用扩展正则匹配</span><br><span class="line">    ^key:以关键字开头</span><br><span class="line">    key<span class="variable">$</span>:以关键字结尾</span><br><span class="line">    ^<span class="variable">$</span>:匹配空行</span><br><span class="line">    -<span class="literal">-color</span>=auto ：可以将找到的关键词部分加上颜色的显示</span><br></pre></td></tr></table></figure>

<p><strong>颜色显示（别名设置）：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">临时设置：</span><br><span class="line"><span class="comment"># alias grep='grep --color=auto'			//只针对当前终端和当前用户生效</span></span><br><span class="line"></span><br><span class="line">永久设置：</span><br><span class="line"><span class="number">1</span>）全局（针对所有用户生效）</span><br><span class="line">vim /etc/bashrc</span><br><span class="line">alias grep=<span class="string">'grep --color=auto'</span></span><br><span class="line">source /etc/bashrc</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）局部（针对具体的某个用户）</span><br><span class="line">vim ~/.bashrc</span><br><span class="line">alias grep=<span class="string">'grep --color=auto'</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<p><strong>举例说明：</strong></p>
<p>==说明：不要直接使用/etc/passwd文件，将其拷贝到/tmp下做实验！==</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep -i root passwd						忽略大小写匹配包含root的行</span></span><br><span class="line"><span class="comment"># grep -w ftp passwd 						精确匹配ftp单词</span></span><br><span class="line"><span class="comment"># grep -w hello passwd 						精确匹配hello单词;自己添加包含hello的行到文件</span></span><br><span class="line"><span class="comment"># grep -wo ftp passwd 						打印匹配到的关键字ftp</span></span><br><span class="line"><span class="comment"># grep -n root passwd 						打印匹配到root关键字的行好</span></span><br><span class="line"><span class="comment"># grep -ni root passwd 						忽略大小写匹配统计包含关键字root的行</span></span><br><span class="line"><span class="comment"># grep -nic root passwd						忽略大小写匹配统计包含关键字root的行数</span></span><br><span class="line"><span class="comment"># grep -i ^root passwd 						忽略大小写匹配以root开头的行</span></span><br><span class="line"><span class="comment"># grep bash$ passwd 							匹配以bash结尾的行</span></span><br><span class="line"><span class="comment"># grep -n ^$ passwd 							匹配空行并打印行号</span></span><br><span class="line"><span class="comment"># grep ^# /etc/vsftpd/vsftpd.conf		匹配以#号开头的行</span></span><br><span class="line"><span class="comment"># grep -v ^# /etc/vsftpd/vsftpd.conf	匹配不以#号开头的行</span></span><br><span class="line"><span class="comment"># grep -A 5 mail passwd 				 	匹配包含mail关键字及其后5行</span></span><br><span class="line"><span class="comment"># grep -B 5 mail passwd 				 	匹配包含mail关键字及其前5行</span></span><br><span class="line"><span class="comment"># grep -C 5 mail passwd 					匹配包含mail关键字及其前后5行</span></span><br></pre></td></tr></table></figure>

<h2 id="2-cut工具"><a href="#2-cut工具" class="headerlink" title="2. ==cut工具=="></a>2. ==cut工具==</h2><blockquote>
<p>cut是<strong>==列==</strong>截取工具，用于列的截取</p>
</blockquote>
<h3 id="语法和选项-1"><a href="#语法和选项-1" class="headerlink" title="语法和选项"></a>语法和选项</h3><p><strong>语法：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cut 选项  文件名</span></span><br></pre></td></tr></table></figure>

<p><strong>常见选项：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-c</span>:	以字符为单位进行分割,截取</span><br><span class="line"><span class="literal">-d</span>:	自定义分隔符，默认为制表符\t</span><br><span class="line"><span class="operator">-f</span>:	与<span class="literal">-d</span>一起使用，指定截取哪个区域</span><br></pre></td></tr></table></figure>

<p><strong>举例说明:</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cut -d: -f1 1.txt 			以:冒号分割，截取第1列内容</span></span><br><span class="line"><span class="comment"># cut -d: -f1,6,7 1.txt 	以:冒号分割，截取第1,6,7列内容</span></span><br><span class="line"><span class="comment"># cut -c4 1.txt 				截取文件中每行第4个字符</span></span><br><span class="line"><span class="comment"># cut -c1-4 1.txt 			截取文件中每行的1-4个字符</span></span><br><span class="line"><span class="comment"># cut -c4-10 1.txt 			截取文件中每行的4-10个字符</span></span><br><span class="line"><span class="comment"># cut -c5- 1.txt 				从第5个字符开始截取后面所有字符</span></span><br></pre></td></tr></table></figure>

<p><strong>课堂练习：</strong><br>用小工具列出你当系统的运行级别。5/3</p>
<ol>
<li>如何查看系统运行级别<ul>
<li>命令<code>runlevel</code></li>
<li>文件<code>/etc/inittab</code></li>
</ul>
</li>
<li>如何过滤运行级别</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">runlevel |cut <span class="literal">-c3</span></span><br><span class="line">runlevel | cut <span class="literal">-d</span> <span class="string">' '</span> <span class="literal">-f2</span></span><br><span class="line">grep <span class="literal">-v</span> <span class="string">'^#'</span> /etc/inittab | cut <span class="literal">-d</span>: <span class="literal">-f2</span></span><br><span class="line">grep <span class="string">'^id'</span> /etc/inittab |cut <span class="literal">-d</span>: <span class="literal">-f2</span></span><br><span class="line">grep <span class="string">"initdefault:<span class="variable">$</span>"</span> /etc/inittab | cut <span class="literal">-c4</span></span><br><span class="line">grep <span class="literal">-v</span> ^<span class="comment"># /etc/inittab |cut -c4</span></span><br><span class="line">grep <span class="string">'id:'</span> /etc/inittab |cut <span class="literal">-d</span>: <span class="literal">-f2</span></span><br><span class="line">cut <span class="literal">-d</span><span class="string">':'</span> <span class="literal">-f2</span> /etc/inittab |grep <span class="literal">-v</span> ^<span class="comment">#</span></span><br><span class="line">cut <span class="literal">-c4</span> /etc/inittab |tail <span class="literal">-1</span></span><br><span class="line">cut <span class="literal">-d</span>: <span class="literal">-f2</span> /etc/inittab |tail <span class="literal">-1</span></span><br></pre></td></tr></table></figure>



<h2 id="3-sort工具"><a href="#3-sort工具" class="headerlink" title="3. sort工具"></a>3. sort工具</h2><blockquote>
<p>sort工具用于排序;它将文件的每一行作为一个单位，从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p>
</blockquote>
<h4 id="语法和选项-2"><a href="#语法和选项-2" class="headerlink" title="语法和选项"></a>语法和选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-u</span> ：去除重复行</span><br><span class="line"><span class="literal">-r</span> ：降序排列，默认是升序</span><br><span class="line"><span class="literal">-o</span> : 将排序结果输出到文件中,类似重定向符号&gt;</span><br><span class="line"><span class="literal">-n</span> ：以数字排序，默认是按字符排序</span><br><span class="line"><span class="literal">-t</span> ：分隔符</span><br><span class="line"><span class="literal">-k</span> ：第N列</span><br><span class="line"><span class="literal">-b</span> ：忽略前导空格。</span><br><span class="line"><span class="literal">-R</span> ：随机排序，每次运行的结果均不同</span><br></pre></td></tr></table></figure>

<p><strong>举例说明</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sort -n -t: -k3 1.txt 			按照用户的uid进行升序排列</span></span><br><span class="line"><span class="comment"># sort -nr -t: -k3 1.txt 			按照用户的uid进行降序排列</span></span><br><span class="line"><span class="comment"># sort -n 2.txt 						按照数字排序</span></span><br><span class="line"><span class="comment"># sort -nu 2.txt 						按照数字排序并且去重</span></span><br><span class="line"><span class="comment"># sort -nr 2.txt </span></span><br><span class="line"><span class="comment"># sort -nru 2.txt </span></span><br><span class="line"><span class="comment"># sort -nru 2.txt </span></span><br><span class="line"><span class="comment"># sort -n 2.txt -o 3.txt 			按照数字排序并将结果重定向到文件</span></span><br><span class="line"><span class="comment"># sort -R 2.txt </span></span><br><span class="line"><span class="comment"># sort -u 2.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="4-uniq工具"><a href="#4-uniq工具" class="headerlink" title="4.uniq工具"></a>4.uniq工具</h2><blockquote>
<p>uniq用于去除<strong>==连续==</strong>的<strong>==重复==</strong>行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">常见选项：</span><br><span class="line"><span class="literal">-i</span>: 忽略大小写</span><br><span class="line"><span class="literal">-c</span>: 统计重复行次数</span><br><span class="line"><span class="literal">-d</span>:只显示重复行</span><br><span class="line"></span><br><span class="line">举例说明：</span><br><span class="line"><span class="comment"># uniq 2.txt </span></span><br><span class="line"><span class="comment"># uniq -d 2.txt </span></span><br><span class="line"><span class="comment"># uniq -dc 2.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="5-tee工具"><a href="#5-tee工具" class="headerlink" title="5.tee工具"></a>5.tee工具</h2><blockquote>
<p>tee工具是从标准输入读取并写入到标准输出和文件，即：双向覆盖重定向（屏幕输出|文本输入）</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">选项：</span><br><span class="line"><span class="literal">-a</span> 双向追加重定向</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo hello world</span></span><br><span class="line"><span class="comment"># echo hello world|tee file1</span></span><br><span class="line"><span class="comment"># cat file1 </span></span><br><span class="line"><span class="comment"># echo 999|tee -a file1</span></span><br><span class="line"><span class="comment"># cat file1</span></span><br></pre></td></tr></table></figure>

<h2 id="6-diff工具"><a href="#6-diff工具" class="headerlink" title="6.diff工具"></a>6.diff工具</h2><blockquote>
<p>diff工具用于逐行比较文件的不同</p>
</blockquote>
<p>注意：diff描述两个文件不同的方式是告诉我们==怎样改变第一个==文件之后==与第二个文件匹配==。</p>
<h3 id="语法和选项-3"><a href="#语法和选项-3" class="headerlink" title="语法和选项"></a>语法和选项</h3><p><strong>语法：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">diff [选项] 文件<span class="number">1</span> 文件<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><strong>常用选项：</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td>不检查空格</td>
<td></td>
</tr>
<tr>
<td>-B</td>
<td>不检查空白行</td>
<td></td>
</tr>
<tr>
<td>-i</td>
<td>不检查大小写</td>
<td></td>
</tr>
<tr>
<td>-w</td>
<td>忽略所有的空格</td>
<td></td>
</tr>
<tr>
<td>–normal</td>
<td>正常格式显示(默认)</td>
<td></td>
</tr>
<tr>
<td>-c</td>
<td>上下文格式显示</td>
<td></td>
</tr>
<tr>
<td>-u</td>
<td>合并格式显示</td>
<td></td>
</tr>
</tbody></table>
<p><strong>举例说明：</strong></p>
<ul>
<li>比较两个==普通文件==异同，文件准备：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># cat file1</span></span><br><span class="line">aaaa</span><br><span class="line"><span class="number">111</span></span><br><span class="line">hello world</span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="number">333</span></span><br><span class="line">bbb</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment">#</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># cat file2</span></span><br><span class="line">aaa</span><br><span class="line">hello</span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">222</span></span><br><span class="line">bbb</span><br><span class="line"><span class="number">333</span></span><br><span class="line">world</span><br></pre></td></tr></table></figure>

<p>1）正常显示</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">diff目的：file1如何改变才能和file2匹配</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># diff file1 file2</span></span><br><span class="line"><span class="number">1</span>c1,<span class="number">2</span>					第一个文件的第<span class="number">1</span>行需要改变(c=change)才能和第二个文件的第<span class="number">1</span>到<span class="number">2</span>行匹配			</span><br><span class="line">&lt; aaaa				小于号<span class="string">"&lt;"</span>表示左边文件(file1)文件内容</span><br><span class="line">---					---表示分隔符</span><br><span class="line">&gt; aaa					大于号<span class="string">"&gt;"</span>表示右边文件(file2)文件内容</span><br><span class="line">&gt; hello</span><br><span class="line"><span class="number">3</span>d3					第一个文件的第<span class="number">3</span>行删除(d=delete)后才能和第二个文件的第<span class="number">3</span>行匹配</span><br><span class="line">&lt; hello world</span><br><span class="line"><span class="number">5</span>d4					第一个文件的第<span class="number">5</span>行删除后才能和第二个文件的第<span class="number">4</span>行匹配</span><br><span class="line">&lt; <span class="number">333</span></span><br><span class="line"><span class="number">6</span>a6,<span class="number">7</span>					第一个文件的第<span class="number">6</span>行增加(a=add)内容后才能和第二个文件的第<span class="number">6</span>到<span class="number">7</span>行匹配</span><br><span class="line">&gt; <span class="number">333</span>					需要增加的内容在第二个文件里是<span class="number">333</span>和world</span><br><span class="line">&gt; world</span><br></pre></td></tr></table></figure>

<p>2）上下文格式显示</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># diff -c file1 file2</span></span><br><span class="line">前两行主要列出需要比较的文件名和文件的时间戳；文件名前面的符号***表示file1，---表示file2</span><br><span class="line">*** file1       <span class="number">2019</span><span class="literal">-04</span><span class="literal">-16</span> <span class="number">16</span>:<span class="number">26</span>:<span class="number">05.748650262</span> +<span class="number">0800</span></span><br><span class="line">--- file2       <span class="number">2019</span><span class="literal">-04</span><span class="literal">-16</span> <span class="number">16</span>:<span class="number">26</span>:<span class="number">30.470646030</span> +<span class="number">0800</span></span><br><span class="line">***************	我是分隔符</span><br><span class="line">*** <span class="number">1</span>,<span class="number">6</span> ****		以***开头表示file1文件，<span class="number">1</span>,<span class="number">6</span>表示<span class="number">1</span>到<span class="number">6</span>行</span><br><span class="line">! aaaa				!表示该行需要修改才与第二个文件匹配</span><br><span class="line">  <span class="number">111</span></span><br><span class="line">- hello world		-表示需要删除该行才与第二个文件匹配</span><br><span class="line">  <span class="number">222</span></span><br><span class="line">- <span class="number">333</span>					-表示需要删除该行才与第二个文件匹配</span><br><span class="line">  bbb</span><br><span class="line">--- <span class="number">1</span>,<span class="number">7</span> ----		以---开头表示file2文件，<span class="number">1</span>,<span class="number">7</span>表示<span class="number">1</span>到<span class="number">7</span>行</span><br><span class="line">! aaa					表示第一个文件需要修改才与第二个文件匹配</span><br><span class="line">! hello				表示第一个文件需要修改才与第二个文件匹配</span><br><span class="line">  <span class="number">111</span></span><br><span class="line">  <span class="number">222</span></span><br><span class="line">  bbb</span><br><span class="line">+ <span class="number">333</span>					表示第一个文件需要加上该行才与第二个文件匹配</span><br><span class="line">+ world				表示第一个文件需要加上该行才与第二个文件匹配</span><br></pre></td></tr></table></figure>

<p>3）合并格式显示</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># diff -u file1 file2</span></span><br><span class="line">前两行主要列出需要比较的文件名和文件的时间戳；文件名前面的符号---表示file1，+++表示file2</span><br><span class="line">--- file1       <span class="number">2019</span><span class="literal">-04</span><span class="literal">-16</span> <span class="number">16</span>:<span class="number">26</span>:<span class="number">05.748650262</span> +<span class="number">0800</span></span><br><span class="line">+++ file2       <span class="number">2019</span><span class="literal">-04</span><span class="literal">-16</span> <span class="number">16</span>:<span class="number">26</span>:<span class="number">30.470646030</span> +<span class="number">0800</span></span><br><span class="line"><span class="selector-tag">@</span><span class="selector-tag">@</span> <span class="literal">-1</span>,<span class="number">6</span> +<span class="number">1</span>,<span class="number">7</span> <span class="selector-tag">@</span><span class="selector-tag">@</span></span><br><span class="line"><span class="literal">-aaaa</span></span><br><span class="line">+aaa</span><br><span class="line">+hello</span><br><span class="line"> <span class="number">111</span></span><br><span class="line"><span class="literal">-hello</span> world</span><br><span class="line"> <span class="number">222</span></span><br><span class="line"><span class="literal">-333</span></span><br><span class="line"> bbb</span><br><span class="line">+<span class="number">333</span></span><br><span class="line">+world</span><br></pre></td></tr></table></figure>

<ul>
<li>比较两个==目录不同==</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">默认情况下也会比较两个目录里相同文件的内容</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">tmp</span>]<span class="comment"># diff dir1 dir2</span></span><br><span class="line">diff dir1/file1 dir2/file1</span><br><span class="line"><span class="number">0</span>a1</span><br><span class="line">&gt; hello</span><br><span class="line">Only <span class="keyword">in</span> dir1: file3</span><br><span class="line">Only <span class="keyword">in</span> dir2: test1</span><br><span class="line">如果只需要比较两个目录里文件的不同，不需要进一步比较文件内容，需要加<span class="literal">-q</span>选项</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">tmp</span>]<span class="comment"># diff -q dir1 dir2</span></span><br><span class="line">Files dir1/file1 and dir2/file1 differ</span><br><span class="line">Only <span class="keyword">in</span> dir1: file3</span><br><span class="line">Only <span class="keyword">in</span> dir2: test1</span><br></pre></td></tr></table></figure>

<p><strong>其他小技巧：</strong></p>
<p>有时候我们需要以一个文件为标准，去修改其他文件，并且修改的地方较多时，我们可以通过打补丁的方式完成。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）先找出文件不同，然后输出到一个文件</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># diff -uN file1 file2 &gt; file.patch</span></span><br><span class="line"><span class="literal">-u</span>:上下文模式</span><br><span class="line"><span class="literal">-N</span>:将不存在的文件当作空文件</span><br><span class="line"><span class="number">2</span>）将不同内容打补丁到文件</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># patch file1 file.patch</span></span><br><span class="line">patching file file1</span><br><span class="line"><span class="number">3</span>）测试验证</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># diff file1 file2</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="7-paste工具"><a href="#7-paste工具" class="headerlink" title="7. paste工具"></a>7. paste工具</h2><blockquote>
<p>paste工具用于合并文件行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">常用选项：</span><br><span class="line"><span class="literal">-d</span>：自定义间隔符，默认是tab</span><br><span class="line"><span class="literal">-s</span>：串行处理，非并行</span><br></pre></td></tr></table></figure>

<h2 id="8-tr工具"><a href="#8-tr工具" class="headerlink" title="8. tr工具"></a>8. tr工具</h2><blockquote>
<p> tr用于字符转换，替换和删除；主要用于==删除文件中控制字符==或进行==字符转换==</p>
</blockquote>
<h3 id="语法和选项-4"><a href="#语法和选项-4" class="headerlink" title="语法和选项"></a>语法和选项</h3><p><strong>语法：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">用法<span class="number">1</span>：命令的执行结果交给tr处理，其中string1用于查询，string2用于转换处理</span><br><span class="line"></span><br><span class="line"> commands|tr  <span class="string">'string1'</span>  <span class="string">'string2'</span></span><br><span class="line"></span><br><span class="line">用法<span class="number">2</span>：tr处理的内容来自文件，记住要使用<span class="string">"&lt;"</span>标准输入</span><br><span class="line"></span><br><span class="line"> tr  <span class="string">'string1'</span>  <span class="string">'string2'</span> &lt; filename</span><br><span class="line"></span><br><span class="line">用法<span class="number">3</span>：匹配string1进行相应操作，如删除操作</span><br><span class="line"></span><br><span class="line"> tr [<span class="type">options</span>] <span class="string">'string1'</span> &lt; filename</span><br></pre></td></tr></table></figure>

<p><strong>常用选项：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-d</span> 删除字符串<span class="number">1</span>中所有输入字符。</span><br><span class="line"><span class="literal">-s</span> 删除所有重复出现字符序列，只保留第一个；即将重复出现字符串压缩为一个字符串</span><br></pre></td></tr></table></figure>

<p><strong>常匹配字符串：</strong></p>
<table>
<thead>
<tr>
<th>字符串</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>==a-z==或[:lower:]</td>
<td>匹配所有小写字母</td>
<td>所有大小写和数字[a-zA-Z0-9]</td>
</tr>
<tr>
<td>==A-Z==或[:upper:]</td>
<td>匹配所有大写字母</td>
<td></td>
</tr>
<tr>
<td>==0-9==或[:digit:]</td>
<td>匹配所有数字</td>
<td></td>
</tr>
<tr>
<td>[:alnum:]</td>
<td>匹配所有字母和数字</td>
<td></td>
</tr>
<tr>
<td>[:alpha:]</td>
<td>匹配所有字母</td>
<td></td>
</tr>
<tr>
<td>[:blank:]</td>
<td>所有水平空白</td>
<td></td>
</tr>
<tr>
<td>[:punct:]</td>
<td>匹配所有标点符号</td>
<td></td>
</tr>
<tr>
<td>[:space:]</td>
<td>所有水平或垂直的空格</td>
<td></td>
</tr>
<tr>
<td>[:cntrl:]</td>
<td>所有控制字符</td>
<td>\f Ctrl-L        走行换页<br/>\n Ctrl-J      换行</td>
</tr>
<tr>
<td>\r Ctrl-M        回车</td>
<td></td>
<td></td>
</tr>
<tr>
<td>\t Ctrl-I      tab键</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>举例说明：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">shell01</span>]<span class="comment"># cat 3.txt 	自己创建该文件用于测试</span></span><br><span class="line">ROOT:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:<span class="number">4</span>:<span class="number">7</span>:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:<span class="number">5</span>:<span class="number">0</span>:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:<span class="number">6</span>:<span class="number">0</span>:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:<span class="number">7</span>:<span class="number">0</span>:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:<span class="number">8</span>:<span class="number">12</span>:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">uucp:x:<span class="number">10</span>:<span class="number">14</span>:uucp:/var/spool/uucp:/sbin/nologin</span><br><span class="line">boss02:x:<span class="number">516</span>:<span class="number">511</span>::/home/boss02:/bin/bash</span><br><span class="line">vip:x:<span class="number">517</span>:<span class="number">517</span>::/home/vip:/bin/bash</span><br><span class="line">stu1:x:<span class="number">518</span>:<span class="number">518</span>::/home/stu1:/bin/bash</span><br><span class="line">mailnull:x:<span class="number">47</span>:<span class="number">47</span>::/var/spool/mqueue:/sbin/nologin</span><br><span class="line">smmsp:x:<span class="number">51</span>:<span class="number">51</span>::/var/spool/mqueue:/sbin/nologin</span><br><span class="line">aaaaaaaaaaaaaaaaaaaa</span><br><span class="line">bbbbbb111111122222222222233333333cccccccc</span><br><span class="line">hello world <span class="number">888</span></span><br><span class="line"><span class="number">666</span></span><br><span class="line"><span class="number">777</span></span><br><span class="line"><span class="number">999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tr -d '[:/]' &lt; 3.txt 				删除文件中的:和/</span></span><br><span class="line"><span class="comment"># cat 3.txt |tr -d '[:/]'			删除文件中的:和/</span></span><br><span class="line"><span class="comment"># tr '[0-9]' '@' &lt; 3.txt 			将文件中的数字替换为@符号</span></span><br><span class="line"><span class="comment"># tr '[a-z]' '[A-Z]' &lt; 3.txt 		将文件中的小写字母替换成大写字母</span></span><br><span class="line"><span class="comment"># tr -s '[a-z]' &lt; 3.txt 			匹配小写字母并将重复的压缩为一个</span></span><br><span class="line"><span class="comment"># tr -s '[a-z0-9]' &lt; 3.txt 		匹配小写字母和数字并将重复的压缩为一个</span></span><br><span class="line"><span class="comment"># tr -d '[:digit:]' &lt; 3.txt 		删除文件中的数字</span></span><br><span class="line"><span class="comment"># tr -d '[:blank:]' &lt; 3.txt 		删除水平空白</span></span><br><span class="line"><span class="comment"># tr -d '[:space:]' &lt; 3.txt 		删除所有水平和垂直空白</span></span><br></pre></td></tr></table></figure>

<h4 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h4><ol>
<li>使用小工具分别截取当前主机IP；截取NETMASK；截取广播地址；截取MAC地址</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ifconfig eth0|grep 'Bcast'|tr -d '[a-zA-Z ]'|cut -d: -f2,3,4</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span>:<span class="number">10.1</span>.<span class="number">1.255</span>:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="comment"># ifconfig eth0|grep 'Bcast'|tr -d '[a-zA-Z ]'|cut -d: -f2,3,4|tr ':' '\n'</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.255</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="comment"># ifconfig eth0|grep 'HWaddr'|cut -d: -f2-|cut -d' ' -f4</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0</span>C:<span class="number">29</span>:<span class="number">25</span>:AE:<span class="number">54</span></span><br><span class="line"><span class="comment"># ifconfig eth0|grep 'HW'|tr -s ' '|cut -d' ' -f5</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0</span>C:<span class="number">29</span>:B4:<span class="number">9</span>E:<span class="number">4</span>E</span><br><span class="line"></span><br><span class="line"><span class="comment"># ifconfig eth1|grep Bcast|cut -d: -f2|cut -d' ' -f1</span></span><br><span class="line"><span class="comment"># ifconfig eth1|grep Bcast|cut -d: -f2|tr -d '[ a-zA-Z]'</span></span><br><span class="line"><span class="comment"># ifconfig eth1|grep Bcast|tr -d '[:a-zA-Z]'|tr ' ' '@'|tr -s '@'|tr '@' '\n'|grep -v ^$</span></span><br><span class="line"><span class="comment"># ifconfig eth0|grep 'Bcast'|tr -d [:alpha:]|tr '[ :]' '\n'|grep -v ^$</span></span><br><span class="line"><span class="comment"># ifconfig eth1|grep HWaddr|cut -d ' ' -f11</span></span><br><span class="line"><span class="comment"># ifconfig eth0|grep HWaddr|tr -s ' '|cut -d' ' -f5</span></span><br><span class="line"><span class="comment"># ifconfig eth1|grep HWaddr|tr -s ' '|cut -d' ' -f5</span></span><br><span class="line"><span class="comment"># ifconfig eth0|grep 'Bcast'|tr -d 'a-zA-Z:'|tr ' ' '\n'|grep -v '^$'</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将系统中所有普通用户的用户名、密码和默认shell保存到一个文件中，要求用户名密码和默认shell之间用tab键分割</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep 'bash$' passwd |grep -v 'root'|cut -d: -f1,2,7|tr ':' '\t' |tee abc.txt</span></span><br></pre></td></tr></table></figure>

<h1 id="二、bash的特性"><a href="#二、bash的特性" class="headerlink" title="二、bash的特性"></a>二、bash的特性</h1><p>##1、命令和文件自动补全</p>
<p>Tab只能补全==命令和文件== （RHEL6/Centos6）</p>
<p>##2、常见的快捷键</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">^c   			终止前台运行的程序</span><br><span class="line">^z	  			将前台运行的程序挂起到后台</span><br><span class="line">^d   			退出 等价<span class="keyword">exit</span></span><br><span class="line">^l   			清屏 </span><br><span class="line">^a |home  	光标移到命令行的最前端</span><br><span class="line">^e |<span class="keyword">end</span>  	光标移到命令行的后端</span><br><span class="line">^u   			删除光标前所有字符</span><br><span class="line">^k   			删除光标后所有字符</span><br><span class="line">^r	 			搜索历史命令</span><br></pre></td></tr></table></figure>

<p>##3 、==常用的通配符（重点）==</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">*:	匹配<span class="number">0</span>或多个任意字符</span><br><span class="line">?:	匹配任意单个字符</span><br><span class="line">[<span class="type">list</span>]:	匹配[<span class="type">list</span>]中的任意单个字符,或者一组单个字符   [<span class="type">a</span>-<span class="type">z</span>]</span><br><span class="line">[!<span class="type">list</span>]: 匹配除list中的任意单个字符</span><br><span class="line">&#123;string1,string2,...&#125;：匹配string1,string2或更多字符串</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rm -f file*</span></span><br><span class="line"><span class="comment"># cp *.conf  /dir1</span></span><br><span class="line"><span class="comment"># touch file&#123;1..5&#125;</span></span><br></pre></td></tr></table></figure>

<p>##4、==bash中的引号（重点）==</p>
<ul>
<li>双引号””   :会把引号的内容当成整体来看待，允许通过$符号引用其他变量值</li>
<li>单引号’’     :会把引号的内容当成整体来看待，禁止引用其他变量值，shell中特殊符号都被视为普通字符</li>
<li>反撇号``  :反撇号和$()一样，引号或括号里的命令会优先执行，如果存在嵌套，反撇号不能用</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">dir1</span>]<span class="comment"># echo "$(hostname)"</span></span><br><span class="line">server</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">dir1</span>]<span class="comment"># echo '$(hostname)'</span></span><br><span class="line"><span class="variable">$</span>(hostname)</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">dir1</span>]<span class="comment"># echo "hello world"</span></span><br><span class="line">hello world</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">dir1</span>]<span class="comment"># echo 'hello world'</span></span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">dir1</span>]<span class="comment"># echo $(date +%F)</span></span><br><span class="line"><span class="number">2018</span><span class="literal">-11</span><span class="literal">-22</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">dir1</span>]<span class="comment"># echo `echo $(date +%F)`</span></span><br><span class="line"><span class="number">2018</span><span class="literal">-11</span><span class="literal">-22</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">dir1</span>]<span class="comment"># echo `date +%F`</span></span><br><span class="line"><span class="number">2018</span><span class="literal">-11</span><span class="literal">-22</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">dir1</span>]<span class="comment"># echo `echo `date +%F``</span></span><br><span class="line">date +%F</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span>  <span class="type">dir1</span>]<span class="comment"># echo $(echo `date +%F`)</span></span><br><span class="line"><span class="number">2018</span><span class="literal">-11</span><span class="literal">-22</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="02-SHELL编程之变量定义"><a href="#02-SHELL编程之变量定义" class="headerlink" title="02_SHELL编程之变量定义"></a>02_SHELL编程之变量定义</h1><!--more-->
<hr>
<h1 id="SHELL编程模块课程目标"><a href="#SHELL编程模块课程目标" class="headerlink" title="SHELL编程模块课程目标"></a>SHELL编程模块课程目标</h1><ul>
<li><p>① Shell的基本语法结构</p>
<p>如：变量定义、条件判断、循环语句(for、until、while)、分支语句、函数和数组等； </p>
<p>② 基本正则表达式的运用;</p>
<p>③ 文件处理三剑客：grep、sed、awk工具的使用；</p>
<p>④ 使用shell脚本完成一些较复杂的任务，如：服务搭建、批量处理等。</p>
<p><strong><em>说明：以上内容仅仅是基本要求，还有很多更深更难的语法需要扩充学习。</em></strong></p>
</li>
<li><p><strong>本节目标</strong></p>
<ul>
<li>==熟练掌握shell变量的定义和获取（重点）==</li>
<li>==能够进行shell简单的四则运算==</li>
</ul>
</li>
</ul>
<h1 id="一、SHELL介绍"><a href="#一、SHELL介绍" class="headerlink" title="一、SHELL介绍"></a>一、SHELL介绍</h1><p><strong>前言：</strong></p>
<p>计算机只能认识（识别）机器语言(0和1)，如（11000000 这种）。但是，我们的程序猿们不能直接去写01这样的代码，所以，要想将程序猿所开发的代码在计算机上运行，就必须找”人”（工具）来==翻译成机器语言==，这个”人”(工具)就是我们常常所说的<strong>==编译器==</strong>或者<strong>==解释器==</strong>。</p>
<h2 id="编译和解释型语言区别"><a href="#编译和解释型语言区别" class="headerlink" title="编译和解释型语言区别"></a>编译和解释型语言区别</h2><p>##1. 编程语言分类</p>
<ul>
<li><strong>编译型语言：</strong></li>
</ul>
<p>​    ==程序在执行之前需要一个专门的编译过程==，把程序编译成为机器语言文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如C、C++</p>
<ul>
<li><strong>解释型语言：</strong></li>
</ul>
<p>​    程序不需要编译，程序在运行时由<strong>==解释器==</strong>翻译成机器语言，每执行一次都要翻译一次。因此效率比较低。比如Python/JavaScript/ Perl /ruby/==Shell==等都是解释型语言。</p>
<h2 id="语言分类"><a href="#语言分类" class="headerlink" title="语言分类"></a>语言分类</h2><ul>
<li><strong>总结</strong></li>
</ul>
<p>编译型语言比解释型语言==速度较快==，但是不如解释型语言==跨平台性好==。如果做底层开发或者大型应用程序或者操作系开发一==般都用编译型语言==；如果是一些服务器脚本及一些辅助的接口，对速度要求不高、对各个平台的==兼容性有要求==的话则一般都用==解释型语言==。</p>
<p>##2. shell简介</p>
<h2 id="00-shell介绍"><a href="#00-shell介绍" class="headerlink" title="00_shell介绍"></a>00_shell介绍</h2><p><strong>总结：</strong></p>
<ul>
<li>==shell就是人机交互的一个桥梁==</li>
<li>shell的种类</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># cat /etc/shells </span></span><br><span class="line">/bin/sh				<span class="comment">#是bash的一个快捷方式</span></span><br><span class="line">/bin/bash			<span class="comment">#bash是大多数Linux默认的shell，包含的功能几乎可以涵盖shell所有的功能</span></span><br><span class="line">/sbin/nologin		<span class="comment">#表示非交互，不能登录操作系统</span></span><br><span class="line">/bin/dash			<span class="comment">#小巧，高效，功能相比少一些</span></span><br><span class="line"></span><br><span class="line">/bin/csh				<span class="comment">#具有C语言风格的一种shell，具有许多特性，但也有一些缺陷</span></span><br><span class="line">/bin/tcsh			<span class="comment">#是csh的增强版，完全兼容csh</span></span><br></pre></td></tr></table></figure>

<p><strong>思考：终端和shell有什么关系？</strong></p>
<h2 id="01-shell介绍"><a href="#01-shell介绍" class="headerlink" title="01_shell介绍"></a>01_shell介绍</h2><p>##3. shell脚本</p>
<h3 id="㈠-什么是shell脚本？"><a href="#㈠-什么是shell脚本？" class="headerlink" title="㈠ 什么是shell脚本？"></a>㈠ 什么是shell脚本？</h3><ul>
<li>一句话概括</li>
</ul>
<p>简单来说就是将==需要执行的命令==保存到文本中，==按照顺序执行==。它是解释型的，意味着不需要编译。</p>
<ul>
<li>准确叙述</li>
</ul>
<p><strong>若干命令 + 脚本的基本格式 + 脚本特定语法 + 思想= shell脚本</strong></p>
<h3 id="㈡-什么时候用到脚本"><a href="#㈡-什么时候用到脚本" class="headerlink" title="㈡ 什么时候用到脚本?"></a>㈡ 什么时候用到脚本?</h3><p><strong>重复化</strong>、复杂化的工作，通过把工作的命令写成脚本，以后仅仅需要执行脚本就能完成这些工作。</p>
<h3 id="㈢-shell脚本能干啥"><a href="#㈢-shell脚本能干啥" class="headerlink" title="㈢ shell脚本能干啥?"></a>㈢ shell脚本能干啥?</h3><p> ①自动化软件部署    LAMP/LNMP/Tomcat…    </p>
<p> ②自动化管理        系统初始化脚本、批量更改主机密码、推送公钥…</p>
<p> ③==自动化分析处理==     统计网站访问量</p>
<p> ④==自动化备份==        数据库备份、日志转储…</p>
<p> ⑤自动化监控脚本</p>
<h3 id="㈣-如何学习shell脚本？"><a href="#㈣-如何学习shell脚本？" class="headerlink" title="㈣ 如何学习shell脚本？"></a>㈣ 如何学习shell脚本？</h3><ol>
<li>尽可能记忆更多的命令(记忆命令使用功能和场景)</li>
<li>掌握脚本的标准的格式（指定魔法字节、使用标准的执行方式运行脚本）</li>
<li>必须==<strong>熟悉掌握</strong>==脚本的基本语法（重点)</li>
</ol>
<h3 id="㈤-学习shell脚本的秘诀"><a href="#㈤-学习shell脚本的秘诀" class="headerlink" title="㈤ 学习shell脚本的秘诀"></a>㈤ 学习shell脚本的秘诀</h3><p>多看（看懂）——&gt;模仿（多练）——&gt;多思考（多写）</p>
<h3 id="㈥-shell脚本的基本写法"><a href="#㈥-shell脚本的基本写法" class="headerlink" title="㈥ shell脚本的基本写法"></a>㈥ shell脚本的基本写法</h3><p>1）<strong>脚本第一行</strong>，魔法字符==<strong>#!</strong>==指定解释器【==必写==】</p>
<p><code>#!/bin/bash</code>  表示以下内容使用bash解释器解析</p>
<p><strong>==注意：==</strong><br>如果直接将解释器路径写死在脚本里，可能在某些系统就会存在找不到解释器的兼容性问题，所以可以使用:<strong>==<code>#!/bin/env 解释器</code>==</strong>  <strong>==<code>#!/bin/env bash</code>==</strong></p>
<p>2）<strong>脚本第二部分</strong>，注释(#号)说明，对脚本的基本信息进行描述【可选】</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下内容是对脚本的基本信息的描述</span></span><br><span class="line"><span class="comment"># Name: 名字</span></span><br><span class="line"><span class="comment"># Desc:描述describe</span></span><br><span class="line"><span class="comment"># Path:存放路径</span></span><br><span class="line"><span class="comment"># Usage:用法</span></span><br><span class="line"><span class="comment"># Update:更新时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面就是脚本的具体内容</span></span><br><span class="line">commands</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>3）<strong>脚本第三部分</strong>，脚本要实现的具体代码内容</p>
<h3 id="㈦-shell脚本的执行方法"><a href="#㈦-shell脚本的执行方法" class="headerlink" title="㈦ shell脚本的执行方法"></a>㈦ shell脚本的执行方法</h3><ul>
<li>标准脚本执行方法（建议）</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) 编写人生第一个shell脚本</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell01</span>]<span class="comment"># cat first_shell.sh</span></span><br><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下内容是对脚本的基本信息的描述</span></span><br><span class="line"><span class="comment"># Name: first_shell.sh</span></span><br><span class="line"><span class="comment"># Desc: num1</span></span><br><span class="line"><span class="comment"># Path: /shell01/first_shell.sh</span></span><br><span class="line"><span class="comment"># Usage:/shell01/first_shell.sh</span></span><br><span class="line"><span class="comment"># Update:2019-05-05</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">"hello world"</span></span><br><span class="line">echo <span class="string">"hello world"</span></span><br><span class="line">echo <span class="string">"hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) 脚本增加可执行权限</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell01</span>]<span class="comment"># chmod +x first_shell.sh</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>) 标准方式执行脚本</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell01</span>]<span class="comment"># pwd</span></span><br><span class="line">/shell01</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell01</span>]<span class="comment"># /shell01/first_shell.sh</span></span><br><span class="line">或者</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell01</span>]<span class="comment"># ./first_shell.sh</span></span><br><span class="line"></span><br><span class="line">注意：标准执行方式脚本必须要有可执行权限。</span><br></pre></td></tr></table></figure>

<ul>
<li>非标准的执行方法（不建议）</li>
</ul>
<ol>
<li>直接在命令行指定解释器执行</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell01</span>]<span class="comment"># bash first_shell.sh</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell01</span>]<span class="comment"># sh first_shell.sh</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell01</span>]<span class="comment"># bash -x first_shell.sh</span></span><br><span class="line">+ echo <span class="string">'hello world'</span></span><br><span class="line">hello world</span><br><span class="line">+ echo <span class="string">'hello world'</span></span><br><span class="line">hello world</span><br><span class="line">+ echo <span class="string">'hello world'</span></span><br><span class="line">hello world</span><br><span class="line">----------------</span><br><span class="line"><span class="literal">-x</span>:一般用于排错，查看脚本的执行过程</span><br><span class="line"><span class="literal">-n</span>:用来查看脚本的语法是否有问题</span><br><span class="line">------------</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用<code>source</code>命令读取脚本文件,执行文件里的代码</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell01</span>]<span class="comment"># source first_shell.sh</span></span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>

<p><strong>小试牛刀：</strong>写一个木有灵魂的脚本，要求如下：</p>
<ol>
<li><p>删除/tmp/目录下的所有文件</p>
</li>
<li><p>然后在/tmp目录里创建3个目录，分别是dir1~dir3     </p>
</li>
<li><p>拷贝/etc/hosts文件到刚创建的dir1目录里       </p>
</li>
<li><p>最后打印”==报告首长，任务已于2019-05-05 10:10:10时间完成==”内容   </p>
<p><code>echo &quot;报告首长，任务已于$(date +&#39;%F %T&#39;)&quot;</code></p>
</li>
</ol>
<h1 id="二、变量的定义"><a href="#二、变量的定义" class="headerlink" title="==二、变量的定义=="></a>==二、变量的定义==</h1><h2 id="1-变量是什么？"><a href="#1-变量是什么？" class="headerlink" title="1. 变量是什么？"></a>1. 变量是什么？</h2><p>一句话概括：变量是用来临时保存数据的，该数据是可以变化的数据。</p>
<h2 id="2-什么时候需要定义变量？"><a href="#2-什么时候需要定义变量？" class="headerlink" title="2. 什么时候需要定义变量？"></a>2. 什么时候需要定义变量？</h2><ul>
<li>如果某个内容需要多次使用，并且在代码中<strong>重复出现</strong>，那么可以用变量代表该内容。这样在修改内容的时候，仅仅需要修改变量的值。</li>
<li>在代码运作的过程中，可能会把某些命令的执行结果保存起来，后续代码需要使用这些结果，就可以直接使用这个变量。</li>
</ul>
<h2 id="3-变量如何定义？"><a href="#3-变量如何定义？" class="headerlink" title="3.变量如何定义？"></a>3.变量如何定义？</h2><p><strong>变量名=====变量值</strong></p>
<p>变量名：用来临时保存数据的</p>
<p>变量值：就是临时的可变化的数据</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=hello			定义变量A</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A			调用变量A，要给钱的，不是人民币是美元"$"</span></span><br><span class="line">hello</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;A&#125;		还可以这样调用，不管你的姿势多优雅，总之要给钱</span></span><br><span class="line">hello</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=world			因为是变量所以可以变，移情别恋是常事</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A			不管你是谁，只要调用就要给钱</span></span><br><span class="line">world</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># unset A			不跟你玩了，取消变量</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A			从此，我单身了，你可以给我介绍任何人</span></span><br></pre></td></tr></table></figure>

<h2 id="4-变量的定义规则"><a href="#4-变量的定义规则" class="headerlink" title="4. 变量的定义规则"></a>4. 变量的定义规则</h2><p>虽然可以给变量（变量名）赋予任何值；但是，对于==变量名==也是要求的！:unamused:</p>
<h3 id="㈠-变量名区分大小写"><a href="#㈠-变量名区分大小写" class="headerlink" title="㈠ 变量名区分大小写"></a>㈠ 变量名区分大小写</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># a=world</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A</span></span><br><span class="line">hello</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $a</span></span><br><span class="line">world</span><br></pre></td></tr></table></figure>

<h3 id="㈡-变量名不能有特殊符号"><a href="#㈡-变量名不能有特殊符号" class="headerlink" title="㈡ 变量名不能有特殊符号"></a>㈡ 变量名不能有特殊符号</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># *A=hello</span></span><br><span class="line"><span class="literal">-bash</span>: *A=hello: command not found</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># ?A=hello</span></span><br><span class="line"><span class="literal">-bash</span>: ?A=hello: command not found</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># @A=hello</span></span><br><span class="line"><span class="literal">-bash</span>: @A=hello: command not found</span><br><span class="line"></span><br><span class="line">特别说明：对于有空格的字符串给变量赋值时，要用引号引起来</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=hello world</span></span><br><span class="line"><span class="literal">-bash</span>: world: command not found</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A="hello world"</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A='hello world'</span></span><br></pre></td></tr></table></figure>

<h3 id="㈢-变量名不能以数字开头"><a href="#㈢-变量名不能以数字开头" class="headerlink" title="㈢ 变量名不能以数字开头"></a>㈢ 变量名不能以数字开头</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># 1A=hello</span></span><br><span class="line"><span class="literal">-bash</span>: <span class="number">1</span>A=hello: command not found</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A1=hello</span></span><br><span class="line">注意：不能以数字开头并不代表变量名中不能包含数字呦。</span><br></pre></td></tr></table></figure>

<h3 id="㈣-等号两边不能有任何空格"><a href="#㈣-等号两边不能有任何空格" class="headerlink" title="㈣ 等号两边不能有任何空格"></a>㈣ 等号两边不能有任何空格</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A =123</span></span><br><span class="line"><span class="literal">-bash</span>: A: command not found</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A= 123</span></span><br><span class="line"><span class="literal">-bash</span>: <span class="number">123</span>: command not found</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A = 123</span></span><br><span class="line"><span class="literal">-bash</span>: A: command not found</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=123</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>

<h3 id="㈤-变量名尽量做到见名知意"><a href="#㈤-变量名尽量做到见名知意" class="headerlink" title="㈤ 变量名尽量做到见名知意"></a>㈤ 变量名尽量做到见名知意</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">NTP_IP=<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">DIR=/u01/app1</span><br><span class="line">TMP_FILE=/var/log/<span class="number">1</span>.log</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">说明：一般变量名使用大写（小写也可以），不要同一个脚本中变量全是a,b,c等不容易阅读</span><br></pre></td></tr></table></figure>

<h2 id="5-变量的定义方式有哪些？"><a href="#5-变量的定义方式有哪些？" class="headerlink" title="5. 变量的定义方式有哪些？"></a>5. 变量的定义方式有哪些？</h2><h3 id="㈠-基本方式"><a href="#㈠-基本方式" class="headerlink" title="㈠ 基本方式"></a>㈠ 基本方式</h3><blockquote>
<p>直接赋值给一个变量</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=1234567</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A</span></span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;A:2:4&#125;		表示从A变量中第3个字符开始截取，截取4个字符</span></span><br><span class="line"><span class="number">3456</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"><span class="variable">$</span>变量名 和 <span class="variable">$</span>&#123;变量名&#125;的异同</span><br><span class="line">相同点：都可以调用变量</span><br><span class="line">不同点：<span class="variable">$</span>&#123;变量名&#125;可以只截取变量的一部分，而<span class="variable">$</span>变量名不可以</span><br></pre></td></tr></table></figure>

<h3 id="㈡-命令执行结果赋值给变量"><a href="#㈡-命令执行结果赋值给变量" class="headerlink" title="㈡ 命令执行结果赋值给变量"></a>㈡ 命令执行结果赋值给变量</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># B=`date +%F`</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $B</span></span><br><span class="line"><span class="number">2019</span><span class="literal">-04</span><span class="literal">-16</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># C=$(uname -r)</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $C</span></span><br><span class="line"><span class="number">2.6</span>.<span class="number">32</span><span class="literal">-696</span>.el6.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="㈢-交互式定义变量-read"><a href="#㈢-交互式定义变量-read" class="headerlink" title="㈢ ==交互式定义变量(read)=="></a>㈢ ==交互式定义变量(read)==</h3><p><strong>目的：</strong>让==用户自己==给变量赋值，比较灵活。</p>
<p><strong>语法：</strong><code>read [选项] 变量名</code></p>
<p><strong>常见选项：</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td>定义提示用户的信息</td>
</tr>
<tr>
<td>-n</td>
<td>定义字符数（限制变量值的长度）</td>
</tr>
<tr>
<td>-s</td>
<td>不显示（不显示用户输入的内容）</td>
</tr>
<tr>
<td>-t</td>
<td>定义超时时间，默认单位为秒（限制用户输入变量值的超时时间）</td>
</tr>
</tbody></table>
<p><strong>举例说明：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">用法<span class="number">1</span>：用户自己定义变量值</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># read name</span></span><br><span class="line">harry</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $name</span></span><br><span class="line">harry</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># read -p "Input your name:" name</span></span><br><span class="line">Input your name:tom</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $name</span></span><br><span class="line">tom</span><br></pre></td></tr></table></figure>


<p>用法2：变量值来自文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@MissHou ~]# cat 1.txt </span><br><span class="line">10.1.1.1 255.255.255.0</span><br><span class="line"></span><br><span class="line">[root@MissHou ~]# read ip mask &lt; 1.txt </span><br><span class="line">[root@MissHou ~]# echo $ip</span><br><span class="line">10.1.1.1</span><br><span class="line">[root@MissHou ~]# echo $mask</span><br><span class="line">255.255.255.0</span><br></pre></td></tr></table></figure>

<h3 id="㈣-定义有类型的变量-declare"><a href="#㈣-定义有类型的变量-declare" class="headerlink" title="㈣ 定义有类型的变量(==declare==)"></a>㈣ 定义有类型的变量(==declare==)</h3><p><strong>目的：</strong> 给变量做一些限制，固定变量的类型，比如：整型、只读</p>
<p><strong>用法：</strong><code>declare 选项 变量名=变量值</code></p>
<p><strong>常用选项：</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>释义</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>==-i==</td>
<td>将变量看成整数</td>
<td>declare -i A=123</td>
</tr>
<tr>
<td>==-r==</td>
<td>定义只读变量</td>
<td>declare -r B=hello</td>
</tr>
<tr>
<td>-a</td>
<td>定义普通数组；查看普通数组</td>
<td></td>
</tr>
<tr>
<td>-A</td>
<td>定义关联数组；查看关联数组</td>
<td></td>
</tr>
<tr>
<td>-x</td>
<td>将变量通过环境导出</td>
<td>declare -x AAA=123456 等于 export AAA=123456</td>
</tr>
</tbody></table>
<p><strong>举例说明：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># declare -i A=123</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># declare -r B=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $B</span></span><br><span class="line">hello</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># B=world</span></span><br><span class="line"><span class="literal">-bash</span>: B: readonly variable</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># unset B</span></span><br><span class="line"><span class="literal">-bash</span>: unset: B: cannot unset: readonly variable</span><br></pre></td></tr></table></figure>

<h2 id="6-变量的分类"><a href="#6-变量的分类" class="headerlink" title="6. 变量的分类"></a>6. 变量的分类</h2><h3 id="㈠-本地变量"><a href="#㈠-本地变量" class="headerlink" title="㈠ 本地变量"></a>㈠ 本地变量</h3><ul>
<li><strong>==本地变量==</strong>：当前用户自定义的变量。当前进程中有效，其他进程及当前进程的子进程无效。</li>
</ul>
<h3 id="㈡-环境变量"><a href="#㈡-环境变量" class="headerlink" title="㈡ 环境变量"></a>㈡ 环境变量</h3><ul>
<li><strong>环境变量</strong>：当前进程有效，并且能够被<strong>子进程</strong>调用。<ul>
<li><code>env</code>查看当前用户的环境变量</li>
<li><code>set</code>==查询当前用户的所有变量(临时变量与环境变量)== </li>
<li><code>export 变量名=变量值</code>    或者  <code>变量名=变量值；export 变量名</code></li>
</ul>
</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># export A=hello		临时将一个本地变量（临时变量）变成环境变量</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># env|grep ^A</span></span><br><span class="line">A=hello</span><br><span class="line"></span><br><span class="line">永久生效：</span><br><span class="line">vim /etc/profile 或者 ~/.bashrc</span><br><span class="line">export A=hello</span><br><span class="line">或者</span><br><span class="line">A=hello</span><br><span class="line">export A</span><br><span class="line"></span><br><span class="line">说明：系统中有一个变量PATH，环境变量</span><br><span class="line">export PATH=/usr/local/mysql/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<h3 id="㈢-全局变量"><a href="#㈢-全局变量" class="headerlink" title="㈢ 全局变量"></a>㈢ 全局变量</h3><ul>
<li><p><strong>全局变量</strong>：全局所有的用户和程序都能调用，且继承，新建的用户也默认能调用.</p>
</li>
<li><p><strong>解读相关配置文件</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>文件名</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>$HOME/.bashrc</td>
<td>当前用户的bash信息,用户==登录==时读取</td>
<td>定义别名、umask、函数等</td>
</tr>
<tr>
<td>$HOME/.bash_profile</td>
<td>当前用户的环境变量，用户==登录==时读取</td>
<td></td>
</tr>
<tr>
<td>$HOME/.bash_logout</td>
<td>当前用户==退出==当前shell时最后读取</td>
<td>定义用户退出时执行的程序等</td>
</tr>
<tr>
<td>/etc/bashrc</td>
<td>全局的bash信息，所有用户都生效</td>
<td></td>
</tr>
<tr>
<td>/etc/profile</td>
<td>全局环境变量信息</td>
<td>系统和所有用户都生效</td>
</tr>
<tr>
<td>$HOME/.bash_history</td>
<td>用户的历史命令</td>
<td>history -w   保存历史记录         history -c  清空历史记录</td>
</tr>
</tbody></table>
<p><strong>说明：</strong>以上文件修改后，都需要重新==source==让其生效或者退出重新登录。</p>
<ul>
<li><strong>用户登录</strong>系统<strong>读取</strong>相关==文件的顺序==<ol>
<li><code>/etc/profile</code></li>
<li><code>$HOME/.bash_profile</code></li>
<li><code>$HOME/.bashrc</code></li>
<li><code>/etc/bashrc</code></li>
<li><code>$HOME/.bash_logout</code></li>
</ol>
</li>
</ul>
<h3 id="㈣-系统变量"><a href="#㈣-系统变量" class="headerlink" title="㈣ ==系统变量=="></a>㈣ ==系统变量==</h3><ul>
<li><strong>系统变量(内置bash中变量)</strong> ： shell本身已经固定好了它的名字和作用.</li>
</ul>
<table>
<thead>
<tr>
<th>内置变量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>==$?==</td>
<td>上一条命令执行后返回的状态；状态值为0表示执行正常，==非0==表示执行异常或错误</td>
</tr>
<tr>
<td>$0</td>
<td>当前执行的程序或脚本名</td>
</tr>
<tr>
<td>==$#==</td>
<td>脚本后面接的参数的==个数==</td>
</tr>
<tr>
<td>==$*==</td>
<td>脚本后面==所有参数==，参数当成一个整体输出，每一个变量参数之间以空格隔开</td>
</tr>
<tr>
<td>==$@==</td>
<td>脚本后面==所有参数==，参数是独立的，也是全部输出</td>
</tr>
<tr>
<td>==$1~$9==</td>
<td>脚本后面的==位置参数==，$1表示第1个位置参数，依次类推</td>
</tr>
<tr>
<td>${10}~${n}</td>
<td>扩展位置参数,第10个位置变量必须用{}大括号括起来(2位数字以上扩起来)</td>
</tr>
<tr>
<td>==$$==</td>
<td>当前所在进程的进程号，如<code>echo $$</code></td>
</tr>
<tr>
<td>$！</td>
<td>后台运行的最后一个进程号 (当前终端）</td>
</tr>
<tr>
<td>!$</td>
<td>调用最后一条命令历史中的==参数==</td>
</tr>
</tbody></table>
<ul>
<li>进一步了解位置参数<code>$1~${n}</code></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#了解shell内置变量中的位置参数含义</span></span><br><span class="line">echo <span class="string">"\<span class="variable">$0</span> = <span class="variable">$0</span>"</span></span><br><span class="line">echo <span class="string">"\<span class="variable">$</span># = <span class="variable">$</span>#"</span></span><br><span class="line">echo <span class="string">"\<span class="variable">$</span>* = <span class="variable">$</span>*"</span></span><br><span class="line">echo <span class="string">"\<span class="variable">$</span>@ = <span class="variable">$</span>@"</span></span><br><span class="line">echo <span class="string">"\<span class="variable">$1</span> = <span class="variable">$1</span>"</span> </span><br><span class="line">echo <span class="string">"\<span class="variable">$2</span> = <span class="variable">$2</span>"</span> </span><br><span class="line">echo <span class="string">"\<span class="variable">$3</span> = <span class="variable">$3</span>"</span> </span><br><span class="line">echo <span class="string">"\<span class="variable">$11</span> = <span class="variable">$</span>&#123;11&#125;"</span> </span><br><span class="line">echo <span class="string">"\<span class="variable">$12</span> = <span class="variable">$</span>&#123;12&#125;"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进一步了解$*和​$@的区别</li>
</ul>
<p><code>$*</code>：表示将变量看成一个整体<br><code>$@</code>：表示变量是独立的</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$</span>@"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">echo <span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo <span class="string">"======我是分割线======="</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$</span>*"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">echo <span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># bash 3.sh a b c</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">======我是分割线=======</span><br><span class="line">a b c</span><br></pre></td></tr></table></figure>

<h1 id="三、简单四则运算"><a href="#三、简单四则运算" class="headerlink" title="三、简单四则运算"></a>三、简单四则运算</h1><p>算术运算：默认情况下，shell就只能支持简单的==整数==运算</p>
<p>运算内容：加(+)、减(-)、乘(*)、除(/)、求余数（%）</p>
<h2 id="1-四则运算符号"><a href="#1-四则运算符号" class="headerlink" title="1. 四则运算符号"></a>1. 四则运算符号</h2><table>
<thead>
<tr>
<th>表达式</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>$((  ))</td>
<td>echo $((1+1))</td>
</tr>
<tr>
<td>$[ ]</td>
<td>echo $[10-5]</td>
</tr>
<tr>
<td>expr</td>
<td>expr 10 / 5</td>
</tr>
<tr>
<td>let</td>
<td>n=1;let n+=1  等价于  let n=n+1</td>
</tr>
</tbody></table>
<h2 id="2-了解i-和-i"><a href="#2-了解i-和-i" class="headerlink" title="2.了解i++和++i"></a>2.了解i++和++i</h2><ul>
<li>对变量的值的影响</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># i=1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># let i++</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $i</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># j=1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># let ++j</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $j</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对==表达式==的值的影响</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># unset i j</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># i=1;j=1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># let x=i++         先赋值，再运算</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># let y=++j         先运算，再赋值</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $i</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $j</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $x</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $y</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>



<h1 id="四、扩展补充"><a href="#四、扩展补充" class="headerlink" title="四、扩展补充"></a>四、扩展补充</h1><h2 id="1-数组定义"><a href="#1-数组定义" class="headerlink" title="1. 数组定义"></a>1. 数组定义</h2><h3 id="㈠-数组分类"><a href="#㈠-数组分类" class="headerlink" title="㈠ 数组分类"></a>㈠ 数组分类</h3><ul>
<li>普通数组：只能使用整数作为数组索引(元素的下标)</li>
<li>关联数组：可以使用字符串作为数组索引(元素的下标)</li>
</ul>
<h3 id="㈡-普通数组定义"><a href="#㈡-普通数组定义" class="headerlink" title="㈡ 普通数组定义"></a>㈡ 普通数组定义</h3><ul>
<li>一次赋予一个值</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">数组名[索引下标]=值</span><br><span class="line">array[<span class="number">0</span>]=v1</span><br><span class="line">array[<span class="number">1</span>]=v2</span><br><span class="line">array[<span class="number">2</span>]=v3</span><br><span class="line">array[<span class="number">3</span>]=v4</span><br></pre></td></tr></table></figure>

<ul>
<li>一次赋予多个值</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">数组名=(值<span class="number">1</span> 值<span class="number">2</span> 值<span class="number">3</span> ...)</span><br><span class="line">array=(var1 var2 var3 var4)</span><br><span class="line"></span><br><span class="line">array1=(`cat /etc/passwd`)			将文件中每一行赋值给array1数组</span><br><span class="line">array2=(`ls /root`)</span><br><span class="line">array3=(harry amy jack <span class="string">"Miss Hou"</span>)</span><br><span class="line">array4=(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="string">"hello world"</span> [<span class="number">10</span>]=linux)</span><br></pre></td></tr></table></figure>

<h3 id="㈢-数组的读取"><a href="#㈢-数组的读取" class="headerlink" title="㈢ 数组的读取"></a>㈢ 数组的读取</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span>&#123;数组名[元素下标]&#125;</span><br><span class="line"></span><br><span class="line">echo <span class="variable">$</span>&#123;array[<span class="number">0</span>]&#125;			获取数组里第一个元素</span><br><span class="line">echo <span class="variable">$</span>&#123;array[*]&#125;			获取数组里的所有元素</span><br><span class="line">echo <span class="variable">$</span>&#123;<span class="comment">#array[*]&#125;			获取数组里所有元素个数</span></span><br><span class="line">echo <span class="variable">$</span>&#123;!array[<span class="selector-tag">@</span>]&#125;    	获取数组元素的索引下标</span><br><span class="line">echo <span class="variable">$</span>&#123;array[<span class="selector-tag">@</span>]:<span class="number">1</span>:<span class="number">2</span>&#125;    访问指定的元素；<span class="number">1</span>代表从下标为<span class="number">1</span>的元素开始获取；<span class="number">2</span>代表获取后面几个元素</span><br><span class="line"></span><br><span class="line">查看普通数组信息：</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># declare -a</span></span><br></pre></td></tr></table></figure>

<h3 id="㈣-关联数组定义"><a href="#㈣-关联数组定义" class="headerlink" title="㈣ 关联数组定义"></a>㈣ 关联数组定义</h3><h4 id="①首先声明关联数组"><a href="#①首先声明关联数组" class="headerlink" title="①首先声明关联数组"></a>①首先声明关联数组</h4><p>==declare -A asso_array1==</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">declare <span class="literal">-A</span> asso_array1</span><br><span class="line">declare <span class="literal">-A</span> asso_array2</span><br><span class="line">declare <span class="literal">-A</span> asso_array3</span><br></pre></td></tr></table></figure>

<h4 id="②-数组赋值"><a href="#②-数组赋值" class="headerlink" title="② 数组赋值"></a>② 数组赋值</h4><ul>
<li>一次赋一个值</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">数组名[索引<span class="type">or</span>下标]=变量值</span><br><span class="line"><span class="comment"># asso_array1[linux]=one</span></span><br><span class="line"><span class="comment"># asso_array1[java]=two</span></span><br><span class="line"><span class="comment"># asso_array1[php]=three</span></span><br></pre></td></tr></table></figure>

<ul>
<li>一次赋多个值</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># asso_array2=([name1]=harry [name2]=jack [name3]=amy [name4]="Miss Hou")</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看关联数组</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># declare -A</span></span><br><span class="line">declare <span class="literal">-A</span> asso_array1=<span class="string">'([php]="three" [java]="two" [linux]="one" )'</span></span><br><span class="line">declare <span class="literal">-A</span> asso_array2=<span class="string">'([name3]="amy" [name2]="jack" [name1]="harry" [name4]="Miss Hou" )'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取关联数组值</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo $&#123;asso_array1[linux]&#125;</span></span><br><span class="line">one</span><br><span class="line"><span class="comment"># echo $&#123;asso_array1[php]&#125;</span></span><br><span class="line">three</span><br><span class="line"><span class="comment"># echo $&#123;asso_array1[*]&#125;</span></span><br><span class="line">three two one</span><br><span class="line"><span class="comment"># echo $&#123;!asso_array1[*]&#125;</span></span><br><span class="line">php java linux</span><br><span class="line"><span class="comment"># echo $&#123;#asso_array1[*]&#125;</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment"># echo $&#123;#asso_array2[*]&#125;</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># echo $&#123;!asso_array2[*]&#125;</span></span><br><span class="line">name3 name2 name1 name4</span><br></pre></td></tr></table></figure>

<ul>
<li>其他定义方式</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell05</span>]<span class="comment"># declare -A books</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell05</span>]<span class="comment"># let books[linux]++</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell05</span>]<span class="comment"># declare -A|grep books</span></span><br><span class="line">declare <span class="literal">-A</span> books=<span class="string">'([linux]="1" )'</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell05</span>]<span class="comment"># let books[linux]++</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell05</span>]<span class="comment"># declare -A|grep books</span></span><br><span class="line">declare <span class="literal">-A</span> books=<span class="string">'([linux]="2" )'</span></span><br></pre></td></tr></table></figure>



<h2 id="2-其他变量定义"><a href="#2-其他变量定义" class="headerlink" title="2. 其他变量定义"></a>2. 其他变量定义</h2><ul>
<li>取出一个目录下的目录和文件：<code>dirname</code>和 <code>basename</code> </li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A=/root/Desktop/shell/mem.txt </span></span><br><span class="line"><span class="comment"># echo $A</span></span><br><span class="line">/root/Desktop/shell/mem.txt</span><br><span class="line"><span class="comment"># dirname $A   取出目录</span></span><br><span class="line">/root/Desktop/shell</span><br><span class="line"><span class="comment"># basename $A  取出文件</span></span><br><span class="line">mem.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>-==变量”内容”的删除和替换==</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">一个“%”代表从右往左删除</span><br><span class="line">两个“%%”代表从右往左去掉最多</span><br><span class="line">一个“<span class="comment">#”代表从左往右去掉删除</span></span><br><span class="line">两个“<span class="comment">##”代表从左往右去掉最多</span></span><br><span class="line"></span><br><span class="line">举例说明：</span><br><span class="line"><span class="comment"># url=www.taobao.com</span></span><br><span class="line"><span class="comment"># echo $&#123;#url&#125;		     获取变量的长度</span></span><br><span class="line"><span class="comment"># echo $&#123;url#*.&#125;</span></span><br><span class="line"><span class="comment"># echo $&#123;url##*.&#125;</span></span><br><span class="line"><span class="comment"># echo $&#123;url%.*&#125;</span></span><br><span class="line"><span class="comment"># echo $&#123;url%%.*&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以下了解，自己完成</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">替换：/ 和 //</span><br><span class="line"> <span class="number">1015</span>  echo <span class="variable">$</span>&#123;url/ao/AO&#125;  用AO代替ao（从左往右第一个）</span><br><span class="line"> <span class="number">1017</span>  echo <span class="variable">$</span>&#123;url//ao/AO&#125;   贪婪替换（替代所有）</span><br><span class="line"> </span><br><span class="line">替代： - 和 :-  +和:+</span><br><span class="line"> <span class="number">1019</span>  echo <span class="variable">$</span>&#123;abc<span class="literal">-123</span>&#125;</span><br><span class="line"> <span class="number">1020</span>  abc=hello</span><br><span class="line"> <span class="number">1021</span>  echo <span class="variable">$</span>&#123;abc<span class="literal">-444</span>&#125;</span><br><span class="line"> <span class="number">1022</span>  echo <span class="variable">$abc</span></span><br><span class="line"> <span class="number">1024</span>  abc=</span><br><span class="line"> <span class="number">1025</span>  echo <span class="variable">$</span>&#123;abc<span class="literal">-222</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span>&#123;变量名-新的变量值&#125; 或者 <span class="variable">$</span>&#123;变量名=新的变量值&#125;</span><br><span class="line">变量没有被赋值：会使用“新的变量值“ 替代</span><br><span class="line">变量有被赋值（包括空值）： 不会被替代</span><br><span class="line"></span><br><span class="line"> <span class="number">1062</span>  echo <span class="variable">$</span>&#123;ABC:<span class="literal">-123</span>&#125;</span><br><span class="line"> <span class="number">1063</span>  ABC=HELLO</span><br><span class="line"> <span class="number">1064</span>  echo <span class="variable">$</span>&#123;ABC:<span class="literal">-123</span>&#125;</span><br><span class="line"> <span class="number">1065</span>  ABC=</span><br><span class="line"> <span class="number">1066</span>  echo <span class="variable">$</span>&#123;ABC:<span class="literal">-123</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span>&#123;变量名:-新的变量值&#125; 或者 <span class="variable">$</span>&#123;变量名:=新的变量值&#125;</span><br><span class="line">变量没有被赋值或者赋空值：会使用“新的变量值“ 替代</span><br><span class="line">变量有被赋值： 不会被替代</span><br><span class="line"></span><br><span class="line"> <span class="number">1116</span>  echo <span class="variable">$</span>&#123;abc=<span class="number">123</span>&#125;</span><br><span class="line"> <span class="number">1118</span>  echo <span class="variable">$</span>&#123;abc:=<span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># unset abc</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc:+123&#125;</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># abc=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc:+123&#125;</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># abc=</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc:+123&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span>&#123;变量名+新的变量值&#125;</span><br><span class="line">变量没有被赋值或者赋空值：不会使用“新的变量值“ 替代</span><br><span class="line">变量有被赋值： 会被替代</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># unset abc</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc+123&#125;</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># abc=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc+123&#125;</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># abc=</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc+123&#125;</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="variable">$</span>&#123;变量名:+新的变量值&#125;</span><br><span class="line">变量没有被赋值：不会使用“新的变量值“ 替代</span><br><span class="line">变量有被赋值（包括空值）： 会被替代</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># unset abc</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc?123&#125;</span></span><br><span class="line"><span class="literal">-bash</span>: abc: <span class="number">123</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># abc=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc?123&#125;</span></span><br><span class="line">hello</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># abc=</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc?123&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span>&#123;变量名?新的变量值&#125;</span><br><span class="line">变量没有被赋值:提示错误信息</span><br><span class="line">变量被赋值（包括空值）：不会使用“新的变量值“ 替代</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># unset abc</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc:?123&#125;</span></span><br><span class="line"><span class="literal">-bash</span>: abc: <span class="number">123</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># abc=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc:?123&#125;</span></span><br><span class="line">hello</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># abc=</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;abc:?123&#125;</span></span><br><span class="line"><span class="literal">-bash</span>: abc: <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span>&#123;变量名:?新的变量值&#125;</span><br><span class="line">变量没有被赋值或者赋空值时:提示错误信息</span><br><span class="line">变量被赋值：不会使用“新的变量值“ 替代</span><br><span class="line"></span><br><span class="line">说明：?主要是当变量没有赋值提示错误信息的，没有赋值功能</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="03-SHELL编程之条件判断和流程控制"><a href="#03-SHELL编程之条件判断和流程控制" class="headerlink" title="03_SHELL编程之条件判断和流程控制"></a>03_SHELL编程之条件判断和流程控制</h1><!--more-->
<hr>
<h1 id="本节课程目标-1"><a href="#本节课程目标-1" class="headerlink" title="本节课程目标"></a>本节课程目标</h1><ul>
<li>熟悉条件判断语句，如判断整数、判断字符串等</li>
<li>熟悉流程控制语句基本语法，如if…else…</li>
</ul>
<h1 id="一、条件判断语法结构"><a href="#一、条件判断语法结构" class="headerlink" title="一、条件判断语法结构"></a>一、条件判断语法结构</h1><p><strong>思考：何为真(==true==)？何为假(==false==)？</strong></p>
<p>##1. ==条件判断语法格式==</p>
<ul>
<li>格式1： ==<strong>test</strong>== 条件表达式</li>
<li>格式2： <strong>[</strong> 条件表达式 ]   </li>
<li>格式3： <strong>[[</strong> 条件表达式 ]]  支持正则 =~</li>
</ul>
<p><strong>特别说明：</strong></p>
<p>1）==[==  亲亲，我两边都有空格，不空打死你呦  ==]== :imp:</p>
<p>2）==[[==  亲亲，我两边都有空格，不空打死你呦  ==]]==:imp:</p>
<p>3)  更多判断，<code>man test</code>去查看，很多的参数都用来进行条件判断</p>
<h2 id="2-条件判断相关参数"><a href="#2-条件判断相关参数" class="headerlink" title="2. 条件判断相关参数"></a>2. 条件判断相关参数</h2><p>问：你要判断什么？</p>
<p>答：我要判断文件类型，判断文件新旧，判断字符串是否相等，判断权限等等…</p>
<h3 id="㈠-判断文件类型"><a href="#㈠-判断文件类型" class="headerlink" title="㈠ ==判断文件类型=="></a>㈠ ==判断文件类型==</h3><table>
<thead>
<tr>
<th>判断参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>==-e==</td>
<td>判断文件是否存在（任何类型文件）</td>
</tr>
<tr>
<td>-f</td>
<td>判断文件是否存在==并且==是一个普通文件</td>
</tr>
<tr>
<td>-d</td>
<td>判断文件是否存在并且是一个目录</td>
</tr>
<tr>
<td>-L</td>
<td>判断文件是否存在并且是一个软连接文件</td>
</tr>
<tr>
<td>-b</td>
<td>判断文件是否存在并且是一个块设备文件</td>
</tr>
<tr>
<td>-S</td>
<td>判断文件是否存在并且是一个套接字文件</td>
</tr>
<tr>
<td>-c</td>
<td>判断文件是否存在并且是一个字符设备文件</td>
</tr>
<tr>
<td>-p</td>
<td>判断文件是否存在并且是一个命名管道文件</td>
</tr>
<tr>
<td>==-s==</td>
<td>判断文件是否存在并且是一个非空文件（有内容）</td>
</tr>
</tbody></table>
<p><strong>举例说明：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">test <span class="literal">-e</span> file					只要文件存在条件为真</span><br><span class="line">[ -<span class="type">d</span> /<span class="type">shell01</span>/<span class="type">dir1</span> ]		 	判断目录是否存在，存在条件为真</span><br><span class="line">[ ! -<span class="type">d</span> /<span class="type">shell01</span>/<span class="type">dir1</span> ]		判断目录是否存在,不存在条件为真</span><br><span class="line">[[ -<span class="type">f</span> /<span class="type">shell01</span>/<span class="number">1</span><span class="type">.sh</span> ]]		判断文件是否存在，并且是一个普通的文件</span><br></pre></td></tr></table></figure>

<h3 id="㈡-判断文件权限"><a href="#㈡-判断文件权限" class="headerlink" title="㈡ 判断文件权限"></a>㈡ 判断文件权限</h3><table>
<thead>
<tr>
<th>判断参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>当前用户对其是否可读</td>
</tr>
<tr>
<td>-w</td>
<td>当前用户对其是否可写</td>
</tr>
<tr>
<td>-x</td>
<td>当前用户对其是否可执行</td>
</tr>
<tr>
<td>-u</td>
<td>是否有suid，高级权限冒险位</td>
</tr>
<tr>
<td>-g</td>
<td>是否sgid，高级权限强制位</td>
</tr>
<tr>
<td>-k</td>
<td>是否有t位，高级权限粘滞位</td>
</tr>
</tbody></table>
<h3 id="㈢-判断文件新旧"><a href="#㈢-判断文件新旧" class="headerlink" title="㈢ 判断文件新旧"></a>㈢ 判断文件新旧</h3><p>说明：这里的新旧指的是==文件的修改时间==。</p>
<table>
<thead>
<tr>
<th>判断参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>file1 -nt  file2</td>
<td>比较file1是否比file2新</td>
</tr>
<tr>
<td>file1 -ot  file2</td>
<td>比较file1是否比file2旧</td>
</tr>
<tr>
<td>file1 -ef  file2</td>
<td>比较是否为同一个文件，或者用于判断硬连接，是否指向同一个inode</td>
</tr>
</tbody></table>
<h3 id="㈣-判断整数"><a href="#㈣-判断整数" class="headerlink" title="㈣ 判断整数"></a>㈣ 判断整数</h3><table>
<thead>
<tr>
<th>判断参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-eq</td>
<td>相等</td>
</tr>
<tr>
<td>-ne</td>
<td>不等</td>
</tr>
<tr>
<td>-gt</td>
<td>大于</td>
</tr>
<tr>
<td>-lt</td>
<td>小于</td>
</tr>
<tr>
<td>-ge</td>
<td>大于等于</td>
</tr>
<tr>
<td>-le</td>
<td>小于等于</td>
</tr>
</tbody></table>
<h3 id="㈤-判断字符串"><a href="#㈤-判断字符串" class="headerlink" title="㈤ ==判断字符串=="></a>㈤ ==判断字符串==</h3><table>
<thead>
<tr>
<th>判断参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-z</td>
<td>判断是否为==空==字符串，字符串长度为0则成立</td>
</tr>
<tr>
<td>-n</td>
<td>判断是否为==非空==字符串，字符串长度不为0则成立</td>
</tr>
<tr>
<td>string1 = string2</td>
<td>判断字符串是否相等</td>
</tr>
<tr>
<td>string1 != string2</td>
<td>判断字符串是否相不等</td>
</tr>
</tbody></table>
<h3 id="㈥-多重条件判断"><a href="#㈥-多重条件判断" class="headerlink" title="㈥ ==多重条件判断=="></a>㈥ ==多重条件判断==</h3><table>
<thead>
<tr>
<th>判断符号</th>
<th>含义</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>-a 和 &amp;&amp;</td>
<td>逻辑与</td>
<td>[ 1 -eq 1 -a 1 -ne 0 ]     [ 1 -eq 1 ] &amp;&amp; [ 1 -ne 0 ]</td>
</tr>
<tr>
<td>-o 和 ||</td>
<td>逻辑或</td>
<td>[ 1 -eq 1 -o 1 -ne 1 ]</td>
</tr>
</tbody></table>
<p><strong>==特别说明：==</strong></p>
<p>&amp;&amp;    前面的表达式==为真==，才会执行后面的代码</p>
<p>||     前面的表达式==为假==，才会执行后面的代码</p>
<p>;         ==只==用于==分割==命令或表达式</p>
<h4 id="①-举例说明"><a href="#①-举例说明" class="headerlink" title="① 举例说明"></a>① 举例说明</h4><ul>
<li>数值比较</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ $(id -u) -eq 0 ] &amp;&amp; echo "the user is admin"</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="variable">$</span> [ <span class="variable">$</span>(<span class="type">id</span> -<span class="type">u</span>) -<span class="type">ne</span> <span class="number">0</span> ] &amp;&amp; echo <span class="string">"the user is not admin"</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="variable">$</span> [ <span class="variable">$</span>(<span class="type">id</span> -<span class="type">u</span>) -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; echo <span class="string">"the user is admin"</span> || echo <span class="string">"the user is not admin"</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># uid=`id -u`</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test $uid -eq 0 &amp;&amp; echo this is admin</span></span><br><span class="line">this is admin</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ $(id -u) -ne 0 ]  || echo this is admin</span></span><br><span class="line">this is admin</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ $(id -u) -eq 0 ]  &amp;&amp; echo this is admin || echo this is not admin</span></span><br><span class="line">this is admin</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># su - stu1</span></span><br><span class="line">[<span class="type">stu1</span>@<span class="type">server</span> ~]<span class="variable">$</span> [ <span class="variable">$</span>(<span class="type">id</span> -<span class="type">u</span>) -<span class="type">eq</span> <span class="number">0</span> ]  &amp;&amp; echo this is admin || echo this is not admin</span><br><span class="line">this is not admin</span><br></pre></td></tr></table></figure>

<ul>
<li>类C风格的数值比较</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">注意：在(( ))中，=表示赋值；==表示判断</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((1==2));echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((1&lt;2));echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((2&gt;=1));echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((2!=1));echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((`id -u`==0));echo $?</span></span><br><span class="line"> </span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((a=123));echo $a</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># unset a</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((a==123));echo $?</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串比较</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">注意：双引号引起来，看作一个整体；= 和 == 在 [ 字符串 ] 比较中都表示判断</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># a='hello world';b=world</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ $a = $b ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ "$a" = "$b" ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ "$a" != "$b" ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ "$a" !== "$b" ];echo $?        错误</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ "$a" == "$b" ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test "$a" != "$b";echo $?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test  表达式</span><br><span class="line">[ 表达式 ]</span><br><span class="line">[[ 表达式 ]]</span><br><span class="line"></span><br><span class="line">思考：[ ] 和 [[ ]] 有什么区别？</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># a=</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test -z $a;echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># a=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test -z $a;echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test -n $a;echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test -n "$a";echo $?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ '' = $a ];echo $?</span></span><br><span class="line"><span class="literal">-bash</span>: [: : <span class="type">unary</span> <span class="type">operator</span> <span class="type">expected</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment"># [[ '' = $a ]];echo $?</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ 1 -eq 0 -a 1 -ne 0 ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ 1 -eq 0 &amp;&amp; 1 -ne 0 ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [[ 1 -eq 0 &amp;&amp; 1 -ne 0 ]];echo $?</span></span><br></pre></td></tr></table></figure>

<h4 id="②-逻辑运算符总结"><a href="#②-逻辑运算符总结" class="headerlink" title="② 逻辑运算符总结"></a>② 逻辑运算符总结</h4><ol>
<li>符号;和&amp;&amp;和||都可以用来分割命令或者表达式</li>
<li>分号（;）完全不考虑前面的语句是否正确执行，都会执行;号后面的内容</li>
<li><code>&amp;&amp;</code>符号，需要考虑&amp;&amp;前面的语句的正确性，前面语句正确执行才会执行&amp;&amp;后的内容；反之亦然</li>
<li><code>||</code>符号，需要考虑||前面的语句的非正确性，前面语句执行错误才会执行||后内容；反之亦然</li>
<li>如果&amp;&amp;和||一起出现，从左往右依次看，按照以上原则</li>
</ol>
<h1 id="二、流程控制语句"><a href="#二、流程控制语句" class="headerlink" title="二、流程控制语句"></a>二、流程控制语句</h1><p><strong>关键词：==选择==（人生漫漫长路，我该何去何从:vertical_traffic_light:）</strong></p>
<h2 id="1-基本语法结构"><a href="#1-基本语法结构" class="headerlink" title="1. 基本语法结构"></a>1. 基本语法结构</h2><h3 id="㈠-if结构"><a href="#㈠-if结构" class="headerlink" title="㈠ ==if结构=="></a>㈠ ==if结构==</h3><p><strong>箴言1：只要正确，就要一直向前冲:v:</strong></p>
<p><strong>==F==</strong>:表示false，为假</p>
<p><strong>==T==</strong>:表示true，为真</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="type">condition</span> ];then</span><br><span class="line">		command</span><br><span class="line">		command</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> test 条件;then</span><br><span class="line">	命令</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ 条件 ]];then</span><br><span class="line">	命令</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[ 条件 ] &amp;&amp; command</span><br></pre></td></tr></table></figure>

<p><img src="./%E6%B5%81%E7%A8%8B%E5%88%A4%E6%96%AD1.png" alt="流程判断1"></p>
<h3 id="㈡-if…else结构"><a href="#㈡-if…else结构" class="headerlink" title="㈡ ==if…else结构=="></a>㈡ ==if…else结构==</h3><p><strong>箴言2：分叉路口，二选一</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="type">condition</span> ];then</span><br><span class="line">		command1</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		command2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[ 条件 ] &amp;&amp; command1 || command2</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%B5%81%E7%A8%8B%E5%88%A4%E6%96%AD2.png" alt="流程判断2"></p>
<p><strong>小试牛刀：</strong></p>
<p>==让用户自己输入==字符串，==如果==用户输入的是hello，请打印world，==否则==打印“请输入hello”</p>
<ol>
<li><code>read定义变量</code></li>
<li>if….else…</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"></span><br><span class="line">read <span class="literal">-p</span> <span class="string">'请输入一个字符串:'</span> str</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$str</span>"</span> = <span class="string">'hello'</span> ];then</span><br><span class="line">    echo <span class="string">'world'</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    echo <span class="string">'请输入hello!'</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> <span class="comment">#!/bin/env bash</span></span><br><span class="line">  <span class="number">2</span></span><br><span class="line">  <span class="number">3</span> read <span class="literal">-p</span> <span class="string">"请输入一个字符串:"</span> str</span><br><span class="line">  <span class="number">4</span> <span class="keyword">if</span> [ <span class="string">"<span class="variable">$str</span>"</span> = <span class="string">"hello"</span> ]</span><br><span class="line">  <span class="number">5</span> then</span><br><span class="line">  <span class="number">6</span>     echo world</span><br><span class="line">  <span class="number">7</span> <span class="keyword">else</span></span><br><span class="line">  <span class="number">8</span>     echo <span class="string">"请输入hello!"</span></span><br><span class="line">  <span class="number">9</span> fi</span><br><span class="line">  </span><br><span class="line">  echo <span class="string">"该脚本需要传递参数"</span></span><br><span class="line">  <span class="number">1</span> <span class="keyword">if</span> [ <span class="variable">$1</span> = <span class="type">hello</span> ];then</span><br><span class="line">  <span class="number">2</span>         echo <span class="string">"hello"</span></span><br><span class="line">  <span class="number">3</span> <span class="keyword">else</span></span><br><span class="line">  <span class="number">4</span>         echo <span class="string">"请输入hello"</span></span><br><span class="line">  <span class="number">5</span> fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"></span><br><span class="line">A=hello</span><br><span class="line">B=world</span><br><span class="line">C=hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"<span class="variable">$A</span>"</span> ];then</span><br><span class="line">        echo <span class="string">"<span class="variable">$B</span>"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        echo <span class="string">"<span class="variable">$C</span>"</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read <span class="literal">-p</span> <span class="string">'请输入一个字符串:'</span> str;</span><br><span class="line"> [ <span class="string">"<span class="variable">$str</span>"</span> = <span class="string">'hello'</span> ] &amp;&amp; echo <span class="string">'world'</span> ||  echo <span class="string">'请输入hello!'</span></span><br></pre></td></tr></table></figure>



<h3 id="㈢-if…elif…else结构"><a href="#㈢-if…elif…else结构" class="headerlink" title="㈢ ==if…elif…else结构=="></a>㈢ ==if…elif…else结构==</h3><p><strong>箴言3：选择很多，能走的只有一条</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="type">condition1</span> ];then</span><br><span class="line">		command1  	结束</span><br><span class="line">	elif [ <span class="type">condition2</span> ];then</span><br><span class="line">		command2   	结束</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		command3</span><br><span class="line">fi</span><br><span class="line">注释：</span><br><span class="line">如果条件<span class="number">1</span>满足，执行命令<span class="number">1</span>后结束；如果条件<span class="number">1</span>不满足，再看条件<span class="number">2</span>，如果条件<span class="number">2</span>满足执行命令<span class="number">2</span>后结束；如果条件<span class="number">1</span>和条件<span class="number">2</span>都不满足执行命令<span class="number">3</span>结束.</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%B5%81%E7%A8%8B%E5%88%A4%E6%96%AD3.png" alt="流程判断3"></p>
<h3 id="㈣-层层嵌套结构"><a href="#㈣-层层嵌套结构" class="headerlink" title="㈣ 层层嵌套结构"></a>㈣ 层层嵌套结构</h3><p><strong>箴言4：多次判断，带你走出人生迷雾。</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="type">condition1</span> ];then</span><br><span class="line">		command1		</span><br><span class="line">		<span class="keyword">if</span> [ <span class="type">condition2</span> ];then</span><br><span class="line">			command2</span><br><span class="line">		fi</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span> [ <span class="type">condition3</span> ];then</span><br><span class="line">			command3</span><br><span class="line">		elif [ <span class="type">condition4</span> ];then</span><br><span class="line">			command4</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			command5</span><br><span class="line">		fi</span><br><span class="line">fi</span><br><span class="line">注释：</span><br><span class="line">如果条件<span class="number">1</span>满足，执行命令<span class="number">1</span>；如果条件<span class="number">2</span>也满足执行命令<span class="number">2</span>，如果不满足就只执行命令<span class="number">1</span>结束；</span><br><span class="line">如果条件<span class="number">1</span>不满足，不看条件<span class="number">2</span>；直接看条件<span class="number">3</span>，如果条件<span class="number">3</span>满足执行命令<span class="number">3</span>；如果不满足则看条件<span class="number">4</span>，如果条件<span class="number">4</span>满足执行命令<span class="number">4</span>；否则执行命令<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><img src="/%E6%B5%81%E7%A8%8B%E5%88%A4%E6%96%AD4.png" alt="流程判断4"></p>
<h2 id="2-应用案例"><a href="#2-应用案例" class="headerlink" title="2. 应用案例"></a>2. 应用案例</h2><h3 id="㈠-判断两台主机是否ping通"><a href="#㈠-判断两台主机是否ping通" class="headerlink" title="㈠ 判断两台主机是否ping通"></a>㈠ 判断两台主机是否ping通</h3><p><strong>需求：</strong>判断==当前主机==是否和==远程主机==是否ping通</p>
<h4 id="①-思路"><a href="#①-思路" class="headerlink" title="① 思路"></a>① 思路</h4><ol>
<li>使用哪个命令实现  <code>ping -c次数</code></li>
<li>根据命令的==执行结果状态==来判断是否通<code>$?</code></li>
<li>根据逻辑和语法结构来编写脚本(条件判断或者流程控制)</li>
</ol>
<h4 id="②-落地实现"><a href="#②-落地实现" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># 该脚本用于判断当前主机是否和远程指定主机互通</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式定义变量，让用户自己决定ping哪个主机</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请输入你要ping的主机的IP:"</span> ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ping程序判断主机是否互通</span></span><br><span class="line">ping <span class="literal">-c1</span> <span class="variable">$ip</span> &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">	echo <span class="string">"当前主机和远程主机<span class="variable">$ip</span>是互通的"</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> 	echo <span class="string">"当前主机和远程主机<span class="variable">$ip</span>不通的"</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">逻辑运算符</span><br><span class="line">test <span class="variable">$</span>? <span class="operator">-eq</span> <span class="number">0</span> &amp;&amp;  echo <span class="string">"当前主机和远程主机<span class="variable">$ip</span>是互通的"</span> || echo <span class="string">"当前主机和远程主机<span class="variable">$ip</span>不通的"</span></span><br></pre></td></tr></table></figure>

<h3 id="㈡-判断一个进程是否存在"><a href="#㈡-判断一个进程是否存在" class="headerlink" title="㈡ 判断一个进程是否存在"></a>㈡ 判断一个进程是否存在</h3><p><strong>需求：</strong>判断web服务器中httpd进程是否存在</p>
<h4 id="①-思路-1"><a href="#①-思路-1" class="headerlink" title="① 思路"></a>① 思路</h4><ol>
<li>查看进程的相关命令   ps   pgrep</li>
<li>根据命令的返回状态值来判断进程是否存在</li>
<li>根据逻辑用脚本语言实现</li>
</ol>
<h4 id="②-落地实现-1"><a href="#②-落地实现-1" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># 判断一个程序(httpd)的进程是否存在</span></span><br><span class="line">pgrep httpd &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">	echo <span class="string">"当前httpd进程不存在"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	echo <span class="string">"当前httpd进程存在"</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">test <span class="variable">$</span>? <span class="operator">-eq</span> <span class="number">0</span> &amp;&amp; echo <span class="string">"当前httpd进程存在"</span> || echo <span class="string">"当前httpd进程不存在"</span></span><br></pre></td></tr></table></figure>

<h4 id="③-补充命令"><a href="#③-补充命令" class="headerlink" title="③ 补充命令"></a>③ 补充命令</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pgrep命令：以名称为依据从运行进程队列中查找进程，并显示查找到的进程id</span><br><span class="line">选项</span><br><span class="line"><span class="literal">-o</span>：仅显示找到的最小（起始）进程号;</span><br><span class="line"><span class="literal">-n</span>：仅显示找到的最大（结束）进程号；</span><br><span class="line"><span class="literal">-l</span>：显示进程名称；</span><br><span class="line"><span class="literal">-P</span>：指定父进程号；pgrep <span class="literal">-p</span> <span class="number">4764</span>  查看父进程下的子进程id</span><br><span class="line"><span class="literal">-g</span>：指定进程组；</span><br><span class="line"><span class="literal">-t</span>：指定开启进程的终端；</span><br><span class="line"><span class="literal">-u</span>：指定进程的有效用户ID。</span><br></pre></td></tr></table></figure>

<h3 id="㈢-判断一个服务是否正常"><a href="#㈢-判断一个服务是否正常" class="headerlink" title="㈢ 判断一个服务是否正常"></a>㈢ 判断一个服务是否正常</h3><p><strong>需求：</strong>判断门户网站是否能够正常访问</p>
<h4 id="①-思路-2"><a href="#①-思路-2" class="headerlink" title="① 思路"></a>① 思路</h4><ol>
<li>可以判断进程是否存在，用/etc/init.d/httpd status判断状态等方法</li>
<li>最好的方法是==直接去访问==一下，通过访问成功和失败的返回值来判断<ul>
<li>Linux环境，==wget==  curl  elinks -dump</li>
</ul>
</li>
</ol>
<h4 id="②-落地实现-2"><a href="#②-落地实现-2" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># 判断门户网站是否能够正常提供服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">web_server=www.itcast.cn</span><br><span class="line"><span class="comment">#访问网站</span></span><br><span class="line">wget <span class="literal">-P</span> /shell/ <span class="variable">$web_server</span> &amp;&gt;/dev/null</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; echo <span class="string">"当前网站服务是ok"</span> &amp;&amp; rm <span class="operator">-f</span> /shell/index.* || echo <span class="string">"当前网站服务不ok，请立刻处理"</span></span><br></pre></td></tr></table></figure>

<p>##3. 课堂练习</p>
<h3 id="㈠-判断用户是否存在"><a href="#㈠-判断用户是否存在" class="headerlink" title="㈠ 判断用户是否存在"></a>㈠ 判断用户是否存在</h3><p><strong>需求1：</strong>输入一个用户，用脚本判断该用户是否存在</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#!/bin/env bash</span></span><br><span class="line">  <span class="number">2</span> read <span class="literal">-p</span> <span class="string">"请输入一个用户名："</span> user_name</span><br><span class="line">  <span class="number">3</span> id <span class="variable">$user_name</span> &amp;&gt;/dev/null</span><br><span class="line">  <span class="number">4</span> <span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">  <span class="number">6</span>     echo <span class="string">"该用户存在！"</span></span><br><span class="line">  <span class="number">7</span> <span class="keyword">else</span></span><br><span class="line">  <span class="number">8</span>     echo <span class="string">"用户不存在！"</span></span><br><span class="line">  <span class="number">9</span> fi</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 判断 用户（id） 是否存在</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"输入壹个用户："</span> id</span><br><span class="line">id <span class="variable">$id</span> &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">        echo <span class="string">"该用户存在"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        echo <span class="string">"该用户不存在"</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请输入你要查询的用户名:"</span> username</span><br><span class="line">grep <span class="literal">-w</span> <span class="variable">$username</span> /etc/passwd &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">    echo <span class="string">"该用户已存在"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    echo <span class="string">"该用户不存在"</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请输入你要检查的用户名："</span> name</span><br><span class="line">id <span class="variable">$name</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]</span><br><span class="line">then</span><br><span class="line">echo 用户<span class="string">"<span class="variable">$name</span>"</span>已经存在</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo 用户<span class="string">"<span class="variable">$name</span>"</span>不存在</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment">#判断用户是否存在</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请写出用户名"</span> id</span><br><span class="line">id <span class="variable">$id</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">        echo <span class="string">"用户存在"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        echo <span class="string">"用户不存在"</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">'请输入用户名:'</span> username</span><br><span class="line">id <span class="variable">$username</span> &amp;&gt;/dev/null</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; echo <span class="string">'用户存在'</span> || echo <span class="string">'不存在'</span></span><br></pre></td></tr></table></figure>

<h3 id="㈡-判断软件包是否安装"><a href="#㈡-判断软件包是否安装" class="headerlink" title="㈡ 判断软件包是否安装"></a>㈡ 判断软件包是否安装</h3><p><strong>需求2：</strong>用脚本判断一个软件包是否安装，如果没安装则安装它（假设本地yum已配合）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="㈢-判断当前主机的内核版本"><a href="#㈢-判断当前主机的内核版本" class="headerlink" title="㈢ 判断当前主机的内核版本"></a>㈢ 判断当前主机的内核版本</h3><p><strong>需求3：</strong>判断当前内核主版本是否为2，且次版本是否大于等于6；如果都满足则输出当前内核版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">思路：</span><br><span class="line"><span class="number">1</span>. 先查看内核的版本号	uname <span class="literal">-r</span></span><br><span class="line"><span class="number">2</span>. 先将内核的版本号保存到一个变量里，然后再根据需求截取出该变量的一部分：主版本和次版本</span><br><span class="line"><span class="number">3</span>. 根据需求进步判断</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">kernel=`uname <span class="literal">-r</span>`</span><br><span class="line">var1=`echo <span class="variable">$kernel</span>|cut <span class="literal">-d</span>. <span class="literal">-f1</span>`</span><br><span class="line">var2=`echo <span class="variable">$kernel</span>|cut <span class="literal">-d</span>. <span class="literal">-f2</span>`</span><br><span class="line">test <span class="variable">$var1</span> <span class="operator">-eq</span> <span class="number">2</span> <span class="literal">-a</span> <span class="variable">$var2</span> <span class="operator">-ge</span> <span class="number">6</span> &amp;&amp; echo <span class="variable">$kernel</span> || echo <span class="string">"当前内核版本不符合要求"</span></span><br><span class="line">或者</span><br><span class="line">[ <span class="variable">$var1</span> -<span class="type">eq</span> <span class="number">2</span> -<span class="type">a</span> <span class="variable">$var2</span> -<span class="type">ge</span> <span class="number">6</span> ] &amp;&amp; echo <span class="variable">$kernel</span> || echo <span class="string">"当前内核版本不符合要求"</span></span><br><span class="line">或者</span><br><span class="line">[[ <span class="variable">$var1</span> -<span class="type">eq</span> <span class="number">2</span> &amp;&amp; <span class="variable">$var2</span> -<span class="type">ge</span> <span class="number">6</span> ]] &amp;&amp; echo <span class="variable">$kernel</span> || echo <span class="string">"当前内核版本不符合要求"</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">kernel=`uname <span class="literal">-r</span>`</span><br><span class="line">test <span class="variable">$</span>&#123;kernel:<span class="number">0</span>:<span class="number">1</span>&#125; <span class="operator">-eq</span> <span class="number">2</span> <span class="literal">-a</span> <span class="variable">$</span>&#123;kernel:<span class="number">2</span>:<span class="number">1</span>&#125; <span class="operator">-ge</span> <span class="number">6</span> &amp;&amp; echo <span class="variable">$kernel</span> || echo <span class="string">'不符合要求'</span></span><br><span class="line"></span><br><span class="line">其他命令参考：</span><br><span class="line">uname <span class="literal">-r</span>|grep ^<span class="number">2</span>.[<span class="number">6</span>-<span class="number">9</span>] || echo <span class="string">'不符合要求'</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="04-SHELL编程之循环语句-2"><a href="#04-SHELL编程之循环语句-2" class="headerlink" title="04_SHELL编程之循环语句_2"></a>04_SHELL编程之循环语句_2</h1><!--more-->
<hr>
<p>#本机课程目标</p>
<ul>
<li>掌握for循环语句的基本语法结构</li>
<li>掌握while和until循环语句的基本语法结构</li>
</ul>
<h1 id="一、-for循环语句"><a href="#一、-for循环语句" class="headerlink" title="一、==for循环语句=="></a>一、==for循环语句==</h1><p><strong>关键词：爱的魔力转圈圈</strong>:innocent:</p>
<h2 id="1-for循环语法结构"><a href="#1-for循环语法结构" class="headerlink" title="1. for循环语法结构"></a>1. for循环语法结构</h2><h3 id="㈠-列表-循环"><a href="#㈠-列表-循环" class="headerlink" title="㈠ ==列表==循环"></a>㈠ ==列表==循环</h3><blockquote>
<p>列表for循环：用于将一组命令执行<strong>==已知的次数==</strong></p>
</blockquote>
<ul>
<li><strong>基本语法格式</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> &#123;list&#125;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">          command </span><br><span class="line">          command</span><br><span class="line">          …</span><br><span class="line">     done</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> a b c</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">         command</span><br><span class="line">         command</span><br><span class="line">     done</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>举例说明</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for var in &#123;1..10&#125;;do echo $var;done</span></span><br><span class="line"><span class="comment"># for var in 1 2 3 4 5;do echo $var;done</span></span><br><span class="line"><span class="comment"># for var in `seq 10`;do echo $var;done</span></span><br><span class="line"><span class="comment"># for var in $(seq 10);do echo $var;done</span></span><br><span class="line"><span class="comment"># for var in &#123;0..10..2&#125;;do echo $var;done</span></span><br><span class="line"><span class="comment"># for var in &#123;2..10..2&#125;;do echo $var;done</span></span><br><span class="line"><span class="comment"># for var in &#123;10..1&#125;;do echo $var;done</span></span><br><span class="line"><span class="comment"># for var in &#123;10..1..-2&#125;;do echo $var;done</span></span><br><span class="line"><span class="comment"># for var in `seq 10 -2 1`;do echo $var;done</span></span><br></pre></td></tr></table></figure>

<h3 id="㈡-不带列表循环"><a href="#㈡-不带列表循环" class="headerlink" title="㈡ 不带列表循环"></a>㈡ 不带列表循环</h3><blockquote>
<p> 不带列表的for循环执行时由<strong>用户指定参数和参数的个数</strong></p>
</blockquote>
<ul>
<li><strong>基本语法格式</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> variable</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        command </span><br><span class="line">        command</span><br><span class="line">        …</span><br><span class="line">   done</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>举例说明</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> var</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">echo <span class="variable">$var</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo <span class="string">"脚本后面有<span class="variable">$</span>#个参数"</span></span><br></pre></td></tr></table></figure>

<h3 id="㈢-类C风格的for循环"><a href="#㈢-类C风格的for循环" class="headerlink" title="㈢ 类C风格的for循环"></a>㈢ 类C风格的for循环</h3><ul>
<li><strong>基本语法结构</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(( expr1;expr2;expr3 ))</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		command</span><br><span class="line">		command</span><br><span class="line">		…</span><br><span class="line">	done</span><br><span class="line"><span class="keyword">for</span> (( i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		echo <span class="variable">$i</span></span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">expr1：定义变量并赋初值</span><br><span class="line">expr2：决定是否进行循环（条件）</span><br><span class="line">expr3：决定循环变量如何改变，决定循环什么时候退出</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>举例说明</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for ((i=1;i&lt;=5;i++));do echo $i;done</span></span><br><span class="line"><span class="comment"># for ((i=1;i&lt;=10;i+=2));do echo $i;done</span></span><br><span class="line"><span class="comment"># for ((i=2;i&lt;=10;i+=2));do echo $i;done</span></span><br></pre></td></tr></table></figure>

<h2 id="2-应用案例-1"><a href="#2-应用案例-1" class="headerlink" title="2. 应用案例"></a>2. 应用案例</h2><h3 id="㈠-脚本-计算-1-100奇数和"><a href="#㈠-脚本-计算-1-100奇数和" class="headerlink" title="㈠ 脚本==计算==1-100奇数和"></a>㈠ 脚本==计算==1-100奇数和</h3><h4 id="①-思路-3"><a href="#①-思路-3" class="headerlink" title="① 思路"></a>① 思路</h4><ol>
<li>定义一个变量来保存奇数的和   ==sum===0</li>
<li>找出1-100的奇数，保存到另一个变量里  ==i===遍历出来的奇数</li>
<li>从1-100中找出奇数后，再相加，然后将和赋值给变量  循环变量  for</li>
<li>遍历完毕后，将sum的值打印出来</li>
</ol>
<h4 id="②-落地实现（条条大路通罗马）"><a href="#②-落地实现（条条大路通罗马）" class="headerlink" title="② 落地实现（条条大路通罗马）"></a>② 落地实现（条条大路通罗马）</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># 计算1-100的奇数和</span></span><br><span class="line"><span class="comment"># 定义变量来保存奇数和</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#for循环遍历1-100的奇数，并且相加，把结果重新赋值给sum</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">100</span>..<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	let sum=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"><span class="comment">#打印所有奇数的和</span></span><br><span class="line">echo <span class="string">"1-100的奇数和是:<span class="variable">$sum</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法<span class="number">1</span>：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">100</span>..<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	sum=<span class="variable">$</span>[<span class="variable">$i</span>+<span class="variable">$sum</span>]</span><br><span class="line">done</span><br><span class="line">echo <span class="string">"1-100的奇数和为:<span class="variable">$sum</span>"</span></span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i+=<span class="number">2</span>))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	let sum=<span class="variable">$i</span>+<span class="variable">$sum</span></span><br><span class="line">done</span><br><span class="line">echo <span class="string">"1-100的奇数和为:<span class="variable">$sum</span>"</span></span><br><span class="line"></span><br><span class="line">方法<span class="number">3</span>：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$</span>[<span class="variable">$i</span>%<span class="number">2</span>] -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">	let sum=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line">	fi</span><br><span class="line">或者</span><br><span class="line">test <span class="variable">$</span>[<span class="variable">$i</span>%<span class="number">2</span>] <span class="operator">-ne</span> <span class="number">0</span> &amp;&amp; let sum=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line"></span><br><span class="line">done</span><br><span class="line">echo <span class="string">"1-100的奇数和为:<span class="variable">$sum</span>"</span></span><br><span class="line"></span><br><span class="line">方法<span class="number">4</span>：</span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$</span>[<span class="variable">$i</span>%<span class="number">2</span>] -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">	<span class="keyword">continue</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	let sum=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line">	fi</span><br><span class="line">done</span><br><span class="line">echo <span class="string">"1-100的奇数和为:<span class="variable">$sum</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	test <span class="variable">$</span>[<span class="variable">$i</span>%<span class="number">2</span>] <span class="operator">-eq</span> <span class="number">0</span> &amp;&amp; <span class="keyword">continue</span> || let sum=sum+<span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line">echo <span class="string">"1-100的奇数和是:<span class="variable">$sum</span>"</span></span><br></pre></td></tr></table></figure>

<h4 id="③-循环控制语句"><a href="#③-循环控制语句" class="headerlink" title="③ 循环控制语句"></a>③ 循环控制语句</h4><p><strong>循环体：</strong> ==do….done==之间的内容</p>
<ul>
<li>continue：继续；表示==循环体==内下面的代码不执行，重新开始下一次循环</li>
<li>break：打断；马上停止执行本次循环，执行==循环体==后面的代码</li>
<li>exit：表示直接跳出程序</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server ~]# cat for5.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in &#123;1..5&#125;</span><br><span class="line">do</span><br><span class="line">	test $i -eq 2 &amp;&amp; break || touch /tmp/file$i</span><br><span class="line">done</span><br><span class="line">echo hello hahahah</span><br></pre></td></tr></table></figure>

<h3 id="㈡-判断所输整数是否为质数"><a href="#㈡-判断所输整数是否为质数" class="headerlink" title="㈡ 判断所输整数是否为质数"></a>㈡ 判断所输整数是否为质数</h3><p><strong>质数(素数)：</strong>==只能==被1和它本身==整除==的数叫质数。<br>2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</p>
<h4 id="①-思路-4"><a href="#①-思路-4" class="headerlink" title="① 思路"></a>① 思路</h4><ol>
<li>让用户输入一个数，保存到一个变量里   <code>read -p &quot;请输入一个正整数:&quot; num</code></li>
<li>如果能被其他数整除就不是质数——&gt;<code>$num%$i</code>是否等于0    <code>$i=2到​$num-1</code></li>
<li>如果输入的数是1或者2取模根据上面判断又不符合，所以先排除1和2</li>
<li>测试序列从2开始，输入的数是4——&gt;得出结果<code>$num</code>不能和<code>$i</code>相等，并且<code>$num</code>不能小于<code>$i</code></li>
</ol>
<h4 id="②-落地实现-3"><a href="#②-落地实现-3" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment">#定义变量来保存用户所输入数字</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请输入一个正整数字:"</span> number</span><br><span class="line"></span><br><span class="line"><span class="comment">#先排除用户输入的数字1和2</span></span><br><span class="line">[ <span class="variable">$number</span> -<span class="type">eq</span> <span class="number">1</span> ] &amp;&amp; echo <span class="string">"<span class="variable">$number</span>不是质数"</span> &amp;&amp; <span class="keyword">exit</span></span><br><span class="line">[ <span class="variable">$number</span> -<span class="type">eq</span> <span class="number">2</span> ] &amp;&amp; echo <span class="string">"<span class="variable">$number</span>是质数"</span> &amp;&amp; <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环判断用户所输入的数字是否质数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq <span class="number">2</span> <span class="variable">$</span>[<span class="variable">$number</span>-<span class="number">1</span>]`</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	 [ <span class="variable">$</span>[<span class="variable">$number</span>%<span class="variable">$i</span>] -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; echo <span class="string">"<span class="variable">$number</span>不是质数"</span> &amp;&amp; <span class="keyword">exit</span></span><br><span class="line">	done</span><br><span class="line">echo <span class="string">"<span class="variable">$number</span>是质数"</span></span><br><span class="line"></span><br><span class="line">优化思路：没有必要全部产生<span class="number">2</span>~<span class="variable">$</span>[<span class="variable">$number</span>-<span class="number">1</span>]序列，只需要产生一半即可。</span><br><span class="line"></span><br><span class="line">更好解决办法：类C风格完美避开了生成序列的坑</span><br><span class="line"><span class="keyword">for</span> (( i=<span class="number">2</span>;i&lt;=<span class="variable">$</span>[<span class="variable">$number</span>-<span class="number">1</span>];i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        [ <span class="variable">$</span>[<span class="variable">$number</span>%<span class="variable">$i</span>] -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; echo <span class="string">"<span class="variable">$number</span>不是质数"</span> &amp;&amp; <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">done</span><br><span class="line">echo <span class="string">"<span class="variable">$number</span>是质数"</span></span><br></pre></td></tr></table></figure>

<h3 id="㈢-批量创建用户"><a href="#㈢-批量创建用户" class="headerlink" title="㈢ 批量创建用户"></a>㈢ 批量创建用户</h3><p><strong>需求：</strong>批量加5个新用户，以u1到u5命名，并统一加一个新组，组名为class,统一改密码为123</p>
<h4 id="①-思路-5"><a href="#①-思路-5" class="headerlink" title="① 思路"></a>① 思路</h4><ol>
<li>添加用户的命令    <code>useradd -G class</code></li>
<li>判断class组是否存在  <code>grep -w ^class /etc/group</code> 或者<code>groupadd class</code></li>
<li>根据题意，判断该脚本循环5次来添加用户  <code>for</code></li>
<li>给用户设置密码，应该放到循环体里面</li>
</ol>
<h4 id="②-落地实现-4"><a href="#②-落地实现-4" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment">#判断class组是否存在</span></span><br><span class="line">grep <span class="literal">-w</span> ^<span class="class"><span class="keyword">class</span> /<span class="title">etc</span>/<span class="title">group</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class"><span class="title">test</span> $? -<span class="title">ne</span> 0 &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#循环创建用户</span></span><br><span class="line"><span class="class"><span class="title">for</span> ((<span class="title">i</span>=1;<span class="title">i</span>&lt;=5;<span class="title">i</span>++))</span></span><br><span class="line"><span class="class"><span class="title">do</span></span></span><br><span class="line"><span class="class">	<span class="title">useradd</span> -<span class="title">G</span> <span class="title">class</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class">	<span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br><span class="line"><span class="class">#用户创建信息保存日志文件</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">方法一：</span></span><br><span class="line"><span class="class">#!/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="class">#判断<span class="title">class</span>组是否存在</span></span><br><span class="line"><span class="class"><span class="title">grep</span> -<span class="title">w</span> <span class="title">class</span> /<span class="title">etc</span>/<span class="title">group</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class">[ $? -<span class="title">ne</span> 0 ] &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span></span></span><br><span class="line"><span class="class">#批量创建5个用户</span></span><br><span class="line"><span class="class"><span class="title">for</span> <span class="title">i</span> <span class="title">in</span></span> &#123;<span class="number">1</span>..<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	useradd <span class="literal">-G</span> <span class="class"><span class="keyword">class</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class">	<span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">方法二：</span></span><br><span class="line"><span class="class">#!/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="class">#判断<span class="title">class</span>组是否存在</span></span><br><span class="line"><span class="class"><span class="title">cut</span> -<span class="title">d</span>: -<span class="title">f1</span> /<span class="title">etc</span>/<span class="title">group</span>|<span class="title">grep</span> -<span class="title">w</span> <span class="title">class</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class">[ $? -<span class="title">ne</span> 0 ] &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#循环增加用户，循环次数5次，<span class="title">for</span>循环,给用户设定密码</span></span><br><span class="line"><span class="class"><span class="title">for</span> ((<span class="title">i</span>=1;<span class="title">i</span>&lt;=5;<span class="title">i</span>++))</span></span><br><span class="line"><span class="class"><span class="title">do</span></span></span><br><span class="line"><span class="class">	<span class="title">useradd</span> <span class="title">u</span>$<span class="title">i</span> -<span class="title">G</span> <span class="title">class</span></span></span><br><span class="line"><span class="class">	<span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">方法三：</span></span><br><span class="line"><span class="class">#!/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="class"><span class="title">grep</span> -<span class="title">w</span> <span class="title">class</span> /<span class="title">etc</span>/<span class="title">group</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class"><span class="title">test</span> $? -<span class="title">ne</span> 0 &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span></span></span><br><span class="line"><span class="class">或者</span></span><br><span class="line"><span class="class"><span class="title">groupadd</span> <span class="title">class</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">for</span> ((<span class="title">i</span>=1;<span class="title">i</span>&lt;=5;<span class="title">i</span>++))</span></span><br><span class="line"><span class="class"><span class="title">do</span></span></span><br><span class="line"><span class="class"><span class="title">useradd</span> -<span class="title">G</span> <span class="title">class</span> <span class="title">u</span>$<span class="title">i</span> &amp;&amp; <span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br></pre></td></tr></table></figure>

<h2 id="3-课堂练习"><a href="#3-课堂练习" class="headerlink" title="3. 课堂练习"></a>3. 课堂练习</h2><h3 id="㈠-批量创建用户"><a href="#㈠-批量创建用户" class="headerlink" title="㈠ 批量创建用户"></a>㈠ 批量创建用户</h3><p><strong>需求1:</strong>批量新建5个用户stu1~stu5，要求这几个用户的家目录都在/rhome.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#判断/rhome是否存在</span></span><br><span class="line">[ -<span class="type">f</span> /<span class="type">rhome</span> ] &amp;&amp; mv /rhome /rhome.bak</span><br><span class="line">test ! <span class="literal">-d</span> /rhome &amp;&amp; mkdir /rhome</span><br><span class="line">或者</span><br><span class="line">[ -<span class="type">f</span> /<span class="type">rhome</span> ] &amp;&amp; mv /rhome /rhome.bak || [ ! -<span class="type">d</span> /<span class="type">rhome</span> ] &amp;&amp; mkdir /rhome </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户，循环5次</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	useradd <span class="literal">-d</span> /rhome/stu<span class="variable">$i</span> stu<span class="variable">$i</span></span><br><span class="line">	echo <span class="number">123</span>|passwd -<span class="literal">-stdin</span> stu<span class="variable">$i</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="㈡-局域网内脚本检查主机网络通讯"><a href="#㈡-局域网内脚本检查主机网络通讯" class="headerlink" title="㈡ 局域网内脚本检查主机网络通讯"></a>㈡ 局域网内脚本检查主机网络通讯</h3><p><strong>需求2：</strong></p>
<p>写一个脚本，局域网内，把能ping通的IP和不能ping通的IP分类，并保存到两个文本文件里</p>
<p>以10.1.1.1~10.1.1.10为例</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span>~<span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">ip=<span class="number">10.1</span>.<span class="number">1</span></span><br><span class="line"><span class="comment">#循环去ping主机的IP</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	ping <span class="literal">-c1</span> <span class="variable">$ip</span>.<span class="variable">$i</span> &amp;&gt;/dev/null</span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">		echo <span class="string">"<span class="variable">$ip</span>.<span class="variable">$i</span> is ok"</span> &gt;&gt; /tmp/ip_up.txt</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		echo <span class="string">"<span class="variable">$ip</span>.<span class="variable">$i</span> is down"</span> &gt;&gt; /tmp/ip_down.txt</span><br><span class="line">	fi</span><br><span class="line">	或者</span><br><span class="line">	[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; echo <span class="string">"<span class="variable">$ip</span>.<span class="variable">$i</span> is ok"</span> &gt;&gt; /tmp/ip_up.txt || echo <span class="string">"<span class="variable">$ip</span>.<span class="variable">$i</span> is down"</span> &gt;&gt; /tmp/ip_down.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell03</span>]<span class="comment"># time ./ping.sh         </span></span><br><span class="line"></span><br><span class="line">real    <span class="number">0</span>m24.<span class="number">129</span>s</span><br><span class="line">user    <span class="number">0</span>m0.<span class="number">006</span>s</span><br><span class="line">sys     <span class="number">0</span>m0.<span class="number">005</span>s</span><br></pre></td></tr></table></figure>

<p><strong>延伸扩展：shell脚本并发</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">并行执行：</span><br><span class="line">&#123;程序&#125;&amp;表示将程序放到后台并行执行，如果需要等待程序执行完毕再进行下面内容，需要加wait</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">ip=<span class="number">10.1</span>.<span class="number">1</span></span><br><span class="line"><span class="comment">#循环去ping主机的IP</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        ping <span class="literal">-c1</span> <span class="variable">$ip</span>.<span class="variable">$i</span> &amp;&gt;/dev/null</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">                echo <span class="string">"<span class="variable">$ip</span>.<span class="variable">$i</span> is ok"</span> &gt;&gt; /tmp/ip_up.txt</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                echo <span class="string">"<span class="variable">$ip</span>.<span class="variable">$i</span> is down"</span> &gt;&gt; /tmp/ip_down.txt</span><br><span class="line">        fi</span><br><span class="line">&#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line">echo <span class="string">"ip is ok...."</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># time ./ping.sh </span></span><br><span class="line">ip is ok...</span><br><span class="line"></span><br><span class="line">real    <span class="number">0</span>m3.<span class="number">091</span>s</span><br><span class="line">user    <span class="number">0</span>m0.<span class="number">001</span>s</span><br><span class="line">sys     <span class="number">0</span>m0.<span class="number">008</span>s</span><br></pre></td></tr></table></figure>

<h3 id="㈢-判断闰年"><a href="#㈢-判断闰年" class="headerlink" title="㈢ 判断闰年"></a>㈢ 判断闰年</h3><p><strong>需求3：</strong></p>
<p>输入一个年份，判断是否是润年（能被4整除但不能被100整除，或能被400整除的年份即为闰年）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"Please input year:(2017)"</span> year</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>[<span class="variable">$year</span>%<span class="number">4</span>] -<span class="type">eq</span> <span class="number">0</span> -<span class="type">a</span> <span class="variable">$</span>[<span class="variable">$year</span>%<span class="number">100</span>] -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">	echo <span class="string">"<span class="variable">$year</span> is leap year"</span></span><br><span class="line">elif [ <span class="variable">$</span>[<span class="variable">$year</span>%<span class="number">400</span>] -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">	echo <span class="string">"<span class="variable">$year</span> is leap year"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	echo <span class="string">"<span class="variable">$year</span> is not leap year"</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>##4. 总结</p>
<ul>
<li>FOR循环语法结构</li>
<li>FOR循环可以结合==条件判断和流程控制语句==<ul>
<li>do ……done  循环体</li>
<li>循环体里可以是命令集合，再加上条件判断以及流程控制</li>
</ul>
</li>
<li>控制循环语句<ul>
<li>continue  继续，跳过本次循环，继续下一次循环</li>
<li>break       打断，跳出循环，==执行==循环体外的代码</li>
<li>exit          退出，直接退出程序</li>
</ul>
</li>
</ul>
<p>#二、<strong>==while循环语句==</strong></p>
<p><strong>特点：</strong>==条件为真就进入循环；条件为假就退出循环==</p>
<p>##1. while循环语法结构</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		command...</span><br><span class="line">	done</span><br><span class="line">	</span><br><span class="line"><span class="keyword">while</span>  [ <span class="number">1</span> -<span class="type">eq</span> <span class="number">1</span> ] 或者 (( <span class="number">1</span> &gt; <span class="number">2</span> ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">     command</span><br><span class="line">     command</span><br><span class="line">     ...</span><br><span class="line"> done</span><br></pre></td></tr></table></figure>

<p><strong>循环打印1-5数字</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FOR</span>循环打印：</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	echo <span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>循环打印：</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	echo <span class="variable">$i</span></span><br><span class="line">	let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="2-应用案例-2"><a href="#2-应用案例-2" class="headerlink" title="2. 应用案例"></a>2. 应用案例</h2><h3 id="㈠-脚本计算1-50偶数和"><a href="#㈠-脚本计算1-50偶数和" class="headerlink" title="㈠ 脚本计算1-50偶数和"></a>㈠ 脚本计算1-50偶数和</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>;i&lt;=<span class="number">50</span>;i+=<span class="number">2</span>))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	let sum=<span class="variable">$sum</span>+<span class="variable">$i</span>  (let sum=sum+i)</span><br><span class="line">done</span><br><span class="line">echo <span class="string">"1-50的偶数和为:<span class="variable">$sum</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line">i=<span class="number">2</span></span><br><span class="line"><span class="comment">#循环打印1-50的偶数和并且计算后重新赋值给sum</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">50</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	let sum=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line">	let i+=<span class="number">2</span>  或者 <span class="variable">$</span>[<span class="variable">$i</span>+<span class="number">2</span>]</span><br><span class="line">done</span><br><span class="line"><span class="comment">#打印sum的值</span></span><br><span class="line">echo <span class="string">"1-50的偶数和为:<span class="variable">$sum</span>"</span></span><br></pre></td></tr></table></figure>

<h3 id="㈡-脚本同步系统时间"><a href="#㈡-脚本同步系统时间" class="headerlink" title="㈡ 脚本同步系统时间"></a>㈡ 脚本同步系统时间</h3><h4 id="①-具体需求"><a href="#①-具体需求" class="headerlink" title="① 具体需求"></a>① 具体需求</h4><ol>
<li>写一个脚本，==30秒==同步一次系统时间，时间同步服务器10.1.1.1</li>
<li>如果同步失败，则进行邮件报警,每次失败都报警</li>
<li>如果同步成功,也进行邮件通知,但是==成功100次==才通知一次</li>
</ol>
<h4 id="②-思路"><a href="#②-思路" class="headerlink" title="② 思路"></a>② 思路</h4><ol>
<li><p>每隔30s同步一次时间，该脚本是一个死循环   while 循环</p>
</li>
<li><p>同步失败发送邮件   1) ntpdate 10.1.1.1  2) rdate -s 10.1.1.1</p>
</li>
<li><p>同步成功100次发送邮件   定义变量保存成功次数 </p>
</li>
</ol>
<h4 id="③-落地实现"><a href="#③-落地实现" class="headerlink" title="③ 落地实现"></a>③ 落地实现</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># 该脚本用于时间同步</span></span><br><span class="line">NTP=<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	ntpdate <span class="variable">$NTP</span> &amp;&gt;/dev/null</span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">		echo <span class="string">"system date failed"</span> |mail <span class="literal">-s</span> <span class="string">"check system date"</span>  root@localhost</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		let count++</span><br><span class="line">		<span class="keyword">if</span> [ <span class="variable">$count</span> -<span class="type">eq</span> <span class="number">100</span> ];then</span><br><span class="line">		echo <span class="string">"systemc date success"</span> |mail <span class="literal">-s</span> <span class="string">"check system date"</span>  root@localhost &amp;&amp; count=<span class="number">0</span></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">sleep <span class="number">30</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line">ntp_server=<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	rdate <span class="literal">-s</span> <span class="variable">$ntp</span><span class="literal">-server</span> &amp;&gt;/dev/null</span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">		echo <span class="string">"system date failed"</span> |mail <span class="literal">-s</span> <span class="string">'check system date'</span>  root@localhost	</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		let count++</span><br><span class="line">		<span class="keyword">if</span> [ <span class="variable">$</span>[<span class="variable">$count</span>%<span class="number">100</span>] -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">		echo <span class="string">"system date successfull"</span> |mail <span class="literal">-s</span> <span class="string">'check system date'</span>  root@localhost &amp;&amp; count=<span class="number">0</span></span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">sleep <span class="number">3</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">以上脚本还有更多的写法，课后自己完成</span><br></pre></td></tr></table></figure>

<p>#三、until循环</p>
<p><strong>特点</strong>：==条件为假就进入循环；条件为真就退出循环==</p>
<h2 id="1-until语法结构"><a href="#1-until语法结构" class="headerlink" title="1. until语法结构"></a>1. until语法结构</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">until expression   [ 1 -eq 1 ]  (( 1 &gt;= 1 ))</span><br><span class="line">	do</span><br><span class="line">		command</span><br><span class="line">		command</span><br><span class="line">		...</span><br><span class="line">	done</span><br></pre></td></tr></table></figure>

<p><strong>打印1-5数字</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	echo <span class="variable">$i</span></span><br><span class="line">	let i++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -<span class="type">gt</span> <span class="number">5</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	echo <span class="variable">$i</span></span><br><span class="line">	let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="2-应用案例-3"><a href="#2-应用案例-3" class="headerlink" title="2. 应用案例"></a>2. 应用案例</h2><p>###㈠ 具体需求</p>
<ol>
<li>使用until语句批量创建10个用户，要求stu1—stu5用户的UID分别为1001—1005；</li>
<li>stu6~stu10用户的家目录分别在/rhome/stu6—/rhome/stu10</li>
</ol>
<h3 id="㈡-思路"><a href="#㈡-思路" class="headerlink" title="㈡ 思路"></a>㈡ 思路</h3><ol>
<li>创建用户语句  <code>useradd -u|useradd -d</code></li>
<li>使用循环语句(until)批量创建用户  <code>until循环语句结构</code></li>
<li>判断用户前5个和后5个  <code>条件判断语句</code></li>
</ol>
<h3 id="㈢-落地实现"><a href="#㈢-落地实现" class="headerlink" title="㈢ 落地实现"></a>㈢ 落地实现</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#！/bin/env bash</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">d</span> /<span class="type">rhome</span> ];then</span><br><span class="line">    echo <span class="string">"/rhome目录已存在"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    mkdir /rhome</span><br><span class="line">    echo <span class="string">"/rhome不存在，已完成创建"</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -<span class="type">gt</span> <span class="number">10</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ];then</span><br><span class="line">                useradd <span class="literal">-u</span> <span class="variable">$</span>[<span class="number">1000</span>+<span class="variable">$i</span>] stu<span class="variable">$i</span></span><br><span class="line">                echo <span class="number">123</span>|passwd -<span class="literal">-stdin</span> stu<span class="variable">$i</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                useradd <span class="literal">-d</span> /rhome/stu<span class="variable">$i</span> stu<span class="variable">$i</span></span><br><span class="line">                echo <span class="number">123</span>|passwd -<span class="literal">-stdin</span> stu<span class="variable">$i</span></span><br><span class="line">        fi</span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">==================================================</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -<span class="type">gt</span> <span class="number">10</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ];then</span><br><span class="line">		useradd <span class="literal">-u</span> <span class="variable">$</span>[<span class="number">1000</span>+<span class="variable">$i</span>] stu<span class="variable">$i</span> &amp;&amp; echo <span class="number">123</span>|passwd -<span class="literal">-stdin</span> stu<span class="variable">$i</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		[ ! -<span class="type">d</span> /<span class="type">rhome</span> ] &amp;&amp; mkdir /rhome</span><br><span class="line">		useradd <span class="literal">-d</span> /rhome/stu<span class="variable">$i</span> stu<span class="variable">$i</span> &amp;&amp; echo <span class="number">123</span>|passwd -<span class="literal">-stdin</span> stu<span class="variable">$i</span>		</span><br><span class="line">	fi</span><br><span class="line">let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h1 id="四、课后作业"><a href="#四、课后作业" class="headerlink" title="四、课后作业"></a>四、课后作业</h1><ol>
<li>判断/tmp/run目录是否存在，如果不存在就建立，如果存在就删除目录里所有文件</li>
<li>输入一个路径，判断路径是否存在，而且输出是文件还是目录，如果是链接文件，还得输出是  有效的连接还是无效的连接 </li>
<li>交互模式要求输入一个ip，然后脚本判断这个IP 对应的主机是否 能ping 通，输出结果类似于：<br>Server  10.1.1.20 is Down! 最后要求把结果邮件到本地管理员root@localhost mail01@localhost</li>
<li>写一个脚本/home/program，要求当给脚本输入参数hello时，脚本返回world,给脚本输入参数world时，脚本返回hello。而脚本没有参数或者参数错误时，屏幕上输出“usage:/home/program hello or world”</li>
<li>写一个脚本自动搭建nfs服务</li>
</ol>
<hr>
<h1 id="05-SHELL编程之嵌套循环-随机数及综合案例"><a href="#05-SHELL编程之嵌套循环-随机数及综合案例" class="headerlink" title="05_SHELL编程之嵌套循环+随机数及综合案例"></a>05_SHELL编程之嵌套循环+随机数及综合案例</h1><!--more-->
<hr>
<p>#课程目标</p>
<ul>
<li>==掌握for循环语句的基本语法结构==</li>
<li>==掌握while和until循环语句的基本语法结构==</li>
<li>能会使用RANDOM产生随机数</li>
<li>理解嵌套循环</li>
</ul>
<h1 id="一、随机数"><a href="#一、随机数" class="headerlink" title="一、随机数"></a>一、随机数</h1><p><strong>关键词：一切都是未知数，永远不知道明天会抽什么风</strong>:wind_chime::sweat_smile:</p>
<h2 id="1-如何生成随机数？"><a href="#1-如何生成随机数？" class="headerlink" title="1. 如何生成随机数？"></a>1. 如何生成随机数？</h2><p><strong>系统变量</strong>：<strong>==RANDOM==</strong>，默认会产生0~32767的随机整数</p>
<p><strong>前言：</strong>要想调用变量，不管你是什么变量都要给钱，而且是美元:heavy_dollar_sign:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">打印一个随机数</span><br><span class="line">echo <span class="variable">$RANDOM</span></span><br><span class="line">查看系统上一次生成的随机数</span><br><span class="line"><span class="comment"># set|grep RANDOM</span></span><br><span class="line">RANDOM=<span class="number">28325</span></span><br><span class="line"></span><br><span class="line">产生<span class="number">0</span>~<span class="number">1</span>之间的随机数</span><br><span class="line">echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">产生<span class="number">0</span>~<span class="number">2</span>之间的随机数</span><br><span class="line">echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">产生<span class="number">0</span>~<span class="number">3</span>之间的随机数</span><br><span class="line">echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">产生<span class="number">0</span>~<span class="number">9</span>内的随机数</span><br><span class="line">echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">产生<span class="number">0</span>~<span class="number">100</span>内的随机数</span><br><span class="line">echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">产生<span class="number">50</span><span class="literal">-100</span>之内的随机数</span><br><span class="line">echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">51</span>+<span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">产生三位数的随机数</span><br><span class="line">echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">900</span>+<span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<h2 id="2-实战案例"><a href="#2-实战案例" class="headerlink" title="2. 实战案例"></a>2. 实战案例</h2><h3 id="㈠-随机产生以139开头的电话号码"><a href="#㈠-随机产生以139开头的电话号码" class="headerlink" title="㈠ 随机产生以139开头的电话号码"></a>㈠ 随机产生以139开头的电话号码</h3><p><strong>具体需求1：</strong></p>
<p>写一个脚本，产生一个phonenum.txt文件，随机产生以139开头的手机号1000个，每个一行。</p>
<h4 id="①-思路-6"><a href="#①-思路-6" class="headerlink" title="① 思路"></a>① 思路</h4><ol>
<li>产生1000个电话号码，脚本需要循环1000次 <code>FOR WHILE UNTIL</code></li>
<li>139+8位,后8位随机产生，可以让每一位数字都随机产生  <code>echo $[$RANDOM%10]</code></li>
<li>将随机产生的数字分别保存到变量里，然后加上139保存到文件里</li>
</ol>
<h4 id="②-落地实现-5"><a href="#②-落地实现-5" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment">#产生1000个以139开头的电话号码并保存文件phonenum.txt</span></span><br><span class="line">file=/shell03/phonenum.txt</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	n1=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n2=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n3=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n4=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n5=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n6=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n7=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n8=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	echo <span class="string">"139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>"</span> &gt;&gt; <span class="variable">$file</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># random phonenum</span></span><br><span class="line"><span class="comment"># 循环1000次产生电话号码并保存到文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">1000</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	n1=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n2=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n3=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n4=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n5=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n6=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n7=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n8=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	echo <span class="string">"139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>"</span> &gt;&gt; phonenum.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">1000</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	n1=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n2=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n3=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n4=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n5=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n6=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n7=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n8=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	echo <span class="string">"139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>"</span> &gt;&gt; phonenum.txt</span><br><span class="line">	let i++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>:继续，跳过本次循环，执行下一次循环</span><br><span class="line"><span class="keyword">break</span>:打断，执行循环体外的代码do..done外</span><br><span class="line"><span class="keyword">exit</span>:退出程序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">1000</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	n1=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n2=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n3=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n4=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n5=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n6=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n7=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n8=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	echo <span class="string">"139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>"</span> &gt;&gt; phonenum.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#create phone num file</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	n1=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n2=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n3=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n4=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n5=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n6=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n7=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n8=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	echo <span class="string">"139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>"</span> |tee <span class="literal">-a</span> phonenum.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	n1=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n2=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n3=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n4=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n5=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n6=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n7=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	n8=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">	echo <span class="string">"139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>"</span> |tee <span class="literal">-a</span> phonenum.txt &amp;&amp; let count++</span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$count</span> -<span class="type">eq</span> <span class="number">1000</span> ];then</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="㈡-随机抽出5位幸运观众"><a href="#㈡-随机抽出5位幸运观众" class="headerlink" title="㈡ 随机抽出5位幸运观众"></a>㈡ 随机抽出5位幸运观众</h3><p><strong>具体需求：</strong></p>
<ol>
<li>在上面的1000个手机号里抽奖==5个==幸运观众，显示出这5个幸运观众。</li>
<li>但只显示头3个数和尾号的4个数，中间的都用*代替</li>
</ol>
<h4 id="①-思路-7"><a href="#①-思路-7" class="headerlink" title="① 思路"></a>① 思路</h4><ol>
<li>确定幸运观众所在的行    <code>0-1000  随机找出一个数字   $[$RANDOM%1000+1]</code></li>
<li>将电话号码提取出来      <code>head -随机产生行号 phonenum.txt |tail -1</code></li>
<li>==显示==前3个和后4个数到屏幕   <code>echo 139****</code></li>
</ol>
<h4 id="②-落地实现-6"><a href="#②-落地实现-6" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">phone=/shell03/phonenum.txt</span><br><span class="line"><span class="comment">#循环抽出5位幸运观众</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="comment">#定位幸运观众所在行号</span></span><br><span class="line">	line=`wc <span class="literal">-l</span> <span class="variable">$phone</span> |cut <span class="literal">-d</span><span class="string">' '</span> <span class="literal">-f1</span>`</span><br><span class="line">	luck_line=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="variable">$line</span>+<span class="number">1</span>]</span><br><span class="line">	<span class="comment">#取出幸运观众所在行的电话号码</span></span><br><span class="line">	luck_num=`head -<span class="variable">$luck_line</span> <span class="variable">$phone</span>|tail <span class="literal">-1</span>`</span><br><span class="line">	<span class="comment">#显示到屏幕</span></span><br><span class="line">	echo <span class="string">"139****<span class="variable">$</span>&#123;luck_num:7:4&#125;"</span></span><br><span class="line">	echo <span class="variable">$luck_num</span> &gt;&gt; luck.txt</span><br><span class="line">	<span class="comment">#删除已经被抽取的幸运观众号码</span></span><br><span class="line">	<span class="comment">#sed -i "/$luck_num/d" $phone</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">file=/shell04/phonenum.txt</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	file_num=`wc <span class="literal">-l</span> <span class="variable">$file</span> |cut <span class="literal">-d</span><span class="string">' '</span> <span class="literal">-f1</span>`</span><br><span class="line">	line=`echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="variable">$file_num</span>+<span class="number">1</span>]`</span><br><span class="line">	luck=`head <span class="literal">-n</span> <span class="variable">$line</span>  <span class="variable">$file</span>|tail <span class="literal">-1</span>`</span><br><span class="line">	echo <span class="string">"139****<span class="variable">$</span>&#123;luck:7:4&#125;"</span> &amp;&amp; echo <span class="variable">$luck</span> &gt;&gt; /shell04/luck_num.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">file=phonenum.txt</span><br><span class="line">line=`cat phonenum.txt |wc <span class="literal">-l</span>`	<span class="number">1000</span></span><br><span class="line">luckline=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="variable">$line</span>+<span class="number">1</span>]</span><br><span class="line">phone=`cat <span class="variable">$file</span>|head -<span class="variable">$luckline</span>|tail <span class="literal">-1</span>`</span><br><span class="line">echo <span class="string">"幸运观众为:139****<span class="variable">$</span>&#123;phone:7:4&#125;"</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># choujiang</span></span><br><span class="line">phone=phonenum.txt</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	num=`wc <span class="literal">-l</span> phonenum.txt |cut <span class="literal">-d</span><span class="string">' '</span> <span class="literal">-f1</span>`</span><br><span class="line">	line=`echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="variable">$num</span>+<span class="number">1</span>]`</span><br><span class="line">	luck=`head -<span class="variable">$line</span> <span class="variable">$phone</span> |tail <span class="literal">-1</span>`</span><br><span class="line">	sed <span class="literal">-i</span> <span class="string">"/<span class="variable">$luck</span>/d"</span> <span class="variable">$phone</span></span><br><span class="line">	echo <span class="string">"幸运观众是:139****<span class="variable">$</span>&#123;luck:7:4&#125;"</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="㈢-批量创建用户-密码随机产生"><a href="#㈢-批量创建用户-密码随机产生" class="headerlink" title="㈢ 批量创建用户(密码随机产生)"></a>㈢ 批量创建用户(密码随机产生)</h3><p><strong>需求：</strong>批量创建5个用户，每个用户的密码为一个随机数</p>
<h4 id="①-思路-8"><a href="#①-思路-8" class="headerlink" title="① 思路"></a>① 思路</h4><ol>
<li>循环5次创建用户</li>
<li>产生一个密码文件来保存用户的随机密码</li>
<li>从密码文件中取出随机密码赋值给用户</li>
</ol>
<h4 id="②-落地实现-7"><a href="#②-落地实现-7" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#crate user and set passwd</span></span><br><span class="line"><span class="comment">#产生一个保存用户名和密码的文件</span></span><br><span class="line">echo user0&#123;<span class="number">1</span>..<span class="number">5</span>&#125;:itcast<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">9000</span>+<span class="number">1000</span>]<span class="comment">#@~|tr ' ' '\n'&gt;&gt; user_pass.file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环创建5个用户</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	user=`head -<span class="variable">$i</span> user_pass.file|tail <span class="literal">-1</span>|cut <span class="literal">-d</span>: <span class="literal">-f1</span>`</span><br><span class="line">	pass=`head -<span class="variable">$i</span> user_pass.file|tail <span class="literal">-1</span>|cut <span class="literal">-d</span>: <span class="literal">-f2</span>`</span><br><span class="line">	useradd <span class="variable">$user</span></span><br><span class="line">	echo <span class="variable">$pass</span>|passwd -<span class="literal">-stdin</span> <span class="variable">$user</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat user_pass.file`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	user=`echo <span class="variable">$i</span>|cut <span class="literal">-d</span>: <span class="literal">-f1</span>`</span><br><span class="line">	pass=`echo <span class="variable">$i</span>|cut <span class="literal">-d</span>: <span class="literal">-f2</span>`</span><br><span class="line">	useradd <span class="variable">$user</span></span><br><span class="line">	echo <span class="variable">$pass</span>|passwd -<span class="literal">-stdin</span> <span class="variable">$user</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#crate user and set passwd</span></span><br><span class="line"><span class="comment">#产生一个保存用户名和密码的文件</span></span><br><span class="line">echo user0&#123;<span class="number">1</span>..<span class="number">3</span>&#125;:itcast<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">9000</span>+<span class="number">1000</span>]<span class="comment">#@~|tr ' ' '\n'|tr ':' ' ' &gt;&gt; user_pass.file</span></span><br><span class="line"><span class="comment">#循环创建5个用户</span></span><br><span class="line"><span class="keyword">while</span> read user pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">useradd <span class="variable">$user</span></span><br><span class="line">echo <span class="variable">$pass</span>|passwd -<span class="literal">-stdin</span> <span class="variable">$user</span></span><br><span class="line">done &lt; user_pass.file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwgen工具产生随机密码：</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell04</span>]<span class="comment"># pwgen -cn1 12</span></span><br><span class="line">Meep5ob1aesa</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell04</span>]<span class="comment"># echo user0&#123;1..3&#125;:$(pwgen -cn1 12)</span></span><br><span class="line">user01:Bahqu9haipho user02:Feiphoh7moo4 user03:eilahj5eth2R</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell04</span>]<span class="comment"># echo user0&#123;1..3&#125;:$(pwgen -cn1 12)|tr ' ' '\n'</span></span><br><span class="line">user01:eiwaShuZo5hi</span><br><span class="line">user02:eiDeih7aim9k</span><br><span class="line">user03:aeBahwien8co</span><br></pre></td></tr></table></figure>

<h1 id="二、嵌套循环"><a href="#二、嵌套循环" class="headerlink" title="二、嵌套循环"></a>二、嵌套循环</h1><p><strong>关键字：大圈套小圈</strong></p>
<p>:clock3:<strong>时钟</strong>：分针与秒针，秒针转⼀圈（60格），分针转1格。循环嵌套就是外层循环⼀次，内层循环⼀轮。</p>
<ol>
<li>一个==循环体==内又包含另一个<strong>完整</strong>的循环结构，称为循环的嵌套。</li>
<li>每次外部循环都会==触发==内部循环，直至内部循环完成，才接着执行下一次的外部循环。</li>
<li>for循环、while循环和until循环可以<strong>相互</strong>嵌套。</li>
</ol>
<p>##1. 应用案例</p>
<h3 id="㈠-打印指定图案"><a href="#㈠-打印指定图案" class="headerlink" title="㈠ 打印指定图案"></a>㈠ 打印指定图案</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">54</span></span><br><span class="line"><span class="number">543</span></span><br><span class="line"><span class="number">5432</span></span><br><span class="line"><span class="number">54321</span></span><br></pre></td></tr></table></figure>

<h3 id="㈡-落地实现1"><a href="#㈡-落地实现1" class="headerlink" title="㈡ 落地实现1"></a>㈡ 落地实现1</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">X轴：</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++));<span class="keyword">do</span> echo <span class="literal">-n</span> <span class="variable">$i</span>;done</span><br><span class="line">Y轴：</span><br><span class="line">负责打印换行</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((y=<span class="number">1</span>;y&lt;=<span class="number">5</span>;y++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> ((x=<span class="number">1</span>;x&lt;=<span class="variable">$y</span>;x++))</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		echo <span class="literal">-n</span> <span class="variable">$x</span></span><br><span class="line">	done</span><br><span class="line">echo</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((y=<span class="number">1</span>;y&lt;=<span class="number">5</span>;y++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	x=<span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> [ <span class="variable">$x</span> -<span class="type">le</span> <span class="variable">$y</span> ]</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		echo <span class="literal">-n</span> <span class="variable">$x</span></span><br><span class="line">		let x++</span><br><span class="line">		done</span><br><span class="line">echo</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="㈢-落地实现2"><a href="#㈢-落地实现2" class="headerlink" title="㈢ 落地实现2"></a>㈢ 落地实现2</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Y轴：打印换行</span><br><span class="line">X轴：打印数字 <span class="number">5</span><span class="literal">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">y=<span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> (( <span class="variable">$y</span> &gt;= <span class="number">1</span> ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> ((x=<span class="number">5</span>;x&gt;=<span class="variable">$y</span>;x--))</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		echo <span class="literal">-n</span> <span class="variable">$x</span></span><br><span class="line">	done</span><br><span class="line">echo</span><br><span class="line">let y--</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> (( y=<span class="number">5</span>;y&gt;=<span class="number">1</span>;y--))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> (( x=<span class="number">5</span>;x&gt;=<span class="variable">$y</span>;x--))</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	echo <span class="literal">-n</span> <span class="variable">$x</span></span><br><span class="line">	done</span><br><span class="line">echo</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">y=<span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$y</span> -<span class="type">ge</span> <span class="number">1</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> ((x=<span class="number">5</span>;x&gt;=<span class="variable">$y</span>;x--))</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	echo <span class="literal">-n</span> <span class="variable">$x</span></span><br><span class="line">	done</span><br><span class="line">echo</span><br><span class="line">let y--</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">y=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> (( <span class="variable">$y</span> &gt;<span class="number">5</span> ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	x=<span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> (( <span class="variable">$x</span> &lt;= <span class="variable">$y</span> ))</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	echo <span class="literal">-n</span> <span class="variable">$</span>[<span class="number">6</span>-<span class="variable">$x</span>]</span><br><span class="line">	let x++</span><br><span class="line">	done	</span><br><span class="line">echo</span><br><span class="line">let y++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">课后打印：</span><br><span class="line"><span class="number">54321</span></span><br><span class="line"><span class="number">5432</span></span><br><span class="line"><span class="number">543</span></span><br><span class="line"><span class="number">54</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>##2. 课堂练习</p>
<p><strong>打印九九乘法表（三种方法）</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=<span class="number">2</span>   <span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>*<span class="number">3</span>=<span class="number">3</span>   <span class="number">2</span>*<span class="number">3</span>=<span class="number">6</span>   <span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>*<span class="number">4</span>=<span class="number">4</span>   <span class="number">2</span>*<span class="number">4</span>=<span class="number">8</span>   <span class="number">3</span>*<span class="number">4</span>=<span class="number">12</span>  <span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>*<span class="number">5</span>=<span class="number">5</span>   <span class="number">2</span>*<span class="number">5</span>=<span class="number">10</span>  <span class="number">3</span>*<span class="number">5</span>=<span class="number">15</span>  <span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span>  <span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>*<span class="number">6</span>=<span class="number">6</span>   <span class="number">2</span>*<span class="number">6</span>=<span class="number">12</span>  <span class="number">3</span>*<span class="number">6</span>=<span class="number">18</span>  <span class="number">4</span>*<span class="number">6</span>=<span class="number">24</span>  <span class="number">5</span>*<span class="number">6</span>=<span class="number">30</span>  <span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>*<span class="number">7</span>=<span class="number">7</span>   <span class="number">2</span>*<span class="number">7</span>=<span class="number">14</span>  <span class="number">3</span>*<span class="number">7</span>=<span class="number">21</span>  <span class="number">4</span>*<span class="number">7</span>=<span class="number">28</span>  <span class="number">5</span>*<span class="number">7</span>=<span class="number">35</span>  <span class="number">6</span>*<span class="number">7</span>=<span class="number">42</span>  <span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>*<span class="number">8</span>=<span class="number">8</span>   <span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span>  <span class="number">3</span>*<span class="number">8</span>=<span class="number">24</span>  <span class="number">4</span>*<span class="number">8</span>=<span class="number">32</span>  <span class="number">5</span>*<span class="number">8</span>=<span class="number">40</span>  <span class="number">6</span>*<span class="number">8</span>=<span class="number">48</span>  <span class="number">7</span>*<span class="number">8</span>=<span class="number">56</span>  <span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>*<span class="number">9</span>=<span class="number">9</span>   <span class="number">2</span>*<span class="number">9</span>=<span class="number">18</span>  <span class="number">3</span>*<span class="number">9</span>=<span class="number">27</span>  <span class="number">4</span>*<span class="number">9</span>=<span class="number">36</span>  <span class="number">5</span>*<span class="number">9</span>=<span class="number">45</span>  <span class="number">6</span>*<span class="number">9</span>=<span class="number">54</span>  <span class="number">7</span>*<span class="number">9</span>=<span class="number">63</span>  <span class="number">8</span>*<span class="number">9</span>=<span class="number">72</span>  <span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Y轴：循环<span class="number">9</span>次，打印<span class="number">9</span>行空行</span><br><span class="line">X轴：循环次数和Y轴相关；打印的是X和Y轴乘积 <span class="variable">$</span>[] <span class="variable">$</span>(())</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((y=<span class="number">1</span>;y&lt;=<span class="number">9</span>;y++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> ((x=<span class="number">1</span>;x&lt;=<span class="variable">$y</span>;x++))</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		echo <span class="operator">-ne</span> <span class="string">"<span class="variable">$x</span>*<span class="variable">$y</span>=<span class="variable">$</span>[<span class="variable">$x</span>*<span class="variable">$y</span>]\t"</span></span><br><span class="line">	done</span><br><span class="line">echo</span><br><span class="line">echo</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">y=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$y</span> -<span class="type">le</span> <span class="number">9</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        x=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> [ <span class="variable">$x</span> -<span class="type">le</span> <span class="variable">$y</span> ]</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">                echo <span class="operator">-ne</span> <span class="string">"<span class="variable">$x</span>*<span class="variable">$y</span>=<span class="variable">$</span>[<span class="variable">$x</span>*<span class="variable">$y</span>]\t"</span></span><br><span class="line">                let x++</span><br><span class="line">        done</span><br><span class="line">echo</span><br><span class="line">echo</span><br><span class="line">let y++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq <span class="number">9</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> `seq <span class="variable">$i</span>`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        echo <span class="operator">-ne</span>  <span class="string">"<span class="variable">$j</span>*<span class="variable">$i</span>=<span class="variable">$</span>[<span class="variable">$i</span>*<span class="variable">$j</span>]\t"</span></span><br><span class="line">    done</span><br><span class="line">echo</span><br><span class="line">echo</span><br><span class="line">done</span><br><span class="line">或者</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">y=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$y</span> -<span class="type">gt</span> <span class="number">9</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        x=<span class="number">1</span></span><br><span class="line">        <span class="keyword">until</span> [ <span class="variable">$x</span> -<span class="type">gt</span> <span class="variable">$y</span> ]</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">                echo <span class="operator">-ne</span> <span class="string">"<span class="variable">$x</span>*<span class="variable">$y</span>=<span class="variable">$</span>[ <span class="variable">$x</span>*<span class="variable">$y</span> ]\t"</span></span><br><span class="line">                let x++</span><br><span class="line">        done</span><br><span class="line">echo</span><br><span class="line">echo</span><br><span class="line">let y++</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h1 id="三、阶段性补充总结"><a href="#三、阶段性补充总结" class="headerlink" title="三、阶段性补充总结"></a>三、阶段性补充总结</h1><h2 id="1、变量定义"><a href="#1、变量定义" class="headerlink" title="1、变量定义"></a>1、变量定义</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-流程控制语句"><a href="#2-流程控制语句" class="headerlink" title="2. 流程控制语句"></a>2. 流程控制语句</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-循环语句"><a href="#3-循环语句" class="headerlink" title="3. 循环语句"></a>3. 循环语句</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-影响shell程序的内置命令"><a href="#4-影响shell程序的内置命令" class="headerlink" title="4. 影响shell程序的内置命令"></a>4. 影响shell程序的内置命令</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span>			退出整个程序</span><br><span class="line"><span class="keyword">break</span>		   结束当前循环，或跳出本层循环</span><br><span class="line"><span class="keyword">continue</span> 	忽略本次循环剩余的代码，直接进行下一次循环</span><br><span class="line">shift			使位置参数向左移动，默认移动<span class="number">1</span>位，可以使用shift <span class="number">2</span></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p><strong>举例说明：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">以下脚本都能够实现用户自定义输入数字，然后脚本计算和：</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># cat shift.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$</span><span class="comment"># -ne 0 ]</span></span><br><span class="line"><span class="type">do</span></span><br><span class="line"><span class="type">let</span> <span class="type">sum</span>=<span class="variable">$sum</span>+<span class="variable">$1</span></span><br><span class="line"><span class="type">shift</span></span><br><span class="line"><span class="type">done</span></span><br><span class="line"><span class="type">echo</span> <span class="type">sum</span>=<span class="variable">$sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># cat for3.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="type">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="type">for</span> <span class="type">i</span></span><br><span class="line"><span class="type">do</span></span><br><span class="line"><span class="type">let</span> <span class="type">sum</span>=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line"><span class="type">done</span></span><br><span class="line"><span class="type">echo</span> <span class="type">sum</span>=<span class="variable">$sum</span></span><br></pre></td></tr></table></figure>

<p>##4. 补充扩展expect</p>
<p>expect 自动应答  tcl语言</p>
<p><strong>需求1：</strong>A远程登录到server上什么都不做</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"><span class="comment"># 开启一个程序</span></span><br><span class="line">spawn ssh root@<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="comment"># 捕获相关内容</span></span><br><span class="line">expect &#123;</span><br><span class="line">        <span class="string">"(yes/no)?"</span> &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">        <span class="string">"password:"</span> &#123; send <span class="string">"123456\r"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">interact   //交互</span><br><span class="line"></span><br><span class="line">脚本执行方式：</span><br><span class="line"><span class="comment"># ./expect1.sh</span></span><br><span class="line"><span class="comment"># /shell04/expect1.sh</span></span><br><span class="line"><span class="comment"># expect -f expect1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>）定义变量</span><br><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line">set ip <span class="number">10.1</span>.<span class="number">1.2</span></span><br><span class="line">set pass <span class="number">123456</span></span><br><span class="line">set timeout <span class="number">5</span></span><br><span class="line">spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line">	<span class="string">"yes/no"</span> &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">	<span class="string">"password:"</span> &#123; send <span class="string">"<span class="variable">$pass</span>\r"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）使用位置参数</span><br><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line">set ip [ <span class="type">lindex</span> <span class="variable">$argv</span> <span class="number">0</span> ]</span><br><span class="line">set pass [ <span class="type">lindex</span> <span class="variable">$argv</span> <span class="number">1</span> ]</span><br><span class="line">set timeout <span class="number">5</span></span><br><span class="line">spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line">	<span class="string">"yes/no"</span> &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">	<span class="string">"password:"</span> &#123; send <span class="string">"<span class="variable">$pass</span>\r"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure>

<p><strong>需求2：</strong>A远程登录到server上操作</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line">set ip <span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">set pass <span class="number">123456</span></span><br><span class="line">set timeout <span class="number">5</span></span><br><span class="line">spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line">	<span class="string">"yes/no"</span> &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">	<span class="string">"password:"</span> &#123; send <span class="string">"<span class="variable">$pass</span>\r"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect <span class="string">"#"</span></span><br><span class="line">send <span class="string">"rm -rf /tmp/*\r"</span></span><br><span class="line">send <span class="string">"touch /tmp/file&#123;1..3&#125;\r"</span></span><br><span class="line">send <span class="string">"date\r"</span></span><br><span class="line">send <span class="string">"exit\r"</span></span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure>

<p><strong>需求3：</strong>shell脚本和expect结合使用，在多台服务器上创建1个用户</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell04</span>]<span class="comment"># cat ip.txt </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span> <span class="number">123456</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.2</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 循环</span><br><span class="line"><span class="number">2</span>. 登录远程主机——&gt;ssh——&gt;从ip.txt文件里获取IP和密码分别赋值给两个变量</span><br><span class="line"><span class="number">3</span>. 使用expect程序来解决交互问题</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 循环在指定的服务器上创建用户和文件</span></span><br><span class="line"><span class="keyword">while</span> read ip pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	/usr/bin/expect &lt;&lt;<span class="literal">-END</span> &amp;&gt;/dev/null</span><br><span class="line">	spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">	expect &#123;</span><br><span class="line">	<span class="string">"yes/no"</span> &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">	<span class="string">"password:"</span> &#123; send <span class="string">"<span class="variable">$pass</span>\r"</span> &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	expect <span class="string">"#"</span> &#123; send <span class="string">"useradd yy1;rm -rf /tmp/*;exit\r"</span> &#125;</span><br><span class="line">	expect eof</span><br><span class="line">	<span class="keyword">END</span></span><br><span class="line">done &lt; ip.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">cat ip.txt|<span class="keyword">while</span> read ip pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        /usr/bin/expect &lt;&lt;<span class="literal">-HOU</span></span><br><span class="line">        spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">        expect &#123;</span><br><span class="line">                <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">                <span class="string">"password:"</span> &#123; send <span class="string">"<span class="variable">$pass</span>\r"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        expect <span class="string">"#"</span></span><br><span class="line">        send <span class="string">"hostname\r"</span></span><br><span class="line">        send <span class="string">"exit\r"</span></span><br><span class="line">        expect eof</span><br><span class="line">        HOU</span><br><span class="line"></span><br><span class="line">        &#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line">echo <span class="string">"user is ok...."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> read ip pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        /usr/bin/expect &lt;&lt;<span class="literal">-HOU</span></span><br><span class="line">        spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">        expect &#123;</span><br><span class="line">                <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">                <span class="string">"password:"</span> &#123; send <span class="string">"<span class="variable">$pass</span>\r"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        expect <span class="string">"#"</span></span><br><span class="line">        send <span class="string">"hostname\r"</span></span><br><span class="line">        send <span class="string">"exit\r"</span></span><br><span class="line">        expect eof</span><br><span class="line">        HOU</span><br><span class="line"></span><br><span class="line">        &#125;&amp;</span><br><span class="line">done&lt;ip.txt</span><br><span class="line">wait</span><br><span class="line">echo <span class="string">"user is ok...."</span></span><br></pre></td></tr></table></figure>



<p>#四、综合案例</p>
<p>##1. 实战案例1</p>
<h3 id="㈠-具体需求"><a href="#㈠-具体需求" class="headerlink" title="㈠ 具体需求"></a>㈠ 具体需求</h3><p>写一个脚本，将跳板机上yunwei用户的公钥推送到局域网内可以ping通的所有机器上</p>
<p>说明：主机和密码文件已经提供</p>
<p>10.1.1.1:123456</p>
<p>10.1.1.2:123456</p>
<p>###㈡ 案例分析</p>
<ul>
<li><strong>关闭防火墙和selinux</strong></li>
<li>判断ssh服务是否开启（默认ok）</li>
<li>==循环判断给定密码文件里的哪些IP是可以ping通== </li>
<li>==判断IP是否可以ping通——&gt;$?—&gt;流程控制语句==</li>
<li>==密码文件里获取主机的IP和密码保存变量== </li>
<li>==判断公钥是否存在—&gt;不存在创建它==</li>
<li>==ssh-copy-id 将跳板机上的yunwei用户的公钥推送到远程主机—&gt;expect解决交互==</li>
<li>==将ping通的主机IP单独保存到一个文件==</li>
<li>==测试验证==</li>
</ul>
<h3 id="㈢-落地实现-1"><a href="#㈢-落地实现-1" class="headerlink" title="㈢ 落地实现"></a>㈢ 落地实现</h3><p>####① 代码拆分</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.判断yunwei用户的公钥是否存在</span><br><span class="line">[ ! -<span class="type">f</span> /<span class="type">hoem</span>/<span class="type">yunwei</span>/<span class="type">.ssh</span>/<span class="type">id_rsa</span> ] &amp;&amp; ssh<span class="literal">-keygen</span> <span class="literal">-P</span> <span class="string">''</span> <span class="operator">-f</span> ./id_rsa</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.获取IP并且判断是否可以ping通</span><br><span class="line"><span class="number">1</span>)主机密码文件ip.txt</span><br><span class="line">	<span class="number">10.1</span>.<span class="number">1.1</span>:<span class="number">123456</span></span><br><span class="line">   <span class="number">10.1</span>.<span class="number">1.2</span>:<span class="number">123456</span></span><br><span class="line"><span class="number">2</span>) 循环判断主机是否ping通</span><br><span class="line">	tr <span class="string">':'</span> <span class="string">' '</span> &lt; ip.txt|<span class="keyword">while</span> read ip pass</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		ping <span class="literal">-c1</span> <span class="variable">$ip</span> &amp;&gt;/dev/null</span><br><span class="line">      <span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">      	推送公钥</span><br><span class="line">      fi</span><br><span class="line">	done</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.非交互式推送公钥</span><br><span class="line">/usr/bin/expect &lt;&lt;<span class="literal">-END</span> &amp;&gt;/dev/null</span><br><span class="line">        spawn ssh<span class="literal">-copy</span><span class="literal">-id</span> root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">        expect &#123;</span><br><span class="line">                <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">                <span class="string">"password:"</span> &#123; send <span class="string">"<span class="variable">$pass</span>\r"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        expect eof</span><br><span class="line">	<span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h4 id="②-最终实现"><a href="#②-最终实现" class="headerlink" title="② 最终实现"></a>② 最终实现</h4><ol>
<li><strong>环境准备</strong></li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">jumper<span class="literal">-server</span>	有yunwei用户</span><br><span class="line"></span><br><span class="line">yunwei用户sudo授权：</span><br><span class="line">visudo</span><br><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">yunwei  ALL=(root)      NOPASSWD:ALL,!/sbin/shutdown,!/sbin/init,!/bin/rm <span class="literal">-rf</span> /</span><br><span class="line"></span><br><span class="line">解释说明：</span><br><span class="line"><span class="number">1</span>）第一个字段yunwei指定的是用户：可以是用户名，也可以是别名。每个用户设置一行，多个用户设置多行，也可以将多个用户设置成一个别名后再进行设置。</span><br><span class="line"><span class="number">2</span>）第二个字段ALL指定的是用户所在的主机：可以是ip,也可以是主机名，表示该sudo设置只在该主机上生效，ALL表示在所有主机上都生效！限制的一般都是本机，也就是限制使用这个文件的主机;一般都指定为<span class="string">"ALL"</span>表示所有的主机，不管文件拷到那里都可以用。比如：<span class="number">10.1</span>.<span class="number">1.1</span>=...则表示只在当前主机生效。</span><br><span class="line"><span class="number">3</span>）第三个字段（root）括号里指定的也是用户：指定以什么用户身份执行sudo，即使用sudo后可以享有所有root账号下的权限。如果要排除个别用户，可以在括号内设置，比如ALL=(ALL,!oracle,!pos)。</span><br><span class="line"><span class="number">4</span>）第四个字段ALL指定的是执行的命令：即使用sudo后可以执行所有的命令。除了关机和删除根内容以外；也可以设置别名。NOPASSWD: ALL表示使用sudo的不需要输入密码。</span><br><span class="line"><span class="number">5</span>）也可以授权给一个用户组</span><br><span class="line">	%admin ALL=(ALL) ALL	表示admin组里的所有成员可以在任何主机上以任何用户身份执行任何命令</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>脚本实现</strong></li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#判断公钥是否存在</span></span><br><span class="line">[ ! -<span class="type">f</span> /<span class="type">home</span>/<span class="type">yunwei</span>/<span class="type">.ssh</span>/<span class="type">id_rsa</span> ] &amp;&amp; ssh<span class="literal">-keygen</span> <span class="literal">-P</span> <span class="string">''</span> <span class="operator">-f</span> ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#循环判断主机是否ping通，如果ping通推送公钥</span></span><br><span class="line">tr <span class="string">':'</span> <span class="string">' '</span> &lt; /shell04/ip.txt|<span class="keyword">while</span> read ip pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">        ping <span class="literal">-c1</span> <span class="variable">$ip</span> &amp;&gt;/dev/null</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">        echo <span class="variable">$ip</span> &gt;&gt; ~/ip_up.txt</span><br><span class="line">        /usr/bin/expect &lt;&lt;<span class="literal">-END</span> &amp;&gt;/dev/null</span><br><span class="line">         spawn ssh<span class="literal">-copy</span><span class="literal">-id</span> root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">         expect &#123;</span><br><span class="line">                <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">                <span class="string">"password:"</span> &#123; send <span class="string">"<span class="variable">$pass</span>\r"</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        expect eof</span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line">        fi</span><br><span class="line">&#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line">echo <span class="string">"公钥已经推送完毕，正在测试...."</span></span><br><span class="line"><span class="comment">#测试验证</span></span><br><span class="line">remote_ip=`tail <span class="literal">-1</span> ~/ip_up.txt`</span><br><span class="line">ssh root<span class="selector-tag">@</span><span class="variable">$remote_ip</span> hostname &amp;&gt;/dev/null</span><br><span class="line">test <span class="variable">$</span>? <span class="operator">-eq</span> <span class="number">0</span> &amp;&amp; echo <span class="string">"公钥成功推送完毕"</span></span><br></pre></td></tr></table></figure>

<p>##2. 实战案例2</p>
<p>写一个脚本，统计web服务的不同==连接状态==个数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#count_http_80_state</span></span><br><span class="line"><span class="comment">#统计每个状态的个数</span></span><br><span class="line">declare <span class="literal">-A</span> array1</span><br><span class="line">states=`ss <span class="literal">-ant</span>|grep <span class="number">80</span>|cut <span class="literal">-d</span><span class="string">' '</span> <span class="literal">-f1</span>`</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$states</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        let array1[<span class="variable">$i</span>]++</span><br><span class="line">done</span><br><span class="line"><span class="comment">#通过遍历数组里的索引和元素打印出来</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="variable">$</span>&#123;!array1[<span class="selector-tag">@</span>]&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        echo <span class="variable">$j:</span><span class="variable">$</span>&#123;array1[<span class="variable">$j</span>]&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>#五、课后实战</p>
<p>1、将/etc/passwd里的用户名分类，分为管理员用户，系统用户，普通用户。<br>2、写一个倒计时脚本，要求显示离2019年1月1日（元旦）的凌晨0点，还有多少天，多少时，多少分，多少秒。<br>3、写一个脚本把一个目录内的所有==空文件==都删除，最后输出删除的文件的个数。</p>
<hr>
<h1 id="06-SHELL编程之CASE语句-函数-正则"><a href="#06-SHELL编程之CASE语句-函数-正则" class="headerlink" title="06_SHELL编程之CASE语句+函数+正则"></a>06_SHELL编程之CASE语句+函数+正则</h1><!--more-->
<hr>
<p>#课程目标</p>
<ul>
<li>掌握case语句的基本语法结构</li>
<li>掌握函数的定义及调用</li>
<li>掌握常用的正则表达式元字符含义</li>
</ul>
<h1 id="一、case语句"><a href="#一、case语句" class="headerlink" title="一、case语句"></a>一、case语句</h1><p><strong>关键词：确认过眼神，你是对的人</strong>:couple_with_heart:</p>
<ol>
<li>case语句为多重匹配语句</li>
<li>如果匹配成功，执行相匹配的命令</li>
</ol>
<h2 id="1-语法结构"><a href="#1-语法结构" class="headerlink" title="1. 语法结构"></a>1. 语法结构</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">说明：pattern表示需要匹配的模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case var <span class="keyword">in</span>             定义变量;var代表是变量名</span><br><span class="line">pattern <span class="number">1</span>)              模式<span class="number">1</span>;用 | 分割多个模式，相当于or</span><br><span class="line">    command1            需要执行的语句</span><br><span class="line">    ;;                  两个分号代表命令结束</span><br><span class="line">pattern <span class="number">2</span>)</span><br><span class="line">    command2</span><br><span class="line">    ;;</span><br><span class="line">pattern <span class="number">3</span>)</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">		  *)              default，不满足以上模式，默认执行*)下面的语句</span><br><span class="line">    command4</span><br><span class="line">    ;;</span><br><span class="line">esac							esac表示case语句结束</span><br></pre></td></tr></table></figure>

<h2 id="2-应用案例-4"><a href="#2-应用案例-4" class="headerlink" title="2. 应用案例"></a>2. 应用案例</h2><h3 id="㈠-脚本传不同值做不同事"><a href="#㈠-脚本传不同值做不同事" class="headerlink" title="㈠ 脚本传不同值做不同事"></a>㈠ 脚本传不同值做不同事</h3><p><strong>具体需求：</strong>当给程序传入start、stop、restart三个不同参数时分别执行相应命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">case <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        start|S)</span><br><span class="line">        service apache start &amp;&gt;/dev/null &amp;&amp; echo <span class="string">"apache 启动成功"</span></span><br><span class="line">        ;;</span><br><span class="line">        stop|T)</span><br><span class="line">        service apache stop &amp;&gt;/dev/null &amp;&amp; echo <span class="string">"apache 停止成功"</span></span><br><span class="line">        ;;</span><br><span class="line">        restart|R)</span><br><span class="line">        service apache restart &amp;&gt;/dev/null &amp;&amp; echo <span class="string">"apache 重启完毕"</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        echo <span class="string">"请输入要做的事情..."</span></span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<h3 id="㈡-根据用户需求选择做事"><a href="#㈡-根据用户需求选择做事" class="headerlink" title="㈡ 根据用户需求选择做事"></a>㈡ 根据用户需求选择做事</h3><p><strong>具体需求：</strong></p>
<p>脚本提示让用户输入需要管理的服务名，然后提示用户需要对服务做什么操作，如启动，关闭等操作</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请输入你要管理的服务名称(vsftpd):"</span> service</span><br><span class="line">case <span class="variable">$service</span> <span class="keyword">in</span></span><br><span class="line">        vsftpd|ftp)</span><br><span class="line">        read <span class="literal">-p</span> <span class="string">"请选择你需要做的事情(restart|stop):"</span> action</span><br><span class="line">        case <span class="variable">$action</span> <span class="keyword">in</span></span><br><span class="line">                stop|S)</span><br><span class="line">                service vsftpd stop &amp;&gt;/dev/null &amp;&amp; echo <span class="string">"该<span class="variable">$serivce</span>服务已经停止成功"</span></span><br><span class="line">                ;;</span><br><span class="line">                start)</span><br><span class="line">                service vsftpd start &amp;&gt;/dev/null &amp;&amp; echo <span class="string">"该<span class="variable">$serivce</span>服务已经成功启动"</span></span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">        ;;</span><br><span class="line">        httpd|apache)</span><br><span class="line">        echo <span class="string">"apache hello world"</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        echo <span class="string">"请输入你要管理的服务名称(vsftpd)"</span></span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p>###㈢ 菜单提示让用户选择需要做的事</p>
<p><strong>具体需求：</strong></p>
<p>模拟一个多任务维护界面;当执行程序时先显示总菜单，然后进行选择后做相应维护监控操作</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">**********请选择*********</span><br><span class="line">h	显示命令帮助</span><br><span class="line">f	显示磁盘分区</span><br><span class="line">d	显示磁盘挂载</span><br><span class="line">m	查看内存使用</span><br><span class="line">u	查看系统负载</span><br><span class="line">q	退出程序</span><br><span class="line">*************************</span><br></pre></td></tr></table></figure>

<p><strong>思路：</strong></p>
<ol>
<li>菜单打印出来</li>
<li>交互式让用户输入操作编号，然后做出相应处理</li>
</ol>
<p><strong>落地实现：</strong></p>
<ol>
<li>菜单打印(分解动作)</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">cat &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">	h	显示命令帮助</span><br><span class="line">	f	显示磁盘分区</span><br><span class="line">	d	显示磁盘挂载</span><br><span class="line">	m	查看内存使用</span><br><span class="line">	u	查看系统负载</span><br><span class="line">	q	退出程序</span><br><span class="line">	EOF</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>最终实现</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#打印菜单</span></span><br><span class="line">cat &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">	h	显示命令帮助</span><br><span class="line">	f	显示磁盘分区</span><br><span class="line">	d	显示磁盘挂载</span><br><span class="line">	m	查看内存使用</span><br><span class="line">	u	查看系统负载</span><br><span class="line">	q	退出程序</span><br><span class="line">	EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#让用户输入需要的操作</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请输入需要操作的选项[f|d]:"</span> var1</span><br><span class="line">case <span class="variable">$var1</span> <span class="keyword">in</span></span><br><span class="line">	h)</span><br><span class="line">	cat &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">        h       显示命令帮助</span><br><span class="line">        f       显示磁盘分区</span><br><span class="line">        d       显示磁盘挂载</span><br><span class="line">        m       查看内存使用</span><br><span class="line">        u       查看系统负载</span><br><span class="line">        q       退出程序</span><br><span class="line">	EOF</span><br><span class="line">	;;</span><br><span class="line">	f)</span><br><span class="line">	fdisk <span class="literal">-l</span></span><br><span class="line">	;;</span><br><span class="line">	d)</span><br><span class="line">	df <span class="literal">-h</span></span><br><span class="line">	;;</span><br><span class="line">	m)</span><br><span class="line">	free <span class="literal">-m</span></span><br><span class="line">	;;</span><br><span class="line">	u)</span><br><span class="line">	uptime</span><br><span class="line">	;;</span><br><span class="line">	q)</span><br><span class="line">	<span class="keyword">exit</span></span><br><span class="line">	;;</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#打印菜单</span></span><br><span class="line">menu()&#123;</span><br><span class="line">cat &lt;&lt;<span class="literal">-END</span></span><br><span class="line">	h	显示命令帮助</span><br><span class="line">	f	显示磁盘分区</span><br><span class="line">	d	显示磁盘挂载</span><br><span class="line">	m	查看内存使用</span><br><span class="line">	u	查看系统负载</span><br><span class="line">	q	退出程序</span><br><span class="line">	<span class="keyword">END</span></span><br><span class="line">&#125;</span><br><span class="line">menu</span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请输入你的操作[h for help]:"</span> var1</span><br><span class="line">case <span class="variable">$var1</span> <span class="keyword">in</span></span><br><span class="line">	h)</span><br><span class="line">	menu</span><br><span class="line">	;;</span><br><span class="line">	f)</span><br><span class="line">	read <span class="literal">-p</span> <span class="string">"请输入你要查看的设备名字[/dev/sdb]:"</span> var2</span><br><span class="line">	case <span class="variable">$var2</span> <span class="keyword">in</span></span><br><span class="line">		/dev/sda)</span><br><span class="line">		fdisk <span class="literal">-l</span> /dev/sda</span><br><span class="line">		;;</span><br><span class="line">		/dev/sdb)</span><br><span class="line">		fdisk <span class="literal">-l</span> /dev/sdb</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line">	;;</span><br><span class="line">	d)</span><br><span class="line">	lsblk</span><br><span class="line">	;;</span><br><span class="line">	m)</span><br><span class="line">	free <span class="literal">-m</span></span><br><span class="line">	;;</span><br><span class="line">	u)</span><br><span class="line">	uptime</span><br><span class="line">	;;</span><br><span class="line">	q)</span><br><span class="line">	<span class="keyword">exit</span></span><br><span class="line">	;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>课堂练习：</strong></p>
<ol>
<li>输入一个等级（A-E），查看每个等级的成绩；如：输入A，则显示“90分~100分”，依次类推</li>
<li>判断用户输入的字符串，如果是”hello”,则显示”world”；如果是”world”,则显示”hello”,否则提示”请输入hello或者world，谢谢！”</li>
</ol>
<h1 id="二、-函数"><a href="#二、-函数" class="headerlink" title="二、==函数=="></a>二、==函数==</h1><h2 id="1-什么是函数？"><a href="#1-什么是函数？" class="headerlink" title="1. 什么是函数？"></a>1. 什么是函数？</h2><ul>
<li>shell中允许将<strong>一组命令集合</strong>或<strong>语句</strong>形成一段<strong>可用代码</strong>，这些代码块称为shell函数</li>
<li>给这段代码起个名字称为函数名，后续可以直接调用该段代码的功能</li>
</ul>
<h2 id="2-如何定义函数？"><a href="#2-如何定义函数？" class="headerlink" title="2. 如何定义函数？"></a>2. 如何定义函数？</h2><p><strong>方法1：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">函数名()</span><br><span class="line">&#123;</span><br><span class="line">  函数体（一堆命令的集合，来实现某个功能）   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法2：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名<span class="params">()</span></span></span><br><span class="line">&#123;</span><br><span class="line">   函数体（一堆命令的集合，来实现某个功能）</span><br><span class="line">   echo hello</span><br><span class="line">   echo world</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>函数中==return==说明:</strong></p>
<ol>
<li>return可以==结束一个函数==。类似于循环控制语句break(结束当前循环，执行循环体后面的代码)。</li>
<li>return默认返回函数中最后一个命令状态值，也可以给定参数值，范围是0-256之间。</li>
<li>如果没有return命令，函数将返回最后一个指令的退出状态值。</li>
</ol>
<p>##3. 函数如何调用？</p>
<h3 id="㈠-当前命令行调用"><a href="#㈠-当前命令行调用" class="headerlink" title="㈠ 当前命令行调用"></a>㈠ 当前命令行调用</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># cat fun1.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">hello()&#123;</span><br><span class="line">echo <span class="string">"hello lilei <span class="variable">$1</span>"</span></span><br><span class="line">hostname</span><br><span class="line">&#125;</span><br><span class="line">menu()&#123;</span><br><span class="line">cat &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line"><span class="number">1</span>. mysql</span><br><span class="line"><span class="number">2</span>. web</span><br><span class="line"><span class="number">3</span>. app</span><br><span class="line"><span class="number">4</span>. <span class="keyword">exit</span></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># source fun1.sh </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># . fun1.sh </span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># hello 888</span></span><br><span class="line">hello lilei <span class="number">888</span></span><br><span class="line">MissHou.itcast.cc</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># menu</span></span><br><span class="line"><span class="number">1</span>. mysql</span><br><span class="line"><span class="number">2</span>. web</span><br><span class="line"><span class="number">3</span>. app</span><br><span class="line"><span class="number">4</span>. <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<h3 id="㈡-定义到用户的环境变量中"><a href="#㈡-定义到用户的环境变量中" class="headerlink" title="㈡ 定义到用户的环境变量中"></a>㈡ 定义到用户的环境变量中</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell05</span>]<span class="comment"># vim ~/.bashrc </span></span><br><span class="line">文件中增加如下内容：</span><br><span class="line">hello()&#123;</span><br><span class="line">echo <span class="string">"hello lilei <span class="variable">$1</span>"</span></span><br><span class="line">hostname</span><br><span class="line">&#125;</span><br><span class="line">menu()&#123;</span><br><span class="line">cat &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line"><span class="number">1</span>. mysql</span><br><span class="line"><span class="number">2</span>. web</span><br><span class="line"><span class="number">3</span>. app</span><br><span class="line"><span class="number">4</span>. <span class="keyword">exit</span></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">当用户打开bash的时候会读取该文件</span><br></pre></td></tr></table></figure>

<h3 id="㈢-脚本中调用"><a href="#㈢-脚本中调用" class="headerlink" title="㈢ 脚本中调用"></a>㈢ 脚本中调用</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#打印菜单</span></span><br><span class="line">source ./fun1.sh</span><br><span class="line">menu()&#123;</span><br><span class="line">cat &lt;&lt;<span class="literal">-END</span></span><br><span class="line">	h	显示命令帮助</span><br><span class="line">	f	显示磁盘分区</span><br><span class="line">	d	显示磁盘挂载</span><br><span class="line">	m	查看内存使用</span><br><span class="line">	u	查看系统负载</span><br><span class="line">	q	退出程序</span><br><span class="line">	<span class="keyword">END</span></span><br><span class="line">&#125;</span><br><span class="line">menu		//调用函数</span><br></pre></td></tr></table></figure>

<p>##4. 应用案例</p>
<p><strong>具体需求：</strong></p>
<ol>
<li>写一个脚本==收集用户输入==的基本信息(姓名，性别，年龄)，如不输入==一直提示输入==</li>
<li>最后根据用户的信息输出相对应的内容</li>
</ol>
<p><strong>思路：</strong></p>
<ol>
<li><p>==交互式==定义多个变量来保存用户信息  姓名、性别、年龄</p>
</li>
<li><p>如果不输一直提示输入</p>
<ul>
<li>==循环==直到输入字符串不为空  while  判断输入字符串是否为空</li>
<li>每个信息都必须不能为空，该功能可以定义为一个函数，方便下面脚本调用</li>
</ul>
</li>
<li><p>根据用户输入信息做出匹配判断</p>
</li>
</ol>
<p><strong>代码实现：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#该函数实现用户如果不输入内容则一直循环直到用户输入为止，并且将用户输入的内容打印出来</span></span><br><span class="line">input_fun()</span><br><span class="line">&#123;</span><br><span class="line">  input_var=<span class="string">""</span></span><br><span class="line">  output_var=<span class="variable">$1</span></span><br><span class="line">  <span class="keyword">while</span> [ -<span class="type">z</span> <span class="variable">$input_var</span> ]</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	read <span class="literal">-p</span> <span class="string">"<span class="variable">$output_var</span>"</span> input_var</span><br><span class="line">	done</span><br><span class="line">	echo <span class="variable">$input_var</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input_fun 请输入你的姓名:</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">fun()</span><br><span class="line">&#123;</span><br><span class="line">	read <span class="literal">-p</span> <span class="string">"<span class="variable">$1</span>"</span> var</span><br><span class="line">	<span class="keyword">if</span> [ -<span class="type">z</span> <span class="variable">$var</span> ];then</span><br><span class="line">		fun <span class="variable">$1</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		echo <span class="variable">$var</span></span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数并且获取用户的姓名、性别、年龄分别赋值给name、sex、age变量</span></span><br><span class="line">name=<span class="variable">$</span>(input_fun 请输入你的姓名:)</span><br><span class="line">sex=<span class="variable">$</span>(input_fun 请输入你的性别:)</span><br><span class="line">age=<span class="variable">$</span>(input_fun 请输入你的年龄:)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据用户输入的性别进行匹配判断</span></span><br><span class="line">case <span class="variable">$sex</span> <span class="keyword">in</span></span><br><span class="line">			man)</span><br><span class="line">			<span class="keyword">if</span> [ <span class="variable">$age</span> -<span class="type">gt</span> <span class="number">18</span> -<span class="type">a</span> <span class="variable">$age</span> -<span class="type">le</span> <span class="number">35</span> ];then</span><br><span class="line">				echo <span class="string">"中年大叔你油腻了吗？加油"</span></span><br><span class="line">			elif [ <span class="variable">$age</span> -<span class="type">gt</span> <span class="number">35</span> ];then</span><br><span class="line">				echo <span class="string">"保温杯里泡枸杞"</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				echo <span class="string">"年轻有为。。。"</span></span><br><span class="line">			fi</span><br><span class="line">			;;</span><br><span class="line">			woman)</span><br><span class="line">			xxx</span><br><span class="line">			;;</span><br><span class="line">			*)</span><br><span class="line">			xxx</span><br><span class="line">			;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p><strong>扩展延伸：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">描述以下代码含义：	</span><br><span class="line">:()</span><br><span class="line">&#123;</span><br><span class="line">   :|:&amp;</span><br><span class="line">&#125;</span><br><span class="line">:</span><br></pre></td></tr></table></figure>

<p>#三、综合案例</p>
<h2 id="1-任务背景"><a href="#1-任务背景" class="headerlink" title="1. 任务背景"></a>1. 任务背景</h2><p>现有的跳板机虽然实现了统一入口来访问生产服务器，yunwei用户权限太大可以操作跳板机上的所有目录文件，存在数据被误删的安全隐患，所以希望你做一些安全策略来保证跳板机的正常使用。</p>
<h2 id="2-具体要求"><a href="#2-具体要求" class="headerlink" title="2. 具体要求"></a>2. 具体要求</h2><ol>
<li>只允许yunwei用户通过跳板机远程连接后台的应用服务器做一些维护操作</li>
<li>公司运维人员远程通过yunwei用户连接跳板机时，跳出以下菜单供选择：</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">欢迎使用Jumper<span class="literal">-server</span>，请选择你要操作的主机：</span><br><span class="line"><span class="number">1</span>. DB1<span class="literal">-Master</span></span><br><span class="line"><span class="number">2</span>. DB2<span class="literal">-Slave</span></span><br><span class="line"><span class="number">3</span>. Web1</span><br><span class="line"><span class="number">4</span>. Web2</span><br><span class="line">h. help</span><br><span class="line">q. <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>当用户选择相应主机后，直接<strong>免密码登录</strong>成功</li>
<li>如果用户不输入一直提示用户输入，直到用户选择退出</li>
</ol>
<h2 id="3-综合分析"><a href="#3-综合分析" class="headerlink" title="3. 综合分析"></a>3. 综合分析</h2><ol>
<li>将脚本放到yunwei用户家目录里的.bashrc文件里（/shell05/jumper-server.sh）</li>
<li>将菜单定义为一个函数[打印菜单]，方便后面调用</li>
<li>用case语句来实现用户的选择【交互式定义变量】</li>
<li>当用户选择了某一台服务器后，进一步询问用户需要做的事情  case…esac  交互式定义变量</li>
<li>使用循环来实现用户不选择一直让其选择</li>
<li>限制用户退出后直接关闭终端  exit </li>
</ol>
<h2 id="4-落地实现"><a href="#4-落地实现" class="headerlink" title="4. 落地实现"></a>4. 落地实现</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># jumper-server</span></span><br><span class="line"><span class="comment"># 定义菜单打印功能的函数</span></span><br><span class="line">menu()</span><br><span class="line">&#123;</span><br><span class="line">cat &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">欢迎使用Jumper<span class="literal">-server</span>，请选择你要操作的主机：</span><br><span class="line"><span class="number">1</span>. DB1<span class="literal">-Master</span></span><br><span class="line"><span class="number">2</span>. DB2<span class="literal">-Slave</span></span><br><span class="line"><span class="number">3</span>. Web1</span><br><span class="line"><span class="number">4</span>. Web2</span><br><span class="line">h. help</span><br><span class="line">q. <span class="keyword">exit</span></span><br><span class="line">	EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 屏蔽以下信号</span></span><br><span class="line"><span class="keyword">trap</span> <span class="string">''</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">19</span></span><br><span class="line"><span class="comment"># 调用函数来打印菜单</span></span><br><span class="line">menu</span><br><span class="line"><span class="comment">#循环等待用户选择</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 菜单选择，case...esac语句</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请选择你要访问的主机:"</span> host</span><br><span class="line">case <span class="variable">$host</span> <span class="keyword">in</span></span><br><span class="line">	<span class="number">1</span>)</span><br><span class="line">	ssh root@<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">	;;</span><br><span class="line">	<span class="number">2</span>)</span><br><span class="line">	ssh root@<span class="number">10.1</span>.<span class="number">1.2</span></span><br><span class="line">	;;</span><br><span class="line">	<span class="number">3</span>)</span><br><span class="line">	ssh root@<span class="number">10.1</span>.<span class="number">1.3</span></span><br><span class="line">	;;</span><br><span class="line">	h)</span><br><span class="line">	clear;menu</span><br><span class="line">	;;</span><br><span class="line">	q)</span><br><span class="line">	<span class="keyword">exit</span></span><br><span class="line">	;;</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">将脚本放到yunwei用户家目录里的.bashrc里执行：</span><br><span class="line">bash ~/jumper<span class="literal">-server</span>.sh</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<p><strong>进一步完善需求</strong></p>
<p>为了进一步增强跳板机的安全性，工作人员通过跳板机访问生产环境，但是不能在跳板机上停留。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#公钥推送成功</span></span><br><span class="line"><span class="keyword">trap</span> <span class="string">''</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">19</span></span><br><span class="line"><span class="comment">#打印菜单用户选择</span></span><br><span class="line">menu()&#123;</span><br><span class="line">cat &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">欢迎使用Jumper<span class="literal">-server</span>，请选择你要操作的主机：</span><br><span class="line"><span class="number">1</span>. DB1<span class="literal">-Master</span></span><br><span class="line"><span class="number">2</span>. DB2<span class="literal">-Slave</span></span><br><span class="line"><span class="number">3</span>. Web1</span><br><span class="line"><span class="number">4</span>. Web2</span><br><span class="line">h. help</span><br><span class="line">q. <span class="keyword">exit</span></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数来打印菜单</span></span><br><span class="line">menu</span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请输入你要选择的主机[h for help]："</span> host</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过case语句来匹配用户所输入的主机</span></span><br><span class="line">case <span class="variable">$host</span> <span class="keyword">in</span></span><br><span class="line">	<span class="number">1</span>|DB1)</span><br><span class="line">	ssh root@<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">	;;</span><br><span class="line">	<span class="number">2</span>|DB2)</span><br><span class="line">	ssh root@<span class="number">10.1</span>.<span class="number">1.2</span></span><br><span class="line">	;;</span><br><span class="line">	<span class="number">3</span>|web1)</span><br><span class="line">	ssh root@<span class="number">10.1</span>.<span class="number">1.250</span></span><br><span class="line">	;;</span><br><span class="line">	h|help)</span><br><span class="line">	clear;menu</span><br><span class="line">	;;</span><br><span class="line">	q|quit)</span><br><span class="line">	<span class="keyword">exit</span></span><br><span class="line">	;;</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">自己完善功能：</span><br><span class="line"><span class="number">1</span>. 用户选择主机后，需要事先推送公钥；如何判断公钥是否已推</span><br><span class="line"><span class="number">2</span>. 比如选择web1时，再次提示需要做的操作，比如：</span><br><span class="line">clean log</span><br><span class="line">重启服务</span><br><span class="line">kill某个进程</span><br></pre></td></tr></table></figure>

<p><strong>回顾信号：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) SIGHUP 			重新加载配置    </span><br><span class="line"><span class="number">2</span>) SIGINT			键盘中断^C</span><br><span class="line"><span class="number">3</span>) SIGQUIT      	键盘退出</span><br><span class="line"><span class="number">9</span>) SIGKILL		 	强制终止</span><br><span class="line"><span class="number">15</span>) SIGTERM	    	终止（正常结束），缺省信号</span><br><span class="line"><span class="number">18</span>) SIGCONT	   	继续</span><br><span class="line"><span class="number">19</span>) SIGSTOP	   	停止</span><br><span class="line"><span class="number">20</span>) SIGTSTP     	暂停^Z</span><br></pre></td></tr></table></figure>

<h1 id="四、正则表达式"><a href="#四、正则表达式" class="headerlink" title="四、正则表达式"></a>四、正则表达式</h1><p>##1. 正则表达式是什么？</p>
<p><strong>正则表达式</strong>（Regular Expression、regex或regexp，缩写为RE），也译为正规表示法、常规表示法，是一种字符模式，用于在查找过程中==匹配指定的字符==。</p>
<p>许多程序设计语言都支持利用正则表达式进行<strong>字符串操作</strong>。例如，在Perl中就内建了一个功能强大的正则表达式引擎。</p>
<p>正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及开的。</p>
<p>支持正则表达式的程序如：locate |find| vim| grep| sed |awk</p>
<h2 id="2-正则能干什么？"><a href="#2-正则能干什么？" class="headerlink" title="2. 正则能干什么？"></a>2. 正则能干什么？</h2><ol>
<li>匹配邮箱、匹配身份证号码、手机号、银行卡号等</li>
<li>匹配某些特定字符串，做特定处理等等</li>
</ol>
<h2 id="3-正则当中名词解释"><a href="#3-正则当中名词解释" class="headerlink" title="3. 正则当中名词解释"></a>3. 正则当中名词解释</h2><ul>
<li><p><strong>元字符</strong></p>
<p>指那些在正则表达式中具有<strong>特殊意义的==专用字符==</strong>,如:点(.) 星(*) 问号(?)等</p>
</li>
<li><p><strong>前导字符</strong></p>
<p>位于<strong>元字符</strong>前面的字符.    ab<strong>==c==*</strong>   aoo<strong>==o==.</strong></p>
</li>
</ul>
<p>##4. 第一类正则表达式</p>
<h3 id="㈠-正则中普通常用的元字符"><a href="#㈠-正则中普通常用的元字符" class="headerlink" title="㈠ 正则中普通常用的元字符"></a>㈠ 正则中普通常用的元字符</h3><table>
<thead>
<tr>
<th>元字符</th>
<th>功能</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>匹配除了换行符以外的==任意单个==字符</td>
<td></td>
</tr>
<tr>
<td>*</td>
<td>==前导字符==出现==0==次或==连续多次==</td>
<td></td>
</tr>
<tr>
<td>.*</td>
<td>任意长度字符</td>
<td>ab.*</td>
</tr>
<tr>
<td>^</td>
<td>行首(以…开头)</td>
<td>^root</td>
</tr>
<tr>
<td>$</td>
<td>行尾(以…结尾)</td>
<td>bash$</td>
</tr>
<tr>
<td>^$</td>
<td>空行</td>
<td></td>
</tr>
<tr>
<td>[]</td>
<td>匹配括号里任意单个字符或一组单个字符</td>
<td>[abc]</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配不包含括号里任一单个字符或一组单个字符</td>
<td>[^abc]</td>
</tr>
<tr>
<td>^[]</td>
<td>匹配以括号里任意单个字符或一组单个字符开头</td>
<td>^[abc]</td>
</tr>
<tr>
<td>^[^]</td>
<td>匹配不以括号里任意单个字符或一组单个字符开头</td>
<td>^[^abc]</td>
</tr>
</tbody></table>
<ul>
<li>示例文本</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat 1.txt</span></span><br><span class="line">ggle</span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br><span class="line">taobao.com</span><br><span class="line">taotaobaobao.com</span><br><span class="line"></span><br><span class="line">jingdong.com</span><br><span class="line">dingdingdongdong.com</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">Adfjd8789JHfdsdf/</span><br><span class="line">a87fdjfkdLKJK</span><br><span class="line"><span class="number">7</span>kdjfd989KJK;</span><br><span class="line">bSKJjkksdjf878.</span><br><span class="line">cidufKJHJ6576,</span><br><span class="line"></span><br><span class="line">hello world</span><br><span class="line">helloworld yourself</span><br></pre></td></tr></table></figure>

<ul>
<li>举例说明</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="㈡-正则中其他常用元字符"><a href="#㈡-正则中其他常用元字符" class="headerlink" title="㈡ 正则中其他常用元字符"></a>㈡ 正则中其他常用元字符</h3><table>
<thead>
<tr>
<th>元字符</th>
<th>功能</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>\&lt;</td>
<td>取单词的头</td>
<td></td>
</tr>
<tr>
<td>\&gt;</td>
<td>取单词的尾</td>
<td></td>
</tr>
<tr>
<td>\&lt;  \&gt;</td>
<td>精确匹配</td>
<td></td>
</tr>
<tr>
<td>\{n\}</td>
<td>匹配前导字符==连续出现n次==</td>
<td></td>
</tr>
<tr>
<td>\{n,\}</td>
<td>匹配前导字符==至少出现n次==</td>
<td></td>
</tr>
<tr>
<td>\{n,m\}</td>
<td>匹配前导字符出现==n次与m次之间==</td>
<td></td>
</tr>
<tr>
<td>\(   \)</td>
<td>保存被匹配的字符</td>
<td></td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字（<strong>grep -P</strong>）</td>
<td>[0-9]</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母数字下划线（<strong>grep -P</strong>）</td>
<td>[a-zA-Z0-9_]</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空格、制表符、换页符（<strong>grep -P</strong>）</td>
<td>[\t\r\n]</td>
</tr>
</tbody></table>
<p><strong>举例说明：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">需求：将<span class="number">10.1</span>.<span class="number">1.1</span>替换成<span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>）vim编辑器支持正则表达式</span><br><span class="line"><span class="comment"># vim 1.txt</span></span><br><span class="line">:%s<span class="comment">#\(10.1.1\).1#\1.254#g </span></span><br><span class="line">:%s/\(<span class="number">10.1</span>.<span class="number">1</span>\).<span class="number">1</span>/\<span class="number">1.254</span>/g </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）sed支持正则表达式【后面学】</span><br><span class="line"><span class="comment"># sed -n 's#\(10.1.1\).1#\1.254#p' 1.txt</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">找出含有<span class="number">10.1</span>.<span class="number">1</span>的行，同时保留<span class="number">10.1</span>.<span class="number">1</span>并标记为标签<span class="number">1</span>，之后可以使用\<span class="number">1</span>来引用它。</span><br><span class="line">最多可以定义<span class="number">9</span>个标签，从左边开始编号，最左边的是第一个。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">需求：将helloworld yourself 换成hellolilei myself</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim 1.txt</span></span><br><span class="line">:%s<span class="comment">#\(hello\)world your\(self\)#\1lilei my\2#g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sed -n 's/\(hello\)world your\(self\)/\1lilei my\2/p' 1.txt </span></span><br><span class="line">hellolilei myself</span><br><span class="line"></span><br><span class="line"><span class="comment"># sed -n 's/helloworld yourself/hellolilei myself/p' 1.txt </span></span><br><span class="line">hellolilei myself</span><br><span class="line"><span class="comment"># sed -n 's/\(hello\)world your\(self\)/\1lilei my\2/p' 1.txt </span></span><br><span class="line">hellolilei myself</span><br><span class="line"></span><br><span class="line">Perl内置正则：</span><br><span class="line">\d      匹配数字  [<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">\w      匹配字母数字下划线[<span class="type">a</span>-<span class="type">zA</span>-<span class="type">Z0</span>-<span class="number">9</span><span class="type">_</span>]</span><br><span class="line">\s      匹配空格、制表符、换页符[\<span class="type">t</span>\<span class="type">r</span>\<span class="type">n</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># grep -P '\d' 1.txt</span></span><br><span class="line"><span class="comment"># grep -P '\w' 2.txt</span></span><br><span class="line"><span class="comment"># grep -P '\s' 3.txt</span></span><br></pre></td></tr></table></figure>

<h3 id="㈢-扩展类正则常用元字符"><a href="#㈢-扩展类正则常用元字符" class="headerlink" title="㈢ 扩展类正则常用元字符"></a>㈢ 扩展类正则常用元字符</h3><p><strong>==丑话说在前面：==</strong></p>
<p>我说我比较特殊，你要相信！否则我错给你看:smirk:</p>
<ul>
<li><p>grep你要用我，必须加 <strong>==-E==</strong>  或者  让你兄弟<code>egrep</code>来找我</p>
</li>
<li><p>sed你要用我，必须加 <strong>==-r==</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>扩展元字符</th>
<th>功能</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>匹配一个或多个前导字符</td>
<td>bo+ 匹配boo、 bo</td>
</tr>
<tr>
<td>?</td>
<td>匹配零个或一个前导字符</td>
<td>bo? 匹配b、 bo</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td>匹配a或b</td>
</tr>
<tr>
<td>()</td>
<td>组字符（看成整体）</td>
<td>(my|your)self：表示匹配myself或匹配yourself</td>
</tr>
<tr>
<td>{n}</td>
<td>前导字符重复n次</td>
<td></td>
</tr>
<tr>
<td>{n,}</td>
<td>前导字符重复至少n次</td>
<td></td>
</tr>
<tr>
<td>{n,m}</td>
<td>前导字符重复n到m次</td>
<td></td>
</tr>
</tbody></table>
<p><strong>举例说明：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep "root|ftp|adm" /etc/passwd</span></span><br><span class="line"><span class="comment"># egrep "root|ftp|adm" /etc/passwd</span></span><br><span class="line"><span class="comment"># grep -E "root|ftp|adm" /etc/passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grep -E 'o+gle' test.txt </span></span><br><span class="line"><span class="comment"># grep -E 'o?gle' test.txt </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># egrep 'go&#123;2,&#125;' 1.txt</span></span><br><span class="line"><span class="comment"># egrep '(my|your)self' 1.txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用正则过滤出文件中的IP地址：</span><br><span class="line"><span class="comment"># grep '[0-9]\&#123;2\&#125;\.[0-9]\&#123;1\&#125;\.[0-9]\&#123;1\&#125;\.[0-9]\&#123;1\&#125;' 1.txt </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="comment"># grep '[0-9]&#123;2&#125;\.[0-9]&#123;1&#125;\.[0-9]&#123;1&#125;\.[0-9]&#123;1&#125;' 1.txt </span></span><br><span class="line"><span class="comment"># grep -E '[0-9]&#123;2&#125;\.[0-9]&#123;1&#125;\.[0-9]&#123;1&#125;\.[0-9]&#123;1&#125;' 1.txt </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="comment"># grep -E '[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;' 1.txt </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="comment"># grep -E '([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;' 1.txt </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure>

<p>##5. 第二类正则</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>功能</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>[:alnum:]</td>
<td>字母与数字字符</td>
<td>[[:alnum:]]+</td>
</tr>
<tr>
<td>[:alpha:]</td>
<td>字母字符(包括大小写字母)</td>
<td>[[:alpha:]]{4}</td>
</tr>
<tr>
<td>[:blank:]</td>
<td>空格与制表符</td>
<td>[[:blank:]]*</td>
</tr>
<tr>
<td>[:digit:]</td>
<td>数字</td>
<td>[[:digit:]]?</td>
</tr>
<tr>
<td>[:lower:]</td>
<td>小写字母</td>
<td>[[:lower:]]{4,}</td>
</tr>
<tr>
<td>[:upper:]</td>
<td>大写字母</td>
<td>[[:upper:]]+</td>
</tr>
<tr>
<td>[:punct:]</td>
<td>标点符号</td>
<td>[[:punct:]]</td>
</tr>
<tr>
<td>[:space:]</td>
<td>包括换行符，回车等在内的所有空白</td>
<td>[[:space:]]+</td>
</tr>
</tbody></table>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell05</span>]<span class="comment"># grep -E '^[[:digit:]]+' 1.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell05</span>]<span class="comment"># grep -E '^[^[:digit:]]+' 1.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell05</span>]<span class="comment"># grep -E '[[:lower:]]&#123;4,&#125;' 1.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="6-正则表达式总结"><a href="#6-正则表达式总结" class="headerlink" title="6. 正则表达式总结"></a>6. 正则表达式总结</h2><p><strong>把握一个原则，让你轻松搞定可恶的正则符号：</strong></p>
<ol>
<li>我要找什么？<ul>
<li>找数字                            [0-9]</li>
<li>找字母                                    [a-zA-Z]</li>
<li>找标点符号                            [[:punct:]]</li>
</ul>
</li>
<li>我要如何找？看心情找<ul>
<li>以什么为首                           ^key</li>
<li>以什么结尾                           key$</li>
<li>包含什么或不包含什么        [abc]  ^[abc]   [^abc]   ^[^abc]</li>
</ul>
</li>
<li>我要找多少呀？<ul>
<li>找前导字符出现0次或连续多次             ab==*==</li>
<li>找任意单个(一次)字符                             ab==.==</li>
<li>找任意字符                                               ab==.*==</li>
<li>找前导字符连续出现几次                        {n}  {n,m}   {n,}</li>
<li>找前导字符出现1次或多次                      go==+==</li>
<li>找前到字符出现0次或1次                       go==?==                  </li>
</ul>
</li>
</ol>
<h1 id="五、正则元字符一栏表"><a href="#五、正则元字符一栏表" class="headerlink" title="五、正则元字符一栏表"></a>五、正则元字符一栏表</h1><p><strong>元字符</strong>：在正则中，具有特殊意义的专用字符，如: 星号(*)、加号(+)等</p>
<p><strong>前导字符</strong>：元字符前面的字符叫前导字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>功能</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>前导字符出现0次或者连续多次</td>
<td>ab*  abbbb</td>
</tr>
<tr>
<td>.</td>
<td>除了换行符以外，任意单个字符</td>
<td>ab.   ab8 abu</td>
</tr>
<tr>
<td>.*</td>
<td>任意长度的字符</td>
<td>ab.*  adfdfdf</td>
</tr>
<tr>
<td>[]</td>
<td>括号里的任意单个字符或一组单个字符</td>
<td>[abc][0-9][a-z]</td>
</tr>
<tr>
<td>[^]</td>
<td>不匹配括号里的任意单个字符或一组单个字符</td>
<td>[^abc]</td>
</tr>
<tr>
<td>^[]</td>
<td>匹配以括号里的任意单个字符开头</td>
<td>^[abc]</td>
</tr>
<tr>
<td>^[^]</td>
<td>不匹配以括号里的任意单个字符开头</td>
<td></td>
</tr>
<tr>
<td>^</td>
<td>行的开头</td>
<td>^root</td>
</tr>
<tr>
<td>$</td>
<td>行的结尾</td>
<td>bash$</td>
</tr>
<tr>
<td>^$</td>
<td>空行</td>
<td></td>
</tr>
<tr>
<td>\{n\}和{n}</td>
<td>前导字符连续出现n次</td>
<td>[0-9]\{3\}</td>
</tr>
<tr>
<td>\{n,\}和{n,}</td>
<td>前导字符至少出现n次</td>
<td>[a-z]{4,}</td>
</tr>
<tr>
<td>\{n,m\}和{n,m}</td>
<td>前导字符连续出现n-m次</td>
<td>go{2,4}</td>
</tr>
<tr>
<td>\&lt;\&gt;</td>
<td>精确匹配单词</td>
<td>\&lt;hello\&gt;</td>
</tr>
<tr>
<td>\(\)</td>
<td>保留匹配到的字符</td>
<td>\(hello\)</td>
</tr>
<tr>
<td>+</td>
<td>前导字符出现1次或者多次</td>
<td>[0-9]+</td>
</tr>
<tr>
<td>?</td>
<td>前导字符出现0次或者1次</td>
<td>go?</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td>^root|^ftp</td>
</tr>
<tr>
<td>()</td>
<td>组字符</td>
<td>(hello|world)123</td>
</tr>
<tr>
<td>\d</td>
<td>perl内置正则</td>
<td>grep -P  \d+</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母数字下划线</td>
<td></td>
</tr>
</tbody></table>
<h1 id="六、正则练习作业"><a href="#六、正则练习作业" class="headerlink" title="六、正则练习作业"></a>六、正则练习作业</h1><h2 id="1-文件准备"><a href="#1-文件准备" class="headerlink" title="1. 文件准备"></a>1. 文件准备</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim test.txt </span></span><br><span class="line">Aieur45869Root0000</span><br><span class="line"><span class="number">9</span>h847RkjfkIIIhello</span><br><span class="line">rootHllow88000dfjj</span><br><span class="line"><span class="number">8</span>ikuioerhfhupliooking</span><br><span class="line">hello world</span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.254</span></span><br><span class="line">welcome to uplooking.</span><br><span class="line">abcderfkdjfkdtest</span><br><span class="line">rlllA899kdfkdfj</span><br><span class="line">iiiA848890ldkfjdkfj</span><br><span class="line">abc</span><br><span class="line"><span class="number">12345678908374</span></span><br><span class="line"><span class="number">123456</span>@qq.com</span><br><span class="line"><span class="number">123456</span>@<span class="number">163</span>.com</span><br><span class="line">abcdefg@itcast.com23ed</span><br></pre></td></tr></table></figure>

<h2 id="2-具体要求-1"><a href="#2-具体要求-1" class="headerlink" title="2. 具体要求"></a>2. 具体要求</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、查找不以大写字母开头的行（三种写法）。</span><br><span class="line">grep <span class="string">'^[^A-Z]'</span> <span class="number">2</span>.txt</span><br><span class="line">grep <span class="literal">-v</span> <span class="string">'^[A-Z]'</span> <span class="number">2</span>.txt</span><br><span class="line">grep <span class="string">'^[^[:upper:]]'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">2</span>、查找有数字的行（两种写法）</span><br><span class="line">grep <span class="string">'[0-9]'</span> <span class="number">2</span>.txt</span><br><span class="line">grep <span class="literal">-P</span> <span class="string">'\d'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">3</span>、查找一个数字和一个字母连起来的</span><br><span class="line">grep <span class="literal">-E</span> <span class="string">'[0-9][a-zA-Z]|[a-zA-Z][0-9]'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">4</span>、查找不以r开头的行</span><br><span class="line">grep <span class="literal">-v</span> <span class="string">'^r'</span> <span class="number">2</span>.txt</span><br><span class="line">grep <span class="string">'^[^r]'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">5</span>、查找以数字开头的</span><br><span class="line">grep <span class="string">'^[0-9]'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">6</span>、查找以大写字母开头的</span><br><span class="line">grep <span class="string">'^[A-Z]'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">7</span>、查找以小写字母开头的</span><br><span class="line">grep <span class="string">'^[a-z]'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">8</span>、查找以点结束的</span><br><span class="line">grep <span class="string">'\.$'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">9</span>、去掉空行</span><br><span class="line">grep <span class="literal">-v</span> <span class="string">'^$'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">10</span>、查找完全匹配abc的行</span><br><span class="line">grep <span class="string">'\&lt;abc\&gt;'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">11</span>、查找A后有三个数字的行</span><br><span class="line">grep <span class="literal">-E</span> <span class="string">'A[0-9]&#123;3&#125;'</span> <span class="number">2</span>.txt</span><br><span class="line">grep  <span class="string">'A[0-9]\&#123;3\&#125;'</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="number">12</span>、统计root在/etc/passwd里出现了几次</span><br><span class="line">grep <span class="literal">-o</span> <span class="string">'root'</span> <span class="number">1</span>.txt |wc <span class="literal">-l</span></span><br><span class="line"></span><br><span class="line"><span class="number">13</span>、用正则表达式找出自己的IP地址、广播地址、子网掩码</span><br><span class="line">ifconfig eth0|grep Bcast|grep <span class="literal">-o</span> <span class="string">'[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;'</span></span><br><span class="line">ifconfig eth0|grep Bcast| grep <span class="literal">-E</span> <span class="literal">-o</span> <span class="string">'([0-9]&#123;1,3&#125;.)&#123;3&#125;[0-9]&#123;1,3&#125;'</span></span><br><span class="line">ifconfig eth0|grep Bcast| grep <span class="literal">-P</span> <span class="literal">-o</span> <span class="string">'\d&#123;1,3&#125;.\d&#123;1,3&#125;.\d&#123;1,3&#125;.\d&#123;1,3&#125;'</span></span><br><span class="line">ifconfig eth0|grep Bcast| grep <span class="literal">-P</span> <span class="literal">-o</span> <span class="string">'(\d&#123;1,3&#125;.)&#123;3&#125;\d&#123;1,3&#125;'</span></span><br><span class="line">ifconfig eth0|grep Bcast| grep <span class="literal">-P</span> <span class="literal">-o</span> <span class="string">'(\d+.)&#123;3&#125;\d+'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># egrep --color '[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;' /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">IPADDR=<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">GATEWAY=<span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># egrep --color '[[:digit:]]&#123;1,3&#125;\.[[:digit:]]&#123;1,3&#125;\.[[:digit:]]&#123;1,3&#125;\.[[:digit:]]&#123;1,3&#125;' /etc/sysconfig/network-scripts/ifcfg-eth0 </span></span><br><span class="line">IPADDR=<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">GATEWAY=<span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>、找出文件中的ip地址并且打印替换成<span class="number">172.16</span>.<span class="number">2.254</span></span><br><span class="line">grep <span class="literal">-o</span> <span class="literal">-E</span> <span class="string">'([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;'</span> <span class="number">1</span>.txt |sed <span class="literal">-n</span> <span class="string">'s/192.168.0.\(254\)/172.16.2.\1/p'</span></span><br><span class="line"></span><br><span class="line"><span class="number">15</span>、找出文件中的ip地址</span><br><span class="line">grep <span class="literal">-o</span> <span class="literal">-E</span> <span class="string">'([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;'</span> <span class="number">1</span>.txt</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>、找出全部是数字的行</span><br><span class="line">grep <span class="literal">-E</span> <span class="string">'^[0-9]+$'</span> test</span><br><span class="line"><span class="number">17</span>、找出邮箱地址</span><br><span class="line">grep <span class="literal">-E</span> <span class="string">'^[0-9]+@[a-z0-9]+\.[a-z]+$'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grep -<span class="literal">-help</span>:</span><br><span class="line">匹配模式选择：</span><br><span class="line">Regexp selection and interpretation:</span><br><span class="line">  <span class="literal">-E</span>, -<span class="literal">-extended</span><span class="literal">-regexp</span>     扩展正则</span><br><span class="line">  <span class="literal">-G</span>, -<span class="literal">-basic</span><span class="literal">-regexp</span>        基本正则</span><br><span class="line">  <span class="literal">-P</span>, -<span class="literal">-perl</span><span class="literal">-regexp</span>         调用perl的正则</span><br><span class="line">  <span class="literal">-e</span>, -<span class="literal">-regexp</span>=PATTERN      use PATTERN <span class="keyword">for</span> matching</span><br><span class="line">  <span class="operator">-f</span>, -<span class="operator">-file</span>=FILE           obtain PATTERN from FILE</span><br><span class="line">  <span class="literal">-i</span>, -<span class="literal">-ignore</span><span class="literal">-case</span>         忽略大小写</span><br><span class="line">  <span class="literal">-w</span>, -<span class="literal">-word</span><span class="literal">-regexp</span>         匹配整个单词</span><br></pre></td></tr></table></figure>

<p>#七、课后作业</p>
<h2 id="脚本搭建web服务"><a href="#脚本搭建web服务" class="headerlink" title="脚本搭建web服务"></a>脚本搭建web服务</h2><p><strong>要求如下</strong>：</p>
<ol>
<li>用户输入web服务器的IP、域名以及数据根目录</li>
<li>如果用户不输入则一直提示输入，直到输入为止</li>
<li>当访问<a href="http://www.test.cc时可以访问到数据根目录里的首页文件“this" target="_blank" rel="noopener">www.test.cc时可以访问到数据根目录里的首页文件“this</a> is test page” </li>
</ol>
<p><strong>参考脚本：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">参考：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">conf=/etc/httpd/conf/httpd.conf</span><br><span class="line">input_fun()</span><br><span class="line">&#123;</span><br><span class="line">  input_var=<span class="string">""</span></span><br><span class="line">  output_var=<span class="variable">$1</span></span><br><span class="line">  <span class="keyword">while</span> [ -<span class="type">z</span> <span class="variable">$input_var</span> ]</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	read <span class="literal">-p</span> <span class="string">"<span class="variable">$output_var</span>"</span> input_var</span><br><span class="line">	done</span><br><span class="line">	echo <span class="variable">$input_var</span></span><br><span class="line">&#125;</span><br><span class="line">ipaddr=<span class="variable">$</span>(input_fun <span class="string">"Input Host ip[192.168.0.1]:"</span>)</span><br><span class="line">web_host_name=<span class="variable">$</span>(input_fun <span class="string">"Input VirtualHostName [www.test.cc]:"</span>)</span><br><span class="line">root_dir=<span class="variable">$</span>(input_fun <span class="string">"Input host Documentroot dir:[/var/www/html]:"</span>)</span><br><span class="line"></span><br><span class="line">[ ! -<span class="type">d</span> <span class="variable">$root_dir</span> ] &amp;&amp; mkdir <span class="literal">-p</span> <span class="variable">$root_dir</span></span><br><span class="line">chown apache.apache <span class="variable">$root_dir</span> &amp;&amp; chmod <span class="number">755</span> <span class="variable">$root_dir</span></span><br><span class="line">echo this is <span class="variable">$web_host_name</span> &gt; <span class="variable">$root_dir</span>/index.html</span><br><span class="line">echo <span class="string">"<span class="variable">$ipaddr</span> <span class="variable">$web_host_name</span>"</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line">[ -<span class="type">f</span> <span class="variable">$conf</span> ] &amp;&amp; cat &gt;&gt; <span class="variable">$conf</span> &lt;&lt;<span class="keyword">end</span></span><br><span class="line">NameVirtualHost <span class="variable">$ipaddr:80</span></span><br><span class="line">&lt;VirtualHost <span class="variable">$ipaddr:80</span>&gt;</span><br><span class="line">	ServerAdmin webmaster<span class="selector-tag">@</span><span class="variable">$web_host_name</span></span><br><span class="line">	DocumentRoot <span class="variable">$root_dir</span></span><br><span class="line">	ServerName <span class="variable">$web_host_name</span></span><br><span class="line">	ErrorLog logs/<span class="variable">$web_host_name</span><span class="literal">-error_log</span></span><br><span class="line">	CustomLog logs/<span class="variable">$web_host_name</span><span class="literal">-access_loh</span> common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="07-SHELL编程之文本处理工具sed"><a href="#07-SHELL编程之文本处理工具sed" class="headerlink" title="07_SHELL编程之文本处理工具sed"></a>07_SHELL编程之文本处理工具sed</h1><!--more-->
<hr>
<p>#课程目标</p>
<ul>
<li>掌握sed的基本语法结构</li>
<li>熟悉sed常用的命令，如打印p，删除d，插入i等</li>
</ul>
<h1 id="一、文件编辑器知多少"><a href="#一、文件编辑器知多少" class="headerlink" title="一、文件编辑器知多少"></a>一、文件编辑器知多少</h1><ul>
<li><p><strong>Windows系统​</strong>    </p>
<p><img src="./edit.png" alt="edit"></p>
</li>
<li><p><strong>Linux系统</strong></p>
</li>
</ul>
<p>​    ==vim      vi==     gedit  nano  emacs</p>
<p>#二、强悍的sed介绍</p>
<h2 id="1-sed用来做啥？"><a href="#1-sed用来做啥？" class="headerlink" title="1. sed用来做啥？"></a>1. sed用来做啥？</h2><p>sed是Stream Editor（流编辑器）的缩写，简称流编辑器；用来==处理文件==的。</p>
<h2 id="2-sed如何处理文件？"><a href="#2-sed如何处理文件？" class="headerlink" title="2. sed如何处理文件？"></a>2. sed如何处理文件？</h2><blockquote>
<p> sed是==一行一行读取==文件内容并==按照要求==进行==处理==，把处理后的结果==输出到屏幕==。</p>
</blockquote>
<p><img src="./sed.png" alt="sed"></p>
<ol>
<li>首先sed读取文件中的一行内容，把其保存在一个==临时缓存区中==（也称为模式空间）</li>
<li>然后==根据需求==处理临时缓冲区中的行，完成后把该行==发送到屏幕上==</li>
</ol>
<p><strong>总结：</strong></p>
<ol>
<li>由于sed把每一行都存在临时缓冲区中，对这个<strong>副本</strong>进行编辑，所以==不会直接修改原文件==</li>
<li>Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作,对文件进行过滤和转换操作</li>
</ol>
<p>#三、sed使用方法介绍</p>
<blockquote>
<p> sed常见的语法格式有两种，一种叫==命令行==模式，另一种叫==脚本==模式。</p>
</blockquote>
<h2 id="1-命令行格式"><a href="#1-命令行格式" class="headerlink" title="1. 命令行格式"></a>1. 命令行格式</h2><h3 id="㈠-语法格式"><a href="#㈠-语法格式" class="headerlink" title="㈠ 语法格式"></a>㈠ 语法格式</h3><p>sed  [options]    ==<strong>‘</strong>==处理动作<strong>==’==</strong>   文件名</p>
<ul>
<li><strong>常用选项</strong></li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>-e</td>
<td>进行多项(多次)编辑</td>
<td></td>
</tr>
<tr>
<td>==-n==</td>
<td>取消默认输出</td>
<td>不自动打印模式空间</td>
</tr>
<tr>
<td>==-r==</td>
<td>使用扩展==正则表达式==</td>
<td></td>
</tr>
<tr>
<td>==-i==</td>
<td>原地编辑（修改源文件）</td>
<td></td>
</tr>
<tr>
<td>-f</td>
<td>指定sed脚本的文件名</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><strong>==常见处理动作==</strong></li>
</ul>
<p><strong>丑话说在前面</strong>：以下所有的==动作==都要在<strong>单引号</strong>里，你敢出轨，回家跪搓衣板</p>
<table>
<thead>
<tr>
<th>动作</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>‘p’</td>
<td>打印</td>
<td></td>
</tr>
<tr>
<td>‘i’</td>
<td>在指定行==之前==插入内容</td>
<td>类似vim里的大写O</td>
</tr>
<tr>
<td>‘a’</td>
<td>在指定行==之后==插入内容</td>
<td>类似vim里的小写o</td>
</tr>
<tr>
<td>‘c’</td>
<td>替换指定行所有内容</td>
<td></td>
</tr>
<tr>
<td>‘d’</td>
<td>删除指定行</td>
<td></td>
</tr>
</tbody></table>
<h3 id="㈡-举例说明"><a href="#㈡-举例说明" class="headerlink" title="㈡ 举例说明"></a>㈡ 举例说明</h3><ul>
<li>文件准备</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim a.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:<span class="number">4</span>:<span class="number">7</span>:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure>

<h4 id="①-对文件进行-增、删、改、查-操作"><a href="#①-对文件进行-增、删、改、查-操作" class="headerlink" title="① 对文件进行==增、删、改、查==操作"></a>① 对文件进行==增、删、改、查==操作</h4><blockquote>
<p>语法：sed  选项    <strong>==’==</strong>定位+命令<strong>==’==</strong>    需要处理的文件</p>
</blockquote>
<h5 id="1）打印文件内容"><a href="#1）打印文件内容" class="headerlink" title="1）打印文件内容"></a>1）打印文件内容</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed ''  a.txt						对文件什么都不做</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n 'p'  a.txt					打印每一行，并取消默认输出</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '1p'  a.txt					打印第1行</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '2p'  a.txt					打印第2行</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '1,5p'  a.txt				打印1到5行</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '$p' a.txt 					打印最后1行</span></span><br></pre></td></tr></table></figure>

<h5 id="2）增加文件内容"><a href="#2）增加文件内容" class="headerlink" title="2）增加文件内容"></a>2）增加文件内容</h5><p>i    地址定位的上面插入</p>
<p>a   下面插入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '$a99999' a.txt 				文件最后一行下面增加内容</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed 'a99999' a.txt 				文件每行下面增加内容</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '5a99999' a.txt 				文件第5行下面增加内容</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '$i99999' a.txt 				文件最后一行上一行增加内容</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed 'i99999' a.txt 				文件每行上一行增加内容</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '6i99999' a.txt 				文件第6行上一行增加内容</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '/^uucp/ihello'				以uucp开头行的上一行插入内容</span></span><br></pre></td></tr></table></figure>

<h5 id="3）修改文件内容"><a href="#3）修改文件内容" class="headerlink" title="3）修改文件内容"></a>3）修改文件内容</h5><p>c   替换指定的==整行==内容</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '5chello world' a.txt 		替换文件第5行内容</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed 'chello world' a.txt 		替换文件所有内容</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '1,5chello world' a.txt 	替换文件1到5号内容为hello world</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '/^user01/c888888' a.txt	替换以user01开头的行</span></span><br></pre></td></tr></table></figure>

<h5 id="4）删除文件内容"><a href="#4）删除文件内容" class="headerlink" title="4）删除文件内容"></a>4）删除文件内容</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '1d' a.txt 						删除文件第1行</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '1,5d' a.txt 					删除文件1到5行</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '$d' a.txt						删除文件最后一行</span></span><br></pre></td></tr></table></figure>

<h4 id="②-对文件进行搜索替换操作"><a href="#②-对文件进行搜索替换操作" class="headerlink" title="② ==对文件进行搜索替换操作=="></a>② ==对文件进行搜索替换操作==</h4><blockquote>
<p>语法：sed   选项   <strong>‘==s/搜索的内容/替换的内容/动作==’</strong>  需要处理的文件</p>
<p>其中，==<strong>s</strong>==表示search搜索；斜杠==<strong>/</strong>==表示分隔符，可以自己定义;动作一般是打印==<strong>p</strong>==和全局替换==<strong>g</strong>==</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n 's/root/ROOT/p' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n 's/root/ROOT/gp' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n 's/^#//gp' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n 's@/sbin/nologin@itcast@gp' a.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n 's/\/sbin\/nologin/itcast/gp' a.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '10s#/sbin/nologin#itcast#p' a.txt </span></span><br><span class="line">uucp:x:<span class="number">10</span>:<span class="number">14</span>:uucp:/var/spool/uucp:itcast</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n 's@/sbin/nologin@itcastheima@p' 2.txt </span></span><br><span class="line">注意：搜索替换中的分隔符可以自己指定</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '1,5s/^/#/p' a.txt 		注释掉文件的1-5行内容</span></span><br><span class="line"><span class="comment">#root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="comment">#bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span><br><span class="line"><span class="comment">#lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span><br></pre></td></tr></table></figure>

<h4 id="③-其他命令"><a href="#③-其他命令" class="headerlink" title="③ 其他命令"></a>③ 其他命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>从另外文件中读取内容</td>
<td></td>
</tr>
<tr>
<td>w</td>
<td>内容另存为</td>
<td></td>
</tr>
<tr>
<td>&amp;</td>
<td>保存查找串以便在替换串中引用</td>
<td>和\(\)相同</td>
</tr>
<tr>
<td>=</td>
<td>打印行号</td>
<td></td>
</tr>
<tr>
<td>！</td>
<td>对所选行以外的所有行应用命令，放到行数之后</td>
<td>‘1,5!’</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
<td></td>
</tr>
</tbody></table>
<p><strong>举例说明：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">r	从文件中读取输入行</span><br><span class="line">w	将所选的行写入文件</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '3r /etc/hosts' 2.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '$r /etc/hosts' 2.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '/root/w a.txt' 2.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '/[0-9]&#123;4&#125;/w a.txt' 2.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed  -r '/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/w b.txt' 2.txt</span></span><br><span class="line"></span><br><span class="line">!	对所选行以外的所有行应用命令，放到行数之后</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '1!p' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '4p' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '4!p' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># cat -n 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '1,17p' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '1,17!p' 1.txt </span></span><br><span class="line"></span><br><span class="line">&amp;   保存查找串以便在替换串中引用   \(\)</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '/root/p' a.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n 's/root/#&amp;/p' a.txt </span></span><br><span class="line"><span class="comment">#root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sed -n 's/^root/#&amp;/p' passwd   注释掉以root开头的行</span></span><br><span class="line"><span class="comment"># sed -n -r 's/^root|^stu/#&amp;/p' /etc/passwd	注释掉以root开头或者以stu开头的行</span></span><br><span class="line"><span class="comment"># sed -n '1,5s/^[a-z].*/#&amp;/p' passwd  注释掉1~5行中以任意小写字母开头的行</span></span><br><span class="line"><span class="comment"># sed -n '1,5s/^/#/p' /etc/passwd  注释1~5行</span></span><br><span class="line">或者</span><br><span class="line">sed <span class="literal">-n</span> <span class="string">'1,5s/^/#/p'</span> passwd 以空开头的加上<span class="comment">#</span></span><br><span class="line">sed <span class="literal">-n</span> <span class="string">'1,5s/^#//p'</span> passwd 以<span class="comment">#开头的替换成空</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '/^root/p' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n 's/^root/#&amp;/p' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n 's/\(^root\)/#\1/p' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -nr '/^root|^stu/p' 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -nr 's/^root|^stu/#&amp;/p' 1.txt </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">= 	打印行号</span><br><span class="line"><span class="comment"># sed -n '/bash$/=' passwd    打印以bash结尾的行的行号</span></span><br><span class="line"><span class="comment"># sed -ne '/root/=' -ne '/root/p' passwd </span></span><br><span class="line"><span class="comment"># sed -n '/nologin$/=;/nologin$/p' 1.txt</span></span><br><span class="line"><span class="comment"># sed -ne '/nologin$/=' -ne '/nologin$/p' 1.txt</span></span><br><span class="line"></span><br><span class="line">q	退出</span><br><span class="line"><span class="comment"># sed '5q' 1.txt</span></span><br><span class="line"><span class="comment"># sed '/mail/q' 1.txt</span></span><br><span class="line"><span class="comment"># sed -r '/^yunwei|^mail/q' 1.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '/bash$/p;10q' 1.txt</span></span><br><span class="line">ROOT:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">综合运用：</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '1,5s/^/#&amp;/p' 1.txt </span></span><br><span class="line"><span class="comment">#root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="comment">#bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span><br><span class="line"><span class="comment">#lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '1,5s/\(^\)/#\1/p' 1.txt </span></span><br><span class="line"><span class="comment">#root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="comment">#bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span><br><span class="line"><span class="comment">#lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span><br></pre></td></tr></table></figure>

<h4 id="④-其他选项"><a href="#④-其他选项" class="headerlink" title="④ 其他选项"></a>④ 其他选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-e</span> 多项编辑</span><br><span class="line"><span class="literal">-r</span>	扩展正则</span><br><span class="line"><span class="literal">-i</span> 修改原文件</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -ne '/root/p' 1.txt -ne '/root/='</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -ne '/root/=' -ne '/root/p' 1.txt </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line">在<span class="number">1</span>.txt文件中的第<span class="number">5</span>行的前面插入“hello world”;在<span class="number">1</span>.txt文件的第<span class="number">8</span>行下面插入“哈哈哈哈”</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -e '5ihello world' -e '8a哈哈哈哈哈' 1.txt  -e '5=;8='</span></span><br><span class="line"></span><br><span class="line">sed <span class="literal">-n</span> <span class="string">'1,5p'</span> <span class="number">1</span>.txt</span><br><span class="line">sed <span class="operator">-ne</span> <span class="string">'1p'</span> <span class="operator">-ne</span> <span class="string">'5p'</span> <span class="number">1</span>.txt</span><br><span class="line">sed <span class="operator">-ne</span> <span class="string">'1p;5p'</span> <span class="number">1</span>.txt</span><br><span class="line"></span><br><span class="line">过滤vsftpd.conf文件中以<span class="comment">#开头和空行：</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># grep -Ev '^#|^$' /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -e '/^#/d' -e '/^$/d' /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '/^#/d;/^$/d' /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -r '/^#|^$/d' /etc/vsftpd/vsftpd.conf</span></span><br><span class="line"></span><br><span class="line">过滤smb.conf文件中生效的行：</span><br><span class="line"><span class="comment"># sed -e '/^#/d' -e '/^;/d' -e '/^$/d' -e '/^\t$/d' -e '/^\t#/d' smb.conf</span></span><br><span class="line"><span class="comment"># sed -r '/^(#|$|;|\t#|\t$)/d' smb.conf </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sed -e '/^#/d' -e '/^;/d' -e '/^$/d' -e '/^\t$/d' -e '/^\t#/' smb.conf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># grep '^[^a-z]' 1.txt</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n '/^[^a-z]/p' 1.txt</span></span><br><span class="line"></span><br><span class="line">过滤出文件中的IP地址：</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># grep -E '([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;' 1.txt </span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.254</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -nr '/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/p' 1.txt </span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.254</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># grep -o -E '([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;' 2.txt </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.255</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -nr '/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/p' 2.txt</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.255</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">过滤出ifcfg<span class="literal">-eth0</span>文件中的IP、子网掩码、广播地址</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># grep -Eo '([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;' ifcfg-eth0 </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># sed -nr '/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/p' ifcfg-eth0|cut -d'=' -f2</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># sed -nr '/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/p' ifcfg-eth0|sed -n 's/[A-Z=]//gp'</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># ifconfig eth0|sed -n '2p'|sed -n 's/[:a-Z]//gp'|sed -n 's/ /\n/gp'|sed '/^$/d'</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.255</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># ifconfig | sed -nr '/([0-9]&#123;1,3&#125;\.)[0-9]&#123;1,3&#125;/p' | head -1|sed -r 's/([a-z:]|[A-Z/t])//g'|sed 's/ /\n/g'|sed  '/^$/d'</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># ifconfig eth0|sed -n '2p'|sed -n 's/.*addr:\(.*\) Bcast:\(.*\) Mask:\(.*\)/\1\n\2\n\3/p'</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span> </span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.255</span> </span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="literal">-i</span> 选项  直接修改原文件</span><br><span class="line"><span class="comment"># sed -i 's/root/ROOT/;s/stu/STU/' 11.txt</span></span><br><span class="line"><span class="comment"># sed -i '17&#123;s/YUNWEI/yunwei/;s#/bin/bash#/sbin/nologin#&#125;' 1.txt</span></span><br><span class="line"><span class="comment"># sed -i '1,5s/^/#&amp;/' a.txt</span></span><br><span class="line">注意：</span><br><span class="line"><span class="literal">-ni</span>  不要一起使用</span><br><span class="line">p命令 不要再使用<span class="literal">-i</span>时使用</span><br></pre></td></tr></table></figure>

<h4 id="⑤-sed结合正则使用"><a href="#⑤-sed结合正则使用" class="headerlink" title="⑤ ==sed结合正则使用=="></a>⑤ ==sed结合正则使用==</h4><blockquote>
<p>sed  选项  ==’==sed==命令==或者==正则表达式==或者==地址定位====’==  文件名</p>
</blockquote>
<ol>
<li>定址用于决定对哪些行进行编辑。地址的形式可以是数字、正则表达式、或二者的结合。</li>
<li>如果没有指定地址，sed将处理输入文件的所有行。</li>
</ol>
<table>
<thead>
<tr>
<th>正则</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>/key/</td>
<td>查询包含关键字的行</td>
<td>sed -n ‘/root/p’ 1.txt</td>
</tr>
<tr>
<td>/key1/,/key2/</td>
<td>匹配包含两个关键字之间的行</td>
<td>sed -n ‘/^adm/,/^mysql/p’ 1.txt</td>
</tr>
<tr>
<td>/key/,x</td>
<td>从匹配关键字的行开始到==文件第x行==之间的行（包含关键字所在行）</td>
<td>sed -n ‘/^ftp/,7p’</td>
</tr>
<tr>
<td>x,/key/</td>
<td>从文件的第x行开始到与关键字的匹配行之间的行</td>
<td></td>
</tr>
<tr>
<td>x,y!</td>
<td>不包含x到y行</td>
<td></td>
</tr>
<tr>
<td>/key/!</td>
<td>不包括关键字的行</td>
<td>sed -n ‘/bash$/!p’ 1.txt</td>
</tr>
</tbody></table>
<p>##2. 脚本格式</p>
<h3 id="㈠-用法"><a href="#㈠-用法" class="headerlink" title="㈠ 用法"></a>㈠ 用法</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sed -f scripts.sh  file		//使用脚本处理文件</span></span><br><span class="line">建议使用   ./sed.sh   file</span><br><span class="line"></span><br><span class="line">脚本的第一行写上</span><br><span class="line"><span class="comment">#!/bin/sed -f</span></span><br><span class="line"><span class="number">1</span>,<span class="number">5</span>d</span><br><span class="line">s/root/hello/g</span><br><span class="line"><span class="number">3</span>i777</span><br><span class="line"><span class="number">5</span>i888</span><br><span class="line">a999</span><br><span class="line">p</span><br></pre></td></tr></table></figure>

<h3 id="㈡-注意事项"><a href="#㈡-注意事项" class="headerlink" title="㈡ 注意事项"></a>㈡ 注意事项</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">１）　脚本文件是一个sed的命令行清单。<span class="string">'commands'</span></span><br><span class="line">２）　在每行的末尾不能有任何空格、制表符（tab）或其它文本。</span><br><span class="line">３）　如果在一行中有多个命令，应该用分号分隔。</span><br><span class="line">４）　不需要且不可用引号保护命令</span><br><span class="line">５）　<span class="comment">#号开头的行为注释</span></span><br></pre></td></tr></table></figure>

<h3 id="㈢举例说明"><a href="#㈢举例说明" class="headerlink" title="㈢举例说明"></a>㈢举例说明</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat passwd</span></span><br><span class="line">stu3:x:<span class="number">509</span>:<span class="number">512</span>::/home/user3:/bin/bash</span><br><span class="line">stu4:x:<span class="number">510</span>:<span class="number">513</span>::/home/user4:/bin/bash</span><br><span class="line">stu5:x:<span class="number">511</span>:<span class="number">514</span>::/home/user5:/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat sed.sh </span></span><br><span class="line"><span class="comment">#!/bin/sed -f</span></span><br><span class="line"><span class="number">2</span>a\</span><br><span class="line">******************</span><br><span class="line"><span class="number">2</span>,<span class="variable">$s</span>/stu/user/</span><br><span class="line"><span class="variable">$a</span>\</span><br><span class="line">we inster new line</span><br><span class="line">s/^[<span class="type">a</span>-<span class="type">z</span>].*/<span class="comment">#&amp;/</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># cat 1.sed </span></span><br><span class="line"><span class="comment">#!/bin/sed -f</span></span><br><span class="line"><span class="number">3</span>a**********************</span><br><span class="line"><span class="variable">$chelloworld</span></span><br><span class="line"><span class="number">1</span>,<span class="number">3</span>s/^/<span class="comment">#&amp;/</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -f 1.sed -i 11.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># cat 11.txt </span></span><br><span class="line"><span class="comment">#root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="comment">#bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span><br><span class="line">**********************</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure>

<p>##3. 补充扩展总结</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、正则表达式必须以”/“前后规范间隔</span><br><span class="line">例如：sed <span class="string">'/root/d'</span> file</span><br><span class="line">例如：sed <span class="string">'/^root/d'</span> file</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、如果匹配的是扩展正则表达式，需要使用<span class="literal">-r</span>选来扩展sed</span><br><span class="line">grep <span class="literal">-E</span></span><br><span class="line">sed <span class="literal">-r</span></span><br><span class="line">+ ? () &#123;n,m&#125; | \d</span><br><span class="line"></span><br><span class="line">注意：         </span><br><span class="line">在正则表达式中如果出现特殊字符(^<span class="variable">$</span>.*/[]),需要以前导 <span class="string">"\"</span> 号做转义</span><br><span class="line">eg：sed <span class="string">'/\$foo/p'</span> file</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、逗号分隔符</span><br><span class="line">例如：sed <span class="string">'5,7d'</span> file  				删除<span class="number">5</span>到<span class="number">7</span>行</span><br><span class="line">例如：sed <span class="string">'/root/,/ftp/d'</span> file	</span><br><span class="line">删除第一个匹配字符串<span class="string">"root"</span>到第一个匹配字符串<span class="string">"ftp"</span>的所有行本行不找 循环执行</span><br><span class="line">       </span><br><span class="line"><span class="number">4</span>、组合方式</span><br><span class="line">例如：sed <span class="string">'1,/foo/d'</span> file			删除第一行到第一个匹配字符串<span class="string">"foo"</span>的所有行</span><br><span class="line">例如：sed <span class="string">'/foo/,+4d'</span> file			删除从匹配字符串”foo“开始到其后四行为止的行</span><br><span class="line">例如：sed <span class="string">'/foo/,~3d'</span> file			删除从匹配字符串”foo“开始删除到<span class="number">3</span>的倍数行（文件中）</span><br><span class="line">例如：sed <span class="string">'1~5d'</span> file				从第一行开始删每五行删除一行</span><br><span class="line">例如：sed <span class="literal">-nr</span> <span class="string">'/foo|bar/p'</span> file	显示配置字符串<span class="string">"foo"</span>或<span class="string">"bar"</span>的行</span><br><span class="line">例如：sed <span class="literal">-n</span> <span class="string">'/foo/,/bar/p'</span> file	显示匹配从foo到bar的行</span><br><span class="line">例如：sed <span class="string">'1~2d'</span>  file				删除奇数行</span><br><span class="line">例如：sed <span class="string">'0-2d'</span>   file				删除偶数行 sed <span class="string">'1~2!d'</span>  file</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、特殊情况</span><br><span class="line">例如：sed <span class="string">'$d'</span> file					删除最后一行</span><br><span class="line">例如：sed <span class="string">'1d'</span> file					删除第一行</span><br><span class="line">	</span><br><span class="line"><span class="number">6</span>、其他：</span><br><span class="line">sed <span class="string">'s/.//'</span> a.txt						删除每一行中的第一个字符</span><br><span class="line">sed <span class="string">'s/.//2'</span> a.txt					删除每一行中的第二个字符</span><br><span class="line">sed <span class="string">'s/.//N'</span> a.txt					从文件中第N行开始，删除每行中第N个字符（N&gt;<span class="number">2</span>）</span><br><span class="line">sed <span class="string">'s/.$//'</span> a.txt					删除每一行中的最后一个字符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># cat 2.txt </span></span><br><span class="line"><span class="number">1</span> a</span><br><span class="line"><span class="number">2</span> b</span><br><span class="line"><span class="number">3</span> c</span><br><span class="line"><span class="number">4</span> d</span><br><span class="line"><span class="number">5</span> e</span><br><span class="line"><span class="number">6</span> f</span><br><span class="line"><span class="number">7</span> u</span><br><span class="line"><span class="number">8</span> k</span><br><span class="line"><span class="number">9</span> o</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed '/c/,~2d' 2.txt </span></span><br><span class="line"><span class="number">1</span> a</span><br><span class="line"><span class="number">2</span> b</span><br><span class="line"><span class="number">5</span> e</span><br><span class="line"><span class="number">6</span> f</span><br><span class="line"><span class="number">7</span> u</span><br><span class="line"><span class="number">8</span> k</span><br><span class="line"><span class="number">9</span> o</span><br></pre></td></tr></table></figure>

<p>#四、课堂练习</p>
<ol>
<li>将任意数字替换成空或者制表符</li>
<li>去掉文件1-5行中的数字、冒号、斜杠</li>
<li>匹配root关键字替换成hello itcast，并保存到test.txt文件中</li>
<li>删除vsftpd.conf、smb.conf、main.cf配置文件里所有注释的行及空行（不要直接修改原文件）</li>
<li>使用sed命令截取自己的ip地址</li>
<li>使用sed命令一次性截取ip地址、广播地址、子网掩码</li>
<li>注释掉文件的2-3行和匹配到以root开头或者以ftp开头的行</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span>、将文件中任意数字替换成空或者制表符</span><br><span class="line"><span class="number">2</span>、去掉文件<span class="number">1</span><span class="literal">-5</span>行中的数字、冒号、斜杠</span><br><span class="line"><span class="number">3</span>、匹配root关键字的行替换成hello itcast，并保存到test.txt文件中</span><br><span class="line"><span class="number">4</span>、删除vsftpd.conf、smb.conf、main.cf配置文件里所有注释的行及空行（不要直接修改原文件）</span><br><span class="line"><span class="number">5</span>、使用sed命令截取自己的ip地址</span><br><span class="line"><span class="comment"># ifconfig eth0|sed -n '2p'|sed -n 's/.*addr://pg'|sed -n 's/Bcast.*//gp'</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span>  </span><br><span class="line"><span class="comment"># ifconfig eth0|sed -n '2p'|sed 's/.*addr://g'|sed 's/ Bcast:.*//g'</span></span><br><span class="line"><span class="number">6</span>、使用sed命令一次性截取ip地址、广播地址、子网掩码</span><br><span class="line"><span class="comment"># ifconfig eth0|sed -n '2p'|sed -n 's#.*addr:\(.*\) Bcast:\(.*\) Mask:\(.*\)#\1\n\2\n\3#p'</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span> </span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.255</span> </span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、注释掉文件的<span class="number">2</span><span class="literal">-3</span>行和匹配到以root开头或者以ftp开头的行</span><br><span class="line"><span class="comment"># sed -nr '2,3s/^/#&amp;/p;s/^ROOT|^ftp/#&amp;/p' 1.txt</span></span><br><span class="line"><span class="comment">#ROOT:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="comment">#bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sed -ne '1,2s/^/#&amp;/gp' a.txt -nre 's/^lp|^mail/#&amp;/gp'</span></span><br><span class="line"><span class="comment"># sed -nr '1,2s/^/#&amp;/gp;s/^lp|^mail/#&amp;/gp' a.txt</span></span><br></pre></td></tr></table></figure>

<p>#五、课后实战</p>
<p>1、写一个初始化系统的脚本<br>1）自动修改主机名（如：ip是192.168.0.88，则主机名改为server88.itcast.cc）</p>
<p>a. 更改文件非交互式 sed</p>
<p>/etc/sysconfig/network</p>
<p>b.将本主机的IP截取出来赋值给一个变量ip;再然后将ip变量里以.分割的最后一位赋值给另一个变量ip1</p>
<p>2）自动配置可用的yum源</p>
<p>3）自动关闭防火墙和selinux</p>
<p>2、写一个搭建ftp服务的脚本，要求如下：<br>1）不支持本地用户登录        local_enable=NO<br>2） 匿名用户可以上传 新建 删除     anon_upload_enable=YES  anon_mkdir_write_enable=YES<br>3） 匿名用户限速500KBps  anon_max_rate=500000</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">仅供参考：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">ipaddr=`ifconfig eth0|sed <span class="literal">-n</span> <span class="string">'2p'</span>|sed <span class="literal">-e</span> <span class="string">'s/.*inet addr:\(.*\) Bcast.*/\1/g'</span>`</span><br><span class="line">iptail=`echo <span class="variable">$ipaddr</span>|cut <span class="literal">-d</span><span class="string">'.'</span> <span class="literal">-f4</span>`</span><br><span class="line">ipremote=<span class="number">192.168</span>.<span class="number">1.10</span></span><br><span class="line"><span class="comment">#修改主机名</span></span><br><span class="line">hostname server<span class="variable">$iptail</span>.itcast.com</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">"/HOSTNAME/cHOSTNAME=server<span class="variable">$iptail</span>.itcast.com"</span> /etc/sysconfig/network</span><br><span class="line">echo <span class="string">"<span class="variable">$ipaddr</span> server<span class="variable">$iptail</span>.itcast.cc"</span> &gt;&gt;/etc/hosts</span><br><span class="line"><span class="comment">#关闭防火墙和selinux</span></span><br><span class="line">service iptables stop</span><br><span class="line">setenforce <span class="number">0</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">'/^SELINUX=/cSELINUX=disabled'</span> /etc/selinux/config</span><br><span class="line"><span class="comment">#配置yum源(一般是内网源)</span></span><br><span class="line"><span class="comment">#test network</span></span><br><span class="line">ping <span class="literal">-c</span> <span class="number">1</span> <span class="variable">$ipremote</span> &gt; /dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">	echo <span class="string">"你的网络不通，请先检查你的网络"</span></span><br><span class="line">	<span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	echo <span class="string">"网络ok."</span></span><br><span class="line">fi</span><br><span class="line">cat &gt; /etc/yum.repos.d/server.repo &lt;&lt; <span class="keyword">end</span></span><br><span class="line">[<span class="type">server</span>]</span><br><span class="line">name=server</span><br><span class="line">baseurl=ftp://<span class="variable">$ipremote</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装软件</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">"请输入需要安装的软件，多个用空格隔开："</span> soft</span><br><span class="line">yum <span class="literal">-y</span> install <span class="variable">$soft</span> &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment">#备份配置文件</span></span><br><span class="line">conf=/etc/vsftpd/vsftpd.conf</span><br><span class="line">\cp <span class="variable">$conf</span> <span class="variable">$conf</span>.default</span><br><span class="line"><span class="comment">#根据需求修改配置文件</span></span><br><span class="line">sed <span class="literal">-ir</span> <span class="string">'/^#|^$/d'</span> <span class="variable">$conf</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">'/local_enable/c\local_enable=NO'</span> <span class="variable">$conf</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">'$a anon_upload_enable=YES'</span> <span class="variable">$conf</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">'$a anon_mkdir_write_enable=YES'</span> <span class="variable">$conf</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">'$a anon_other_write_enable=YES'</span> <span class="variable">$conf</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">'$a anon_max_rate=512000'</span> <span class="variable">$conf</span></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">service vsftpd restart &amp;&gt;/dev/null &amp;&amp; echo<span class="string">"vsftpd服务启动成功"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试验证</span></span><br><span class="line">chmod <span class="number">777</span> /var/ftp/pub</span><br><span class="line">cp /etc/hosts /var/ftp/pub</span><br><span class="line"><span class="comment">#测试下载</span></span><br><span class="line">cd /tmp</span><br><span class="line">lftp <span class="variable">$ipaddr</span> &lt;&lt;<span class="keyword">end</span></span><br><span class="line">cd pub</span><br><span class="line">get hosts</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> /<span class="type">tmp</span>/<span class="type">hosts</span> ];then</span><br><span class="line">	echo <span class="string">"匿名用户下载成功"</span></span><br><span class="line">	rm <span class="operator">-f</span> /tmp/hosts</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	echo <span class="string">"匿名用户下载失败"</span></span><br><span class="line">fi</span><br><span class="line"><span class="comment">#测试上传、创建目录、删除目录等</span></span><br><span class="line">cd /tmp</span><br><span class="line">lftp <span class="variable">$ipaddr</span> &lt;&lt; <span class="keyword">end</span></span><br><span class="line">cd pub</span><br><span class="line">mkdir test1</span><br><span class="line">mkdir test2</span><br><span class="line">put /etc/group</span><br><span class="line">rmdir test2</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">d</span> /<span class="type">var</span>/<span class="type">ftp</span>/<span class="type">pub</span>/<span class="type">test1</span> ];then</span><br><span class="line">    echo <span class="string">"创建目录成功"</span></span><br><span class="line">	<span class="keyword">if</span> [ ! -<span class="type">d</span> /<span class="type">var</span>/<span class="type">ftp</span>/<span class="type">pub</span>/<span class="type">test2</span> ];then</span><br><span class="line">    	echo <span class="string">"文件删除成功"</span></span><br><span class="line">        fi</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="keyword">if</span> [ -<span class="type">f</span> /<span class="type">var</span>/<span class="type">ftp</span>/<span class="type">pub</span>/<span class="type">group</span> ];then</span><br><span class="line">	echo <span class="string">"文件上传成功"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        echo <span class="string">"上传、创建目录删除目录部ok"</span></span><br><span class="line">        fi </span><br><span class="line">fi   </span><br><span class="line">[ -<span class="type">f</span> /<span class="type">var</span>/<span class="type">ftp</span>/<span class="type">pub</span>/<span class="type">group</span> ] &amp;&amp; echo <span class="string">"上传文件成功"</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="08-SHELL编程之文本处理工具awk"><a href="#08-SHELL编程之文本处理工具awk" class="headerlink" title="08_SHELL编程之文本处理工具awk"></a>08_SHELL编程之文本处理工具awk</h1><!--more-->
<hr>
<p>#课程目标</p>
<ul>
<li>熟悉awk的<strong>命令行模式</strong>基本语法结构</li>
<li>==熟悉awk的相关内部变量==</li>
<li>熟悉awk常用的打印==函数print==</li>
<li>能够在awk中匹配正则表达式打印相关的行</li>
</ul>
<h1 id="一、awk介绍"><a href="#一、awk介绍" class="headerlink" title="一、awk介绍"></a>一、awk介绍</h1><h2 id="1-awk概述"><a href="#1-awk概述" class="headerlink" title="1. awk概述"></a>1. awk概述</h2><ul>
<li>awk是一种==编程语言==，主要用于在linux/unix下对==文本和数据==进行处理，是linux/unix下的一个工具。数据可以来自标准输入、一个或多个文件，或其它命令的输出。</li>
<li>awk的处理文本和数据的方式：<strong>==逐行扫描==文件</strong>，默认从第一行到最后一行，寻找匹配的==特定模式==的行，并在这些行上进行你想要的操作。</li>
<li>awk分别代表其作者姓氏的第一个字母。因为它的作者是三个人，分别是Alfred Aho、Brian Kernighan、Peter Weinberger。</li>
<li>gawk是awk的GNU版本，它提供了Bell实验室和GNU的一些扩展。</li>
</ul>
<ul>
<li>下面介绍的awk是以GNU的gawk为例的，在linux系统中已把awk链接到gawk，所以下面全部以awk进行介绍。</li>
</ul>
<h2 id="2-awk能干啥"><a href="#2-awk能干啥" class="headerlink" title="2. awk能干啥?"></a>2. awk能干啥?</h2><ol>
<li>awk==用来处理文件和数据==的，是类unix下的一个工具，也是一种编程语言</li>
<li>可以用来==统计数据==，比如网站的访问量，访问的IP量等等</li>
<li>支持条件判断，支持for和while循环</li>
</ol>
<p>#二、awk使用方式</p>
<h2 id="1-命令行模式使用"><a href="#1-命令行模式使用" class="headerlink" title="1. ==命令行模式使用=="></a>1. ==命令行模式使用==</h2><h3 id="㈠-语法结构"><a href="#㈠-语法结构" class="headerlink" title="㈠ 语法结构"></a>㈠ 语法结构</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">awk 选项 <span class="string">'命令部分'</span> 文件名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">特别说明：</span><br><span class="line">引用shell变量需用双引号引起</span><br></pre></td></tr></table></figure>

<p>###㈡ 常用选项介绍</p>
<ul>
<li>==-F==  定义字段分割符号，默认的分隔符是==空格==</li>
<li>-v  定义变量并赋值</li>
</ul>
<p>###㈢  <strong>==’==</strong>命名部分说明<strong>==’==</strong></p>
<ul>
<li>正则表达式，地址定位</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">'/root/&#123;awk语句&#125;'</span>				sed中： <span class="string">'/root/p'</span></span><br><span class="line"><span class="string">'NR==1,NR==5&#123;awk语句&#125;'</span>			sed中： <span class="string">'1,5p'</span></span><br><span class="line"><span class="string">'/^root/,/^ftp/&#123;awk语句&#125;'</span>  	sed中：<span class="string">'/^root/,/^ftp/p'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>{awk语句1<strong>==;==</strong>awk语句2<strong>==;==</strong>…}</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">'&#123;print $0;print $1&#125;'</span>		sed中：<span class="string">'p'</span></span><br><span class="line"><span class="string">'NR==5&#123;print $0&#125;'</span>				sed中：<span class="string">'5p'</span></span><br><span class="line">注：awk命令语句间用分号间隔</span><br></pre></td></tr></table></figure>

<ul>
<li>BEGIN…END….</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">'BEGIN&#123;awk语句&#125;;&#123;处理中&#125;;END&#123;awk语句&#125;'</span></span><br><span class="line"><span class="string">'BEGIN&#123;awk语句&#125;;&#123;处理中&#125;'</span></span><br><span class="line"><span class="string">'&#123;处理中&#125;;END&#123;awk语句&#125;'</span></span><br></pre></td></tr></table></figure>

<h2 id="2-脚本模式使用"><a href="#2-脚本模式使用" class="headerlink" title="2. 脚本模式使用"></a>2. 脚本模式使用</h2><h3 id="㈠-脚本编写"><a href="#㈠-脚本编写" class="headerlink" title="㈠ 脚本编写"></a>㈠ 脚本编写</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/awk -f 		定义魔法字符</span></span><br><span class="line">以下是awk引号里的命令清单，不要用引号保护命令，多个命令用分号间隔</span><br><span class="line"><span class="keyword">BEGIN</span>&#123;FS=<span class="string">":"</span>&#125;</span><br><span class="line">NR==<span class="number">1</span>,NR==<span class="number">3</span>&#123;print <span class="variable">$1</span><span class="string">"\t"</span><span class="variable">$NF</span>&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="㈡-脚本执行"><a href="#㈡-脚本执行" class="headerlink" title="㈡ 脚本执行"></a>㈡ 脚本执行</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">方法<span class="number">1</span>：</span><br><span class="line">awk 选项 <span class="operator">-f</span> awk的脚本文件  要处理的文本文件</span><br><span class="line">awk <span class="operator">-f</span> awk.sh filename</span><br><span class="line"></span><br><span class="line">sed <span class="operator">-f</span> sed.sh <span class="literal">-i</span> filename</span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line">./awk的脚本文件(或者绝对路径)	要处理的文本文件</span><br><span class="line">./awk.sh filename</span><br><span class="line"></span><br><span class="line">./sed.sh filename</span><br></pre></td></tr></table></figure>

<p>#三、 awk内部相关变量</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>变量说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>==$0==</td>
<td>当前处理行的所有记录</td>
<td></td>
</tr>
<tr>
<td>==$1,$2,$3…$n==</td>
<td>文件中每行以==间隔符号==分割的不同字段</td>
<td>awk -F: ‘{print $1,$3}’</td>
</tr>
<tr>
<td>==NF==</td>
<td>当前记录的字段数（列数）</td>
<td>awk -F: ‘{print NF}’</td>
</tr>
<tr>
<td>==$NF==</td>
<td>最后一列</td>
<td>$(NF-1)表示倒数第二列</td>
</tr>
<tr>
<td>==FNR/NR==</td>
<td>行号</td>
<td></td>
</tr>
<tr>
<td>==FS==</td>
<td>定义间隔符</td>
<td>‘BEGIN{FS=”:”};{print $1,$3}’</td>
</tr>
<tr>
<td>==OFS==</td>
<td>定义输出字段分隔符，==默认空格==</td>
<td>‘BEGIN{OFS=”\t”};print $1,$3}’</td>
</tr>
<tr>
<td>RS</td>
<td>输入记录分割符，默认换行</td>
<td>‘BEGIN{RS=”\t”};{print $0}’</td>
</tr>
<tr>
<td>ORS</td>
<td>输出记录分割符，默认换行</td>
<td>‘BEGIN{ORS=”\n\n”};{print $1,$3}’</td>
</tr>
<tr>
<td>FILENAME</td>
<td>当前输入的文件名</td>
<td></td>
</tr>
</tbody></table>
<h2 id="1、-常用内置变量举例"><a href="#1、-常用内置变量举例" class="headerlink" title="1、==常用内置变量举例=="></a>1、==常用内置变量举例==</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># awk -F: '&#123;print $1,$(NF-1)&#125;' 1.txt</span></span><br><span class="line"><span class="comment"># awk -F: '&#123;print $1,$(NF-1),$NF,NF&#125;' 1.txt</span></span><br><span class="line"><span class="comment"># awk '/root/&#123;print $0&#125;' 1.txt</span></span><br><span class="line"><span class="comment"># awk '/root/' 1.txt</span></span><br><span class="line"><span class="comment"># awk -F: '/root/&#123;print $1,$NF&#125;' 1.txt </span></span><br><span class="line">root /bin/bash</span><br><span class="line"><span class="comment"># awk -F: '/root/&#123;print $0&#125;' 1.txt      </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line"><span class="comment"># awk 'NR==1,NR==5' 1.txt </span></span><br><span class="line"><span class="comment"># awk 'NR==1,NR==5&#123;print $0&#125;' 1.txt</span></span><br><span class="line"><span class="comment"># awk 'NR==1,NR==5;/^root/&#123;print $0&#125;' 1.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:<span class="number">4</span>:<span class="number">7</span>:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure>

<h2 id="2、内置变量分隔符举例"><a href="#2、内置变量分隔符举例" class="headerlink" title="2、内置变量分隔符举例"></a>2、内置变量分隔符举例</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">FS和OFS:</span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;FS=":"&#125;;/^root/,/^lp/&#123;print $1,$NF&#125;' 1.txt</span></span><br><span class="line"><span class="comment"># awk -F: 'BEGIN&#123;OFS="\t\t"&#125;;/^root/,/^lp/&#123;print $1,$NF&#125;' 1.txt        </span></span><br><span class="line">root            /bin/bash</span><br><span class="line">bin             /sbin/nologin</span><br><span class="line">daemon          /sbin/nologin</span><br><span class="line">adm             /sbin/nologin</span><br><span class="line">lp              /sbin/nologin</span><br><span class="line"><span class="comment"># awk -F: 'BEGIN&#123;OFS="@@@"&#125;;/^root/,/^lp/&#123;print $1,$NF&#125;' 1.txt     </span></span><br><span class="line">root<span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span>/bin/bash</span><br><span class="line">bin<span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span>/sbin/nologin</span><br><span class="line">daemon<span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span>/sbin/nologin</span><br><span class="line">adm<span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span>/sbin/nologin</span><br><span class="line">lp<span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span>/sbin/nologin</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell07</span>]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line">RS和ORS：</span><br><span class="line">修改源文件前<span class="number">2</span>行增加制表符和内容：</span><br><span class="line">vim <span class="number">1</span>.txt</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash hello   world</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin        test1   test2</span><br><span class="line"></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;RS="\t"&#125;;&#123;print $0&#125;' 1.txt</span></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;ORS="\t"&#125;;&#123;print $0&#125;' 1.txt</span></span><br></pre></td></tr></table></figure>

<p>#四、 awk工作原理</p>
<p><code>awk -F: &#39;{print $1,$3}&#39; /etc/passwd</code></p>
<ol>
<li><p>awk使用一行作为输入，并将这一行赋给内部变量$0，每一行也可称为一个记录，以换行符(RS)结束</p>
</li>
<li><p>每行被间隔符<strong>==:==</strong>(默认为空格或制表符)分解成字段(或域)，每个字段存储在已编号的变量中，从$1开始</p>
<p>问：awk如何知道用空格来分隔字段的呢？</p>
<p>答：因为有一个内部变量==FS==来确定字段分隔符。初始时，FS赋为空格</p>
</li>
<li><p>awk使用print函数打印字段，打印出来的字段会以==空格分隔==，因为$1,$3之间有一个逗号。逗号比较特殊，它映射为另一个内部变量，称为==输出字段分隔符==OFS，OFS默认为空格</p>
</li>
<li><p>awk处理完一行后，将从文件中获取另一行，并将其存储在$0中，覆盖原来的内容，然后将新的字符串分隔成字段并进行处理。该过程将持续到所有行处理完毕</p>
</li>
</ol>
<h1 id="五、awk使用进阶"><a href="#五、awk使用进阶" class="headerlink" title="五、awk使用进阶"></a>五、awk使用进阶</h1><h2 id="1-格式化输出print和printf"><a href="#1-格式化输出print和printf" class="headerlink" title="1. 格式化输出print和printf"></a>1. 格式化输出<code>print</code>和<code>printf</code></h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">print函数		类似echo <span class="string">"hello world"</span></span><br><span class="line"><span class="comment"># date |awk '&#123;print "Month: "$2 "\nYear: "$NF&#125;'</span></span><br><span class="line"><span class="comment"># awk -F: '&#123;print "username is: " $1 "\t uid is: "$3&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf函数		类似echo <span class="literal">-n</span></span><br><span class="line"><span class="comment"># awk -F: '&#123;printf "%-15s %-10s %-15s\n", $1,$2,$3&#125;'  /etc/passwd</span></span><br><span class="line"><span class="comment"># awk -F: '&#123;printf "|%15s| %10s| %15s|\n", $1,$2,$3&#125;' /etc/passwd</span></span><br><span class="line"><span class="comment"># awk -F: '&#123;printf "|%-15s| %-10s| %-15s|\n", $1,$2,$3&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;;&#123;printf "%-15s %-15s %-15s\n",$1,$6,$NF&#125;'</span> a.txt</span><br><span class="line"></span><br><span class="line">%s 字符类型  strings			%<span class="literal">-20s</span></span><br><span class="line">%d 数值类型	</span><br><span class="line">占<span class="number">15</span>字符</span><br><span class="line">- 表示左对齐，默认是右对齐</span><br><span class="line">printf默认不会在行尾自动换行，加\n</span><br></pre></td></tr></table></figure>

<h2 id="2-awk变量定义"><a href="#2-awk变量定义" class="headerlink" title="2. awk变量定义"></a>2. awk变量定义</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># awk -v NUM=3 -F: '&#123; print $NUM &#125;' /etc/passwd</span></span><br><span class="line"><span class="comment"># awk -v NUM=3 -F: '&#123; print NUM &#125;' /etc/passwd</span></span><br><span class="line"><span class="comment"># awk -v num=1 'BEGIN&#123;print num&#125;' </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># awk -v num=1 'BEGIN&#123;print $num&#125;' </span></span><br><span class="line">注意：</span><br><span class="line">awk中调用定义的变量不需要加<span class="variable">$</span></span><br></pre></td></tr></table></figure>

<p>##3. awk中BEGIN…END使用</p>
<p>​    ①==BEGIN==：表示在==程序开始前==执行</p>
<p>​    ②==END== ：表示所有文件==处理完后==执行</p>
<p>​    ③用法：<code>&#39;BEGIN{开始处理之前};{处理中};END{处理结束后}&#39;</code></p>
<h4 id="㈠-举例说明1"><a href="#㈠-举例说明1" class="headerlink" title="㈠ 举例说明1"></a>㈠ 举例说明1</h4><p><strong>打印最后一列和倒数第二列（登录shell和家目录）</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">awk <span class="operator">-F</span>: <span class="string">'BEGIN&#123; print "Login_shell\t\tLogin_home\n*******************"&#125;;&#123;print $NF"\t\t"$(NF-1)&#125;;END&#123;print "************************"&#125;'</span> <span class="number">1</span>.txt</span><br><span class="line"></span><br><span class="line">awk <span class="string">'BEGIN&#123; FS=":";print "Login_shell\tLogin_home\n*******************"&#125;;&#123;print $NF"\t"$(NF-1)&#125;;END&#123;print "************************"&#125;'</span> <span class="number">1</span>.txt</span><br><span class="line"></span><br><span class="line">Login_shell		Login_home</span><br><span class="line">************************</span><br><span class="line">/bin/bash		/root</span><br><span class="line">/sbin/nologin		/bin</span><br><span class="line">/sbin/nologin		/sbin</span><br><span class="line">/sbin/nologin		/var/adm</span><br><span class="line">/sbin/nologin		/var/spool/lpd</span><br><span class="line">/bin/bash		/home/redhat</span><br><span class="line">/bin/bash		/home/user01</span><br><span class="line">/sbin/nologin		/var/named</span><br><span class="line">/bin/bash		/home/u01</span><br><span class="line">/bin/bash		/home/YUNWEI</span><br><span class="line">************************************</span><br></pre></td></tr></table></figure>

<h4 id="㈡-举例说明2"><a href="#㈡-举例说明2" class="headerlink" title="㈡ 举例说明2"></a>㈡ 举例说明2</h4><p><strong>打印/etc/passwd里的用户名、家目录及登录shell</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">u_name      h_dir       shell</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'BEGIN&#123;OFS="\t\t";print"u_name\t\th_dir\t\tshell\n***************************"&#125;;&#123;printf "%-20s %-20s %-20s\n",$1,$(NF-1),$NF&#125;;END&#123;print "****************************"&#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk -F: 'BEGIN&#123;print "u_name\t\th_dir\t\tshell" RS "*****************"&#125;  &#123;printf "%-15s %-20s %-20s\n",$1,$(NF-1),$NF&#125;END&#123;print "***************************"&#125;'  /etc/passwd</span></span><br><span class="line"></span><br><span class="line">格式化输出：</span><br><span class="line">echo		print</span><br><span class="line">echo <span class="literal">-n</span>	printf</span><br><span class="line"></span><br><span class="line">&#123;printf <span class="string">"%-15s %-20s %-20s\n"</span>,<span class="variable">$1</span>,<span class="variable">$</span>(NF<span class="literal">-1</span>),<span class="variable">$NF</span>&#125;</span><br></pre></td></tr></table></figure>

<p>###4. awk和正则的综合运用</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>~</td>
<td>匹配</td>
</tr>
<tr>
<td>!~</td>
<td>不匹配</td>
</tr>
<tr>
<td>!</td>
<td>逻辑非</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或</td>
</tr>
</tbody></table>
<h3 id="㈠-举例说明"><a href="#㈠-举例说明" class="headerlink" title="㈠ 举例说明"></a>㈠ 举例说明</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">从第一行开始匹配到以lp开头行</span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'NR==1,/^lp/&#123;print $0 &#125;'</span> passwd  </span><br><span class="line">从第一行到第<span class="number">5</span>行          </span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'NR==1,NR==5&#123;print $0 &#125;'</span> passwd</span><br><span class="line">从以lp开头的行匹配到第<span class="number">10</span>行       </span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'/^lp/,NR==10&#123;print $0 &#125;'</span> passwd </span><br><span class="line">从以root开头的行匹配到以lp开头的行       </span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'/^root/,/^lp/&#123;print $0&#125;'</span> passwd</span><br><span class="line">打印以root开头或者以lp开头的行            </span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'/^root/ || /^lp/&#123;print $0&#125;'</span> passwd</span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'/^root/;/^lp/&#123;print $0&#125;'</span> passwd</span><br><span class="line">显示<span class="number">5</span><span class="literal">-10</span>行   </span><br><span class="line">awk <span class="operator">-F</span><span class="string">':'</span> <span class="string">'NR&gt;=5 &amp;&amp; NR&lt;=10 &#123;print $0&#125;'</span> /etc/passwd     </span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'NR&lt;10 &amp;&amp; NR&gt;5 &#123;print $0&#125;'</span> passwd </span><br><span class="line"></span><br><span class="line">打印<span class="number">30</span><span class="literal">-39</span>行以bash结尾的内容：</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell06</span>]<span class="comment"># awk 'NR&gt;=30 &amp;&amp; NR&lt;=39 &amp;&amp; $0 ~ /bash$/&#123;print $0&#125;' passwd </span></span><br><span class="line">stu1:x:<span class="number">500</span>:<span class="number">500</span>::/home/stu1:/bin/bash</span><br><span class="line">yunwei:x:<span class="number">501</span>:<span class="number">501</span>::/home/yunwei:/bin/bash</span><br><span class="line">user01:x:<span class="number">502</span>:<span class="number">502</span>::/home/user01:/bin/bash</span><br><span class="line">user02:x:<span class="number">503</span>:<span class="number">503</span>::/home/user02:/bin/bash</span><br><span class="line">user03:x:<span class="number">504</span>:<span class="number">504</span>::/home/user03:/bin/bash</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell06</span>]<span class="comment"># awk 'NR&gt;=3 &amp;&amp; NR&lt;=8 &amp;&amp; /bash$/' 1.txt  </span></span><br><span class="line">stu7:x:<span class="number">1007</span>:<span class="number">1007</span>::/rhome/stu7:/bin/bash</span><br><span class="line">stu8:x:<span class="number">1008</span>:<span class="number">1008</span>::/rhome/stu8:/bin/bash</span><br><span class="line">stu9:x:<span class="number">1009</span>:<span class="number">1009</span>::/rhome/stu9:/bin/bash</span><br><span class="line"></span><br><span class="line">打印文件中<span class="number">1</span><span class="literal">-5</span>并且以root开头的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell06</span>]<span class="comment"># awk 'NR&gt;=1 &amp;&amp; NR&lt;=5 &amp;&amp; $0 ~ /^root/&#123;print $0&#125;' 1.txt</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell06</span>]<span class="comment"># awk 'NR&gt;=1 &amp;&amp; NR&lt;=5 &amp;&amp; $0 !~ /^root/&#123;print $0&#125;' 1.txt</span></span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:<span class="number">4</span>:<span class="number">7</span>:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">理解;号和||的含义：</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell06</span>]<span class="comment"># awk 'NR&gt;=3 &amp;&amp; NR&lt;=8 || /bash$/' 1.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell06</span>]<span class="comment"># awk 'NR&gt;=3 &amp;&amp; NR&lt;=8;/bash$/' 1.txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">打印IP地址</span><br><span class="line"><span class="comment"># ifconfig eth0|awk 'NR&gt;1 &#123;print $2&#125;'|awk -F':' 'NR&lt;2 &#123;print $2&#125;'    </span></span><br><span class="line"><span class="comment"># ifconfig eth0|grep Bcast|awk -F':' '&#123;print $2&#125;'|awk '&#123;print $1&#125;'</span></span><br><span class="line"><span class="comment"># ifconfig eth0|grep Bcast|awk '&#123;print $2&#125;'|awk -F: '&#123;print $2&#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ifconfig eth0|awk NR==2|awk -F '[ :]+' '&#123;print $4RS$6RS$8&#125;'</span></span><br><span class="line"><span class="comment"># ifconfig eth0|awk -F"[ :]+" '/inet addr:/&#123;print $4&#125;'</span></span><br></pre></td></tr></table></figure>

<h2 id="4-课堂练习"><a href="#4-课堂练习" class="headerlink" title="4. 课堂练习"></a>4. 课堂练习</h2><ol>
<li>显示可以登录操作系统的用户所有信息     从第7列匹配以bash结尾，输出整行（当前行所有的列）</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~] awk <span class="string">'/bash$/&#123;print $0&#125;'</span>    /etc/passwd</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~] awk <span class="string">'/bash$/&#123;print $0&#125;'</span> /etc/passwd</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~] awk <span class="string">'/bash$/'</span> /etc/passwd</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~] awk <span class="operator">-F</span>: <span class="string">'$7 ~ /bash/'</span> /etc/passwd</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~] awk <span class="operator">-F</span>: <span class="string">'$NF ~ /bash/'</span> /etc/passwd</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~] awk <span class="operator">-F</span>: <span class="string">'$0 ~ /bash/'</span> /etc/passwd</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~] awk <span class="operator">-F</span>: <span class="string">'$0 ~ /\/bin\/bash/'</span> /etc/passwd</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>显示可以登录系统的用户名 </li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># awk -F: '$0 ~ /\/bin\/bash/&#123;print $1&#125;' /etc/passwd</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打印出系统中普通用户的UID和用户名</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">500</span>	stu1</span><br><span class="line"><span class="number">501</span>	yunwei</span><br><span class="line"><span class="number">502</span>	user01</span><br><span class="line"><span class="number">503</span>	user02</span><br><span class="line"><span class="number">504</span>	user03</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk -F: 'BEGIN&#123;print "UID\tUSERNAME"&#125; &#123;if($3&gt;=500 &amp;&amp; $3 !=65534 ) &#123;print $3"\t"$1&#125; &#125;' /etc/passwdUID	USERNAME</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk -F: '&#123;if($3 &gt;= 500 &amp;&amp; $3 != 65534) print $1,$3&#125;' a.txt </span></span><br><span class="line">redhat <span class="number">508</span></span><br><span class="line">user01 <span class="number">509</span></span><br><span class="line">u01 <span class="number">510</span></span><br><span class="line">YUNWEI <span class="number">511</span></span><br></pre></td></tr></table></figure>

<p>##5. awk的脚本编程</p>
<h3 id="㈠-流程控制语句"><a href="#㈠-流程控制语句" class="headerlink" title="㈠ 流程控制语句"></a>㈠ 流程控制语句</h3><h4 id="①-if结构"><a href="#①-if结构" class="headerlink" title="① if结构"></a>① if结构</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>语句：</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="type">xxx</span> ];then</span><br><span class="line">xxx</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">awk 选项 <span class="string">'正则，地址定位&#123;awk语句&#125;'</span>  文件名</span><br><span class="line"></span><br><span class="line">&#123; <span class="keyword">if</span>(表达式)｛语句<span class="number">1</span>;语句<span class="number">2</span>;...｝&#125;</span><br><span class="line"></span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'&#123;if($3&gt;=500 &amp;&amp; $3&lt;=60000) &#123;print $1,$3&#125; &#125;'</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># awk -F: '&#123;if($3==0) &#123;print $1"是管理员"&#125; &#125;' passwd </span></span><br><span class="line">root是管理员</span><br><span class="line"></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;if('$(id -u)'==0) &#123;print "admin"&#125; &#125;'</span></span><br><span class="line">admin</span><br></pre></td></tr></table></figure>

<h4 id="②-if…else结构"><a href="#②-if…else结构" class="headerlink" title="② if…else结构"></a>② if…else结构</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">if...else语句:</span><br><span class="line"><span class="keyword">if</span> [ <span class="type">xxx</span> ];then</span><br><span class="line">	xxxxx</span><br><span class="line">	</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	xxx</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">&#123;<span class="keyword">if</span>(表达式)｛语句;语句;...｝<span class="keyword">else</span>｛语句;语句;...&#125;&#125;</span><br><span class="line"></span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'&#123; if($3&gt;=500 &amp;&amp; $3 != 65534) &#123;print $1"是普通用户"&#125; else &#123;print $1,"不是普通用户"&#125;&#125;'</span> passwd </span><br><span class="line"></span><br><span class="line">awk <span class="string">'BEGIN&#123;if( '</span><span class="variable">$</span>(id <span class="literal">-u</span>)<span class="string">'&gt;=500 &amp;&amp; '</span><span class="variable">$</span>(id <span class="literal">-u</span>)<span class="string">' !=65534 ) &#123;print "是普通用户"&#125; else &#123;print "不是普通用户"&#125;&#125;'</span></span><br></pre></td></tr></table></figure>

<h4 id="③-if…elif…else结构"><a href="#③-if…elif…else结构" class="headerlink" title="③ if…elif…else结构"></a>③ if…elif…else结构</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [<span class="type">xxxx</span>];then</span><br><span class="line">	xxxx</span><br><span class="line">elif [<span class="type">xxx</span>];then</span><br><span class="line">	xxx</span><br><span class="line">....</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">...</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if...else if...else语句：</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">&#123; <span class="keyword">if</span>(表达式<span class="number">1</span>)｛语句;语句；...｝<span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>)｛语句;语句；...｝<span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">3</span>)｛语句;语句；...｝<span class="keyword">else</span>｛语句;语句；...｝&#125;</span><br><span class="line"></span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'&#123; if($3==0) &#123;print $1,":是管理员"&#125; else if($3&gt;=1 &amp;&amp; $3&lt;=499 || $3==65534 ) &#123;print $1,":是系统用户"&#125; else &#123;print $1,":是普通用户"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'&#123; if($3==0) &#123;i++&#125; else if($3&gt;=1 &amp;&amp; $3&lt;=499 || $3==65534 ) &#123;j++&#125; else &#123;k++&#125;&#125;;END&#123;print "管理员个数为:"i "\n系统用户个数为:"j"\n普通用户的个数为:"k &#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk -F: '&#123;if($3==0) &#123;print $1,"is admin"&#125; else if($3&gt;=1 &amp;&amp; $3&lt;=499 || $3==65534) &#123;print $1,"is sys users"&#125; else &#123;print $1,"is general user"&#125; &#125;' a.txt </span></span><br><span class="line"></span><br><span class="line">root is admin</span><br><span class="line">bin is sys users</span><br><span class="line">daemon is sys users</span><br><span class="line">adm is sys users</span><br><span class="line">lp is sys users</span><br><span class="line">redhat is general user</span><br><span class="line">user01 is general user</span><br><span class="line">named is sys users</span><br><span class="line">u01 is general user</span><br><span class="line">YUNWEI is general user</span><br><span class="line"></span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'&#123;  if($3==0) &#123;print $1":管理员"&#125; else if($3&gt;=1 &amp;&amp; $3&lt;500 || $3==65534 ) &#123;print $1":是系统用户"&#125; else &#123;print $1":是普通用户"&#125;&#125;'</span>   /etc/passwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'&#123;if($3==0) &#123;i++&#125; else if($3&gt;=1 &amp;&amp; $3&lt;500 || $3==65534)&#123;j++&#125; else &#123;k++&#125;&#125;;END&#123;print "管理员个数为:" i RS "系统用户个数为:"j RS "普通用户的个数为:"k &#125;'</span> /etc/passwd</span><br><span class="line">管理员个数为:<span class="number">1</span></span><br><span class="line">系统用户个数为:<span class="number">28</span></span><br><span class="line">普通用户的个数为:<span class="number">27</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk -F: '&#123; if($3==0) &#123;print $1":是管理员"&#125; else if($3&gt;=500 &amp;&amp; $3!=65534) &#123;print $1":是普通用户"&#125; else &#123;print $1":是系统用户"&#125;&#125;' passwd </span></span><br><span class="line"></span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'&#123;if($3==0)&#123;i++&#125; else if($3&gt;=500)&#123;k++&#125; else&#123;j++&#125;&#125; END&#123;print i; print k; print j&#125;'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">'&#123;if($3==0)&#123;i++&#125; else if($3&gt;999)&#123;k++&#125; else&#123;j++&#125;&#125; END&#123;print "管理员个数: "i; print "普通用个数: "k; print "系统用户: "j&#125;'</span> /etc/passwd </span><br><span class="line"></span><br><span class="line">如果是普通用户打印默认shell，如果是系统用户打印用户名</span><br><span class="line"><span class="comment"># awk -F: '&#123;if($3&gt;=1 &amp;&amp; $3&lt;500 || $3 == 65534) &#123;print $1&#125; else if($3&gt;=500 &amp;&amp; $3&lt;=60000 ) &#123;print $NF&#125; &#125;' /etc/passwd</span></span><br></pre></td></tr></table></figure>

<h3 id="㈡-循环语句"><a href="#㈡-循环语句" class="headerlink" title="㈡ 循环语句"></a>㈡ 循环语句</h3><h4 id="①-for循环"><a href="#①-for循环" class="headerlink" title="① for循环"></a>① for循环</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">打印<span class="number">1</span>~<span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++));<span class="keyword">do</span> echo <span class="variable">$i</span>;done</span><br><span class="line"></span><br><span class="line"><span class="comment"># awk 'BEGIN &#123; for(i=1;i&lt;=5;i++) &#123;print i&#125; &#125;'</span></span><br><span class="line">打印<span class="number">1</span>~<span class="number">10</span>中的奇数</span><br><span class="line"><span class="comment"># for ((i=1;i&lt;=10;i+=2));do echo $i;done|awk '&#123;sum+=$0&#125;;END&#123;print sum&#125;'</span></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123; for(i=1;i&lt;=10;i+=2) &#123;print i&#125; &#125;'</span></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123; for(i=1;i&lt;=10;i+=2) print i &#125;'</span></span><br><span class="line"></span><br><span class="line">计算<span class="number">1</span><span class="literal">-5</span>的和</span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;sum=0;for(i=1;i&lt;=5;i++) sum+=i;print sum&#125;'</span></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;for(i=1;i&lt;=5;i++) (sum+=i);&#123;print sum&#125;&#125;'</span></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;for(i=1;i&lt;=5;i++) (sum+=i);print sum&#125;'</span></span><br></pre></td></tr></table></figure>

<h4 id="②-while循环"><a href="#②-while循环" class="headerlink" title="② while循环"></a>② while循环</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">打印<span class="number">1</span><span class="literal">-5</span></span><br><span class="line"><span class="comment"># i=1;while (($i&lt;=5));do echo $i;let i++;done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk 'BEGIN &#123; i=1;while(i&lt;=5) &#123;print i;i++&#125; &#125;'</span></span><br><span class="line">打印<span class="number">1</span>~<span class="number">10</span>中的奇数</span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;i=1;while(i&lt;=10) &#123;print i;i+=2&#125; &#125;'</span></span><br><span class="line">计算<span class="number">1</span><span class="literal">-5</span>的和</span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;i=1;sum=0;while(i&lt;=5) &#123;sum+=i;i++&#125;; print sum &#125;'</span></span><br><span class="line"><span class="comment"># awk 'BEGIN &#123;i=1;while(i&lt;=5) &#123;(sum+=i) i++&#125;;print sum &#125;'</span></span><br></pre></td></tr></table></figure>

<h4 id="③-嵌套循环"><a href="#③-嵌套循环" class="headerlink" title="③ 嵌套循环"></a>③ 嵌套循环</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">嵌套循环：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((y=<span class="number">1</span>;y&lt;=<span class="number">5</span>;y++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> ((x=<span class="number">1</span>;x&lt;=<span class="variable">$y</span>;x++))</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		echo <span class="literal">-n</span> <span class="variable">$x</span>	</span><br><span class="line">	done</span><br><span class="line">echo</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">awk <span class="string">'BEGIN&#123; for(y=1;y&lt;=5;y++) &#123;for(x=1;x&lt;=y;x++) &#123;printf x&#125; ;print &#125; &#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk 'BEGIN &#123; for(y=1;y&lt;=5;y++) &#123; for(x=1;x&lt;=y;x++) &#123;printf x&#125;;print&#125; &#125;'</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123; y=1;while(y&lt;=5) &#123; for(x=1;x&lt;=y;x++) &#123;printf x&#125;;y++;print&#125;&#125;'</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line"></span><br><span class="line">尝试用三种方法打印<span class="number">99</span>口诀表：</span><br><span class="line"><span class="comment">#awk 'BEGIN&#123;for(y=1;y&lt;=9;y++) &#123; for(x=1;x&lt;=y;x++) &#123;printf x"*"y"="x*y"\t"&#125;;print&#125; &#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#awk 'BEGIN&#123;for(y=1;y&lt;=9;y++) &#123; for(x=1;x&lt;=y;x++) printf x"*"y"="x*y"\t";print&#125; &#125;'</span></span><br><span class="line"><span class="comment">#awk 'BEGIN&#123;i=1;while(i&lt;=9)&#123;for(j=1;j&lt;=i;j++) &#123;printf j"*"i"="j*i"\t"&#125;;print;i++ &#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#awk 'BEGIN&#123;for(i=1;i&lt;=9;i++)&#123;j=1;while(j&lt;=i) &#123;printf j"*"i"="i*j"\t";j++&#125;;print&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line">循环的控制：</span><br><span class="line"><span class="keyword">break</span>		条件满足的时候中断循环</span><br><span class="line"><span class="keyword">continue</span>	条件满足的时候跳过循环</span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;for(i=1;i&lt;=5;i++) &#123;if(i==3) break;print i&#125; &#125;'</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;for(i=1;i&lt;=5;i++)&#123;if(i==3) continue;print i&#125;&#125;'</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>##6. awk算数运算</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">+ - * / %(模) ^(幂<span class="number">2</span>^<span class="number">3</span>)</span><br><span class="line">可以在模式中执行计算，awk都将按浮点数方式执行算术运算</span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;print 1+1&#125;'</span></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;print 1**1&#125;'</span></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;print 2**3&#125;'</span></span><br><span class="line"><span class="comment"># awk 'BEGIN&#123;print 2/3&#125;'</span></span><br></pre></td></tr></table></figure>

<h1 id="六、awk统计案例"><a href="#六、awk统计案例" class="headerlink" title="六、awk统计案例"></a>六、awk统计案例</h1><h2 id="1、统计系统中各种类型的shell"><a href="#1、统计系统中各种类型的shell" class="headerlink" title="1、统计系统中各种类型的shell"></a>1、统计系统中各种类型的shell</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># awk -F: '&#123; shells[$NF]++ &#125;;END&#123;for (i in shells) &#123;print i,shells[i]&#125; &#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line">books[<span class="type">linux</span>]++</span><br><span class="line">books[<span class="type">linux</span>]=<span class="number">1</span></span><br><span class="line">shells[/<span class="type">bin</span>/<span class="type">bash</span>]++</span><br><span class="line">shells[/<span class="type">sbin</span>/<span class="type">nologin</span>]++</span><br><span class="line"></span><br><span class="line">/bin/bash <span class="number">5</span></span><br><span class="line">/sbin/nologin <span class="number">6</span></span><br><span class="line"></span><br><span class="line">shells[/<span class="type">bin</span>/<span class="type">bash</span>]++			a</span><br><span class="line">shells[/<span class="type">sbin</span>/<span class="type">nologin</span>]++		b</span><br><span class="line">shells[/<span class="type">sbin</span>/<span class="type">shutdown</span>]++	c</span><br><span class="line"></span><br><span class="line">books[<span class="type">linux</span>]++</span><br><span class="line">books[<span class="type">php</span>]++</span><br></pre></td></tr></table></figure>

<h2 id="2、统计网站访问状态"><a href="#2、统计网站访问状态" class="headerlink" title="2、统计网站访问状态"></a>2、统计网站访问状态</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ss -antp|grep 80|awk '&#123;states[$1]++&#125;;END&#123;for(i in states)&#123;print i,states[i]&#125;&#125;'</span></span><br><span class="line">TIME_WAIT <span class="number">578</span></span><br><span class="line">ESTABLISHED <span class="number">1</span></span><br><span class="line">LISTEN <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ss -an |grep :80 |awk '&#123;states[$2]++&#125;;END&#123;for(i in states)&#123;print i,states[i]&#125;&#125;'</span></span><br><span class="line">LISTEN <span class="number">1</span></span><br><span class="line">ESTAB <span class="number">5</span></span><br><span class="line">TIME<span class="literal">-WAIT</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ss -an |grep :80 |awk '&#123;states[$2]++&#125;;END&#123;for(i in states)&#123;print i,states[i]&#125;&#125;' |sort -k2 -rn</span></span><br><span class="line">TIME<span class="literal">-WAIT</span> <span class="number">18</span></span><br><span class="line">ESTAB <span class="number">8</span></span><br><span class="line">LISTEN <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="3、统计访问网站的每个IP的数量"><a href="#3、统计访问网站的每个IP的数量" class="headerlink" title="3、统计访问网站的每个IP的数量"></a>3、统计访问网站的每个IP的数量</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -ant |grep :80 |awk -F: '&#123;ip_count[$8]++&#125;;END&#123;for(i in ip_count)&#123;print i,ip_count[i]&#125; &#125;' |sort</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ss -an |grep :80 |awk -F":" '!/LISTEN/&#123;ip_count[$(NF-1)]++&#125;;END&#123;for(i in ip_count)&#123;print i,ip_count[i]&#125;&#125;' |sort -k2 -rn |head</span></span><br></pre></td></tr></table></figure>

<h2 id="4、统计网站日志中PV量"><a href="#4、统计网站日志中PV量" class="headerlink" title="4、统计网站日志中PV量"></a>4、统计网站日志中PV量</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">统计Apache/Nginx日志中某一天的PV量 　&lt;统计日志&gt;</span><br><span class="line"><span class="comment"># grep '27/Jul/2017' mysqladmin.cc-access_log |wc -l</span></span><br><span class="line"><span class="number">14519</span></span><br><span class="line"></span><br><span class="line">统计Apache/Nginx日志中某一天不同IP的访问量　&lt;统计日志&gt;</span><br><span class="line"><span class="comment"># grep '27/Jul/2017' mysqladmin.cc-access_log |awk '&#123;ips[$1]++&#125;;END&#123;for(i in ips)&#123;print i,ips[i]&#125; &#125;' |sort -k2 -rn |head</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grep '07/Aug/2017' access.log |awk '&#123;ips[$1]++&#125;;END&#123;for(i in ips)&#123;print i,ips[i]&#125; &#125;' |awk '$2&gt;100' |sort -k2 -rn</span></span><br></pre></td></tr></table></figure>

<p><strong>名词解释：</strong></p>
<p>==网站浏览量（PV）==<br>名词：PV=PageView (网站浏览量)<br>说明：指页面的浏览次数，用以衡量网站用户访问的网页数量。多次打开同一页面则浏览量累计。用户每打开一个页面便记录1次PV。</p>
<p>名词：VV = Visit View（访问次数）<br>说明：从访客来到您网站到最终关闭网站的所有页面离开，计为1次访问。若访客连续30分钟没有新开和刷新页面，或者访客关闭了浏览器，则被计算为本次访问结束。</p>
<p>独立访客（UV）<br>名词：UV= Unique Visitor（独立访客数）<br>说明：1天内相同的访客多次访问您的网站只计算1个UV。</p>
<p>独立IP（IP）<br>名词：IP=独立IP数<br>说明：指1天内使用不同IP地址的用户访问网站的数量。同一IP无论访问了几个页面，独立IP数均为1</p>
<p>#七、课后作业</p>
<p><strong>作业1：</strong><br>1、写一个自动检测磁盘使用率的脚本，当磁盘使用空间达到90%以上时，需要发送邮件给相关人员<br>2、写一个脚本监控系统内存和交换分区使用情况</p>
<p><strong>作业2：</strong><br>输入一个IP地址，使用脚本判断其合法性：<br>必须符合ip地址规范，第1、4位不能以0开头，不能大于255不能小于0</p>
<p>#八、企业实战案例</p>
<h4 id="1-任务-背景"><a href="#1-任务-背景" class="headerlink" title="1. 任务/背景"></a>1. 任务/背景</h4><p>web服务器集群中总共有9台机器，上面部署的是Apache服务。由于业务不断增长，每天每台机器上都会产生大量的访问日志，现需要将每台web服务器上的apache访问日志<strong>保留最近3天</strong>的，3天以前的日志<strong>转储</strong>到一台专门的日志服务器上，已做后续分析。如何实现每台服务器上只保留3天以内的日志？</p>
<h4 id="2-具体要求-2"><a href="#2-具体要求-2" class="headerlink" title="2. 具体要求"></a>2. 具体要求</h4><ol>
<li>每台web服务器的日志对应日志服务器相应的目录里。如：web1——&gt;web1.log（在日志服务器上）</li>
<li>每台web服务器上保留最近3天的访问日志，3天以前的日志每天凌晨5:03分转储到日志服务器</li>
<li>如果脚本转储失败，运维人员需要通过跳板机的菜单选择手动清理日志</li>
</ol>
<h4 id="3-涉及知识点"><a href="#3-涉及知识点" class="headerlink" title="3. 涉及知识点"></a>3. 涉及知识点</h4><ol>
<li>shell的基本语法结构</li>
<li>文件同步rsync</li>
<li>文件查找命令find</li>
<li>计划任务crontab</li>
<li>apache日志切割</li>
<li>其他</li>
</ol>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>Shell脚本实现Centos系统自动安装宝塔</title>
    <url>/2021/01/21/Shell%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0Centos%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%8A%A8%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94/</url>
    <content><![CDATA[<h2 id="具体脚本代码"><a href="#具体脚本代码" class="headerlink" title="具体脚本代码"></a>具体脚本代码</h2><h3 id="复制脚本在服务器执行即可安装：curl-o-installbt-sh-http-103-224-249-63-installbt-sh-amp-amp-sh-installbt-sh"><a href="#复制脚本在服务器执行即可安装：curl-o-installbt-sh-http-103-224-249-63-installbt-sh-amp-amp-sh-installbt-sh" class="headerlink" title="复制脚本在服务器执行即可安装：curl -o installbt.sh http://103.224.249.63/installbt.sh &amp;&amp; sh installbt.sh"></a>复制脚本在服务器执行即可安装：curl -o installbt.sh <a href="http://103.224.249.63/installbt.sh" target="_blank" rel="noopener">http://103.224.249.63/installbt.sh</a> &amp;&amp; sh installbt.sh</h3><a id="more"></a>

<hr>
<h2 id="宝塔面板是市面上大多数人选择的免费较好用的网站管理平台，但是宝塔默认是安装在系统盘-www目录下，如果系统盘损坏，这样不利于数据的安全。目前该脚本只适用于Centos系统执行自动挂载数据盘再按系统版本自动进行安装-其他系统提供官方安装集合包。"><a href="#宝塔面板是市面上大多数人选择的免费较好用的网站管理平台，但是宝塔默认是安装在系统盘-www目录下，如果系统盘损坏，这样不利于数据的安全。目前该脚本只适用于Centos系统执行自动挂载数据盘再按系统版本自动进行安装-其他系统提供官方安装集合包。" class="headerlink" title="宝塔面板是市面上大多数人选择的免费较好用的网站管理平台，但是宝塔默认是安装在系统盘/www目录下，如果系统盘损坏，这样不利于数据的安全。目前该脚本只适用于Centos系统执行自动挂载数据盘再按系统版本自动进行安装,其他系统提供官方安装集合包。"></a>宝塔面板是市面上大多数人选择的免费较好用的网站管理平台，但是宝塔默认是安装在系统盘/www目录下，如果系统盘损坏，这样不利于数据的安全。目前该脚本只适用于Centos系统执行自动挂载数据盘再按系统版本自动进行安装,其他系统提供官方安装集合包。</h2><h2 id="宝塔的安装脚本连接参数已经写在本脚本的开头，如果连接失效，请包宝塔官网www-bt-cn进行更换换。"><a href="#宝塔的安装脚本连接参数已经写在本脚本的开头，如果连接失效，请包宝塔官网www-bt-cn进行更换换。" class="headerlink" title="宝塔的安装脚本连接参数已经写在本脚本的开头，如果连接失效，请包宝塔官网www.bt.cn进行更换换。"></a>宝塔的安装脚本连接参数已经写在本脚本的开头，如果连接失效，请包宝塔官网<a href="http://www.bt.cn进行更换换。" target="_blank" rel="noopener">www.bt.cn进行更换换。</a></h2><h2 id="该脚本实现了yum的检查更换及自动挂载和宝塔更换端口的功能"><a href="#该脚本实现了yum的检查更换及自动挂载和宝塔更换端口的功能" class="headerlink" title="该脚本实现了yum的检查更换及自动挂载和宝塔更换端口的功能"></a>该脚本实现了yum的检查更换及自动挂载和宝塔更换端口的功能</h2><h3 id="宝塔安装器的脚本代码如下所示："><a href="#宝塔安装器的脚本代码如下所示：" class="headerlink" title="宝塔安装器的脚本代码如下所示："></a>宝塔安装器的脚本代码如下所示：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/env bash</span></span><br><span class="line"></span><br><span class="line">yum6=http://103.224.249.63/CentOS6-Base.repo</span><br><span class="line">yum7=https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum8=https://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line">bt7=http://download.bt.cn/install/install_6.0.sh</span><br><span class="line">bt6=http://download.bt.cn/install/install.sh</span><br><span class="line"></span><br><span class="line">system=`cat /etc/redhat-release | cut -d<span class="string">' '</span> -f1`	</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$system</span> == CentOS ];<span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">	release=`cat /etc/redhat-release|tr -d <span class="string">' a-zA-Z()'</span>|cut -d <span class="string">'.'</span> -f1`</span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$release</span> -ge 7 ];<span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"[当前版本为centos7以上的系统，执行安装最新版本宝塔]"</span></span><br><span class="line">			timeout 20 yum install -y wget &amp;&gt;/dev/null</span><br><span class="line">			<span class="keyword">if</span> 	[ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">				<span class="keyword">if</span> [ <span class="variable">$release</span> -eq 8 ];<span class="keyword">then</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"[测试源不可用，更换系统yum源...........]"</span></span><br><span class="line">						cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak &amp;&gt;/dev/null</span><br><span class="line">						curl -o /etc/yum.repos.d/CentOS-Base.repo <span class="variable">$yum8</span> &amp;&gt;/dev/null</span><br><span class="line">						timeout 60 yum makecache &amp;&gt;/dev/null</span><br><span class="line">						<span class="keyword">if</span> [ <span class="string">"$?"</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">							<span class="built_in">echo</span> <span class="string">"[centos8更换源成功，进行下步安装]"</span></span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">							mkdir -p /etc/yum.repos.d/yumbak &amp;&gt;/dev/null</span><br><span class="line">							mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/yumbak &amp;&gt;/dev/null</span><br><span class="line">							curl -o /etc/yum.repos.d/CentOS-Base.repo <span class="variable">$yum8</span> &amp;&gt;/dev/null</span><br><span class="line">							timeout 60 yum makecache &amp;&gt;/dev/null</span><br><span class="line">							<span class="keyword">if</span> [ <span class="string">"$?"</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">								<span class="built_in">echo</span> <span class="string">"[centos8更换源成功，进行下步安装]"</span></span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">								<span class="built_in">echo</span> <span class="string">"[centos8更换yum源失败请自行检查/etc/yum.repos.d/文件的yum配置，及时更换其他有效源]"</span></span><br><span class="line">								<span class="built_in">exit</span></span><br><span class="line">							<span class="keyword">fi</span></span><br><span class="line">						<span class="keyword">fi</span></span><br><span class="line">						</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"[测试源不可用，更换系统yum源...........]"</span></span><br><span class="line">						cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak &amp;&gt;/dev/null</span><br><span class="line">						curl -o /etc/yum.repos.d/CentOS-Base.repo <span class="variable">$yum7</span> &amp;&gt;/dev/null</span><br><span class="line">						timeout 60 yum makecache &amp;&gt;/dev/null</span><br><span class="line">						</span><br><span class="line">						<span class="keyword">if</span> [ <span class="string">"$?"</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">							<span class="built_in">echo</span> <span class="string">"[centos7更换源成功，进行下步安装]"</span></span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">							mkdir -p /etc/yum.repos.d/yumbak &amp;&gt;/dev/null</span><br><span class="line">							mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/yumbak &amp;&gt;/dev/null</span><br><span class="line">							curl -o /etc/yum.repos.d/CentOS-Base.repo <span class="variable">$yum7</span> &amp;&gt;/dev/null</span><br><span class="line">							timeout 60 yum makecache &amp;&gt;/dev/null</span><br><span class="line">							<span class="keyword">if</span> [ <span class="string">"$?"</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">								<span class="built_in">echo</span> <span class="string">"[centos7更换源成功，进行下步安装]"</span></span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">								<span class="built_in">echo</span> <span class="string">"[centos7更换yum源失败请自行检查/etc/yum.repos.d/文件的yum配置yum配置，及时更换其他有效源]"</span></span><br><span class="line">								<span class="built_in">exit</span></span><br><span class="line">							<span class="keyword">fi</span></span><br><span class="line">						<span class="keyword">fi</span></span><br><span class="line">						</span><br><span class="line">				<span class="keyword">fi</span></span><br><span class="line">			<span class="keyword">fi</span>	</span><br><span class="line">		db=`fdisk -l|grep sectors|grep ^D|tr -d <span class="string">'1-9 ,.'</span>|tr <span class="string">':'</span> <span class="string">'/'</span>|cut -d <span class="string">'/'</span> -f3|grep db`</span><br><span class="line">		db2=`fdisk /dev/<span class="variable">$db</span> -l|grep ^/dev|tr <span class="string">' '</span> <span class="string">'/'</span>|cut -d <span class="string">'/'</span> -f3|wc -l`</span><br><span class="line">			<span class="keyword">if</span> [ <span class="variable">$db2</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">				fdisk /dev/<span class="variable">$db</span> &lt;&lt;-EOF &amp;&gt;/dev/null</span><br><span class="line">				n</span><br><span class="line">				p</span><br><span class="line">				1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">				wq</span><br><span class="line">				EOF</span><br><span class="line">				db1=`fdisk /dev/<span class="variable">$db</span> -l|grep ^/dev|tr <span class="string">' '</span> <span class="string">'/'</span>|cut -d <span class="string">'/'</span> -f3|grep 1`</span><br><span class="line">					<span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">						mkfs.ext4 /dev/<span class="variable">$db1</span> &amp;&gt;/dev/null</span><br><span class="line">						mkdir /www</span><br><span class="line">						<span class="built_in">echo</span> <span class="string">'/dev/'</span><span class="variable">$db1</span><span class="string">' /www ext4    defaults    0  0'</span> &gt;&gt; /etc/fstab</span><br><span class="line">						mount -a</span><br><span class="line">						df -h	</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"[ <span class="variable">$db1</span>数据盘不存在或分区未成功,请检查。]"</span></span><br><span class="line">						<span class="keyword">while</span> [ <span class="string">"<span class="variable">$go</span>"</span> != <span class="string">'y'</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$go</span>"</span> != <span class="string">'n'</span> ]</span><br><span class="line">                                		<span class="keyword">do</span></span><br><span class="line">                                        		<span class="built_in">read</span> -p <span class="string">"请问是否继续安装宝塔到默认系统盘?(y/n) "</span> go;</span><br><span class="line">                                		<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">                                		<span class="keyword">if</span> [ <span class="string">"<span class="variable">$go</span>"</span> == <span class="string">'n'</span> ];<span class="keyword">then</span></span><br><span class="line">                                        		yes|rm ./installbt.sh &amp;&gt;/dev/null</span><br><span class="line">                                        		<span class="built_in">echo</span> <span class="string">"退出安装！"</span></span><br><span class="line">                                        		<span class="built_in">exit</span></span><br><span class="line">                                		<span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">					<span class="keyword">fi</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">				<span class="built_in">echo</span> <span class="string">"[ 第二块磁盘数据盘已经在使用,请检查下，不要覆盖数据盘的数据。]"</span></span><br><span class="line">				<span class="keyword">while</span> [ <span class="string">"<span class="variable">$go</span>"</span> != <span class="string">'y'</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$go</span>"</span> != <span class="string">'n'</span> ]</span><br><span class="line">				<span class="keyword">do</span></span><br><span class="line">					<span class="built_in">read</span> -p <span class="string">"请问是否继续格式化<span class="variable">$db1</span>数据盘安装宝塔?(y/n) "</span> go;</span><br><span class="line">				<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> [ <span class="string">"<span class="variable">$go</span>"</span> == <span class="string">'n'</span> ];<span class="keyword">then</span></span><br><span class="line">					yes|rm ./installbt.sh &amp;&gt;/dev/null</span><br><span class="line">					<span class="built_in">echo</span> <span class="string">"退出安装！"</span></span><br><span class="line">					<span class="built_in">exit</span></span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					dbname=`df -h | grep <span class="variable">$&#123;db&#125;</span>1|tr -d <span class="string">'  '</span>|cut -d <span class="string">'/'</span> -f4`</span><br><span class="line">					id=`cat -n /etc/fstab|grep <span class="variable">$dbname</span>|tr -d <span class="string">'[:blank:]'</span>|cut -d <span class="string">'/'</span> -f1`</span><br><span class="line">					idwc=`cat -n /etc/fstab|grep <span class="variable">$dbname</span>|tr -d <span class="string">'[:blank:]'</span>|cut -d <span class="string">'/'</span> -f1|wc -l`</span><br><span class="line">					<span class="keyword">if</span> [ <span class="variable">$idwc</span> -eq 1 ];<span class="keyword">then</span></span><br><span class="line">						umount /<span class="variable">$dbname</span> &amp;&gt;/dev/null</span><br><span class="line">						<span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">							<span class="built_in">echo</span> <span class="string">"格式化相应目录挂载，继续安装"</span></span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">							yum install -y psmisc &amp;&gt;/dev/null</span><br><span class="line">							sed -i <span class="variable">$&#123;id&#125;</span>d /etc/fstab</span><br><span class="line">							fuser -m -k /<span class="variable">$dbname</span></span><br><span class="line">							umount /<span class="variable">$dbname</span></span><br><span class="line">						<span class="keyword">fi</span></span><br><span class="line">							sed -i <span class="variable">$&#123;id&#125;</span>d /etc/fstab</span><br><span class="line">							mkfs -t ext4 /dev/<span class="variable">$&#123;db&#125;</span>1 &amp;&gt;/dev/null</span><br><span class="line">							mkdir /www &amp;&gt;/dev/null</span><br><span class="line">							<span class="built_in">echo</span> /dev/<span class="variable">$&#123;db&#125;</span>1 /www ext4    defaults    0  0 &gt;&gt; /etc/fstab</span><br><span class="line">							mount -a</span><br><span class="line">							df -h</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"[fstab文件配置错误或没有相关<span class="variable">$&#123;db&#125;</span>1磁盘的挂载，请检查<span class="variable">$&#123;db&#125;</span>1分区是否还有数据，挂载备份后，重新执行脚本]"</span></span><br><span class="line">						yes|rm ./installbt.sh &amp;&gt;/dev/null</span><br><span class="line">						<span class="built_in">exit</span></span><br><span class="line">					<span class="keyword">fi</span></span><br><span class="line">				<span class="keyword">fi</span></span><br><span class="line">				</span><br><span class="line">			<span class="keyword">fi</span></span><br><span class="line">					</span><br><span class="line">					</span><br><span class="line">						yes|yum install -y wget &amp;&gt;/dev/null</span><br><span class="line">						wget <span class="variable">$bt7</span> &amp;&gt;/dev/null</span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"[正在安装中,安装过程在10分钟左右，请勿退出!如需中断安装，可以按Ctrl+z进行中断]"</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"yuming- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "</span></span><br><span class="line">						yes|sh install_6.0.sh &amp;&gt; /dev/null</span><br><span class="line">						[ <span class="string">"$?"</span> -eq 0 ]&amp;&amp;<span class="built_in">echo</span> <span class="string">"[最新版宝塔安装完成]"</span>||<span class="built_in">exit</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"[官方安装默认是8888端口，为了防止被爆破扫描，现在更换端口]"</span></span><br><span class="line">						A1=$[<span class="variable">$RANDOM</span>%10]</span><br><span class="line">						A2=$[<span class="variable">$RANDOM</span>%10]</span><br><span class="line">						A3=$[<span class="variable">$RANDOM</span>%10]</span><br><span class="line">						numb=8<span class="variable">$A1</span><span class="variable">$A2</span><span class="variable">$A3</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="variable">$numb</span> &gt; /www/server/panel/data/port.pl</span><br><span class="line">						/etc/init.d/bt restart &amp;&gt;/dev/null</span><br><span class="line">						firewall-cmd --permanent --zone=public --add-port=<span class="variable">$numb</span>/tcp &amp;&gt;/dev/null</span><br><span class="line">						firewall-cmd --reload &amp;&gt;/dev/null</span><br><span class="line">						yes|rm ./install.sh &amp;&gt;/dev/null</span><br><span class="line">						yes|rm ./install_6.0.sh &amp;&gt;/dev/null</span><br><span class="line">						yes|rm ./installbt.sh &amp;&gt;/dev/null</span><br><span class="line">						bt default</span><br><span class="line">						<span class="built_in">exit</span></span><br><span class="line">												</span><br><span class="line">	<span class="keyword">else</span>                </span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"[当前版本为centos7以下的系统，执行安装旧版本宝塔]"</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="string">" - - - - - - - - - - - - - - - - - - - - - - - - "</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"[CentOS6已经进入EOL寿命终了阶段，yum源将失效,进行更换其他有效源]"</span></span><br><span class="line">						curl -o /etc/yum.repos.d/CentOS-Base.repo <span class="variable">$yum6</span> &amp;&gt; /dev/null</span><br><span class="line">						yum makecache &amp;&gt; /dev/null</span><br><span class="line">						<span class="keyword">if</span> [ <span class="string">"$?"</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">							<span class="built_in">echo</span> <span class="string">"[更换源成功，进行下步安装]"</span></span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">							mkdir -p /etc/yum.repos.d/yumbak &amp;&gt;/dev/null</span><br><span class="line">							mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/yumbak &amp;&gt;/dev/null</span><br><span class="line">							curl -o /etc/yum.repos.d/CentOS-Base.repo <span class="variable">$yum6</span> &amp;&gt;/dev/null</span><br><span class="line">							timeout 60 yum makecache &amp;&gt;/dev/null</span><br><span class="line">							 <span class="keyword">if</span> [ <span class="string">"$?"</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">                                                                <span class="built_in">echo</span> <span class="string">"[centos6更换源成功，进行下步安装]"</span></span><br><span class="line">                                                        <span class="keyword">else</span></span><br><span class="line">                                                                <span class="built_in">echo</span> <span class="string">"[centos6更换yum源失败请自行检查/etc/yum.repos.d/文件的yum配置yum配置,及时更换其他有效源]"</span></span><br><span class="line">                                                                <span class="built_in">exit</span></span><br><span class="line">                                                        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">						<span class="keyword">fi</span></span><br><span class="line">						db=`fdisk -l|grep Disk|grep bytes|tr -d <span class="string">' 1-9,:'</span>|tr <span class="string">'.'</span> <span class="string">'/'</span>|cut -d <span class="string">'/'</span> -f3|grep db`</span><br><span class="line">						db2=`fdisk /dev/<span class="variable">$db</span> -l|grep ^/dev|tr <span class="string">' '</span> <span class="string">'/'</span>|cut -d <span class="string">'/'</span> -f3|wc -l`</span><br><span class="line">			<span class="keyword">if</span> [ <span class="variable">$db2</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line"> 				fdisk /dev/<span class="variable">$db</span> &lt;&lt;-EOF &amp;&gt;/dev/null</span><br><span class="line">				n</span><br><span class="line">				p</span><br><span class="line">				1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">				wq</span><br><span class="line">				EOF</span><br><span class="line">						db1=`fdisk /dev/<span class="variable">$db</span> -l|grep ^/dev|tr <span class="string">' '</span> <span class="string">'/'</span>|cut -d <span class="string">'/'</span> -f3|grep 1`</span><br><span class="line">				<span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">                        		mkfs.ext4 /dev/<span class="variable">$db1</span> &amp;&gt;/dev/null</span><br><span class="line">					mkdir /www</span><br><span class="line">                        		<span class="built_in">echo</span> <span class="string">'/dev/'</span><span class="variable">$db1</span><span class="string">' /www ext4    defaults    0  0'</span> &gt;&gt; /etc/fstab</span><br><span class="line">                       			mount -a</span><br><span class="line">                        		df -h</span><br><span class="line"></span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">							<span class="built_in">echo</span> <span class="string">"[ <span class="variable">$&#123;db&#125;</span>1数据盘不存在或分区未成功,请检查。]"</span></span><br><span class="line">							<span class="keyword">while</span> [ <span class="string">"<span class="variable">$go</span>"</span> != <span class="string">'y'</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$go</span>"</span> != <span class="string">'n'</span> ]</span><br><span class="line">							<span class="keyword">do</span></span><br><span class="line">								<span class="built_in">read</span> -p <span class="string">"请问是否继续安装宝塔到默认系统盘?(y/n) "</span> go;</span><br><span class="line">							<span class="keyword">done</span></span><br><span class="line">							<span class="keyword">if</span> [ <span class="string">"<span class="variable">$go</span>"</span> == <span class="string">'n'</span> ];<span class="keyword">then</span></span><br><span class="line">								yes|rm ./installbt.sh &amp;&gt;/dev/null</span><br><span class="line">								<span class="built_in">echo</span> <span class="string">"退出安装！"</span> </span><br><span class="line">								<span class="built_in">exit</span></span><br><span class="line">							<span class="keyword">fi</span></span><br><span class="line">					</span><br><span class="line">				<span class="keyword">fi</span></span><br><span class="line">			</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">								<span class="built_in">echo</span> <span class="string">"[ 第二块磁盘数据盘已经在使用,请检查下，不要覆盖数据盘的数据。]"</span></span><br><span class="line">                                <span class="keyword">while</span> [ <span class="string">"<span class="variable">$go</span>"</span> != <span class="string">'y'</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$go</span>"</span> != <span class="string">'n'</span> ]</span><br><span class="line">                                <span class="keyword">do</span></span><br><span class="line">                                        <span class="built_in">read</span> -p <span class="string">"请问是否继续格式化<span class="variable">$db1</span>数据盘安装宝塔?(y/n) "</span> go;</span><br><span class="line">                                <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> [ <span class="string">"<span class="variable">$go</span>"</span> == <span class="string">'n'</span> ];<span class="keyword">then</span></span><br><span class="line">                                        yes|rm ./installbt.sh &amp;&gt;/dev/null</span><br><span class="line">                                        <span class="built_in">echo</span> <span class="string">"退出安装！"</span></span><br><span class="line">                                        <span class="built_in">exit</span></span><br><span class="line">				<span class="keyword">fi</span></span><br><span class="line">					dbname=`df -h | grep <span class="variable">$&#123;db&#125;</span>1|tr -d <span class="string">'  '</span>|cut -d <span class="string">'/'</span> -f4`</span><br><span class="line">					id=`cat -n /etc/fstab|grep <span class="variable">$dbname</span>|tr -d <span class="string">'[:blank:]'</span>|cut -d <span class="string">'/'</span> -f1`</span><br><span class="line">					idwc=`cat -n /etc/fstab|grep <span class="variable">$dbname</span>|tr -d <span class="string">'[:blank:]'</span>|cut -d <span class="string">'/'</span> -f1|wc -l`</span><br><span class="line">						<span class="keyword">if</span> [ <span class="variable">$idwc</span> -eq 1 ];<span class="keyword">then</span></span><br><span class="line">							umount /<span class="variable">$dbname</span> &amp;&gt;/dev/null</span><br><span class="line">							<span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">								<span class="built_in">echo</span> <span class="string">"格式化相应目录挂载，继续安装"</span></span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">								yum install -y psmisc &amp;&gt;/dev/null</span><br><span class="line">								sed -i <span class="variable">$&#123;id&#125;</span>d /etc/fstab</span><br><span class="line">								fuser -m -k /<span class="variable">$dbname</span></span><br><span class="line">								umount /<span class="variable">$dbname</span></span><br><span class="line">							<span class="keyword">fi</span></span><br><span class="line">								sed -i <span class="variable">$&#123;id&#125;</span>d /etc/fstab</span><br><span class="line">								mkfs -t ext4 /dev/<span class="variable">$&#123;db&#125;</span>1 &amp;&gt;/dev/null</span><br><span class="line">								mkdir /www &amp;&gt;/dev/null</span><br><span class="line">								<span class="built_in">echo</span> /dev/<span class="variable">$&#123;db&#125;</span>1 /www ext4    defaults    0  0 &gt;&gt; /etc/fstab</span><br><span class="line">								mount -a</span><br><span class="line">								df -h</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">							<span class="built_in">echo</span> <span class="string">"[fstab文件配置错误或没有相关<span class="variable">$&#123;db&#125;</span>1磁盘的挂载，请检查<span class="variable">$&#123;db&#125;</span>1分区是否还有数据，挂载备份后，重新执行脚本]"</span></span><br><span class="line">							yes|rm ./installbt.sh &amp;&gt;/dev/null</span><br><span class="line">							<span class="built_in">exit</span></span><br><span class="line">						<span class="keyword">fi</span></span><br><span class="line">												</span><br><span class="line">                         	</span><br><span class="line">                                </span><br><span class="line">			<span class="keyword">fi</span></span><br><span class="line">						</span><br><span class="line">						yes|yum install -y wget &amp;&gt;/dev/null</span><br><span class="line">						wget <span class="variable">$bt6</span> &amp;&gt;/dev/null</span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"[正在安装中,安装过程在10分钟左右，请勿退出!如需中断安装，可以按Ctrl+z进行中断]"</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"yuming- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"</span></span><br><span class="line">						yes|sh install.sh &amp;&gt;/dev/null</span><br><span class="line">						[ <span class="string">"$?"</span> -eq 0 ]&amp;&amp;<span class="built_in">echo</span> <span class="string">"[宝塔5.9安装完成]"</span>||<span class="built_in">exit</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="string">"[官方安装默认是8888端口，为了防止被爆破扫描，现在更换端口]"</span></span><br><span class="line">						B1=$[<span class="variable">$RANDOM</span>%10]</span><br><span class="line">						B2=$[<span class="variable">$RANDOM</span>%10]</span><br><span class="line">						B3=$[<span class="variable">$RANDOM</span>%10]</span><br><span class="line">						numb2=8<span class="variable">$B1</span><span class="variable">$B2</span><span class="variable">$B3</span></span><br><span class="line">						<span class="built_in">echo</span> <span class="variable">$numb2</span> &gt; /www/server/panel/data/port.pl</span><br><span class="line">						/etc/init.d/bt restart &amp;&gt;/dev/null</span><br><span class="line">						iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport <span class="variable">$numb2</span> -j ACCEPT &amp;&gt;/dev/null</span><br><span class="line">						service iptables save &amp;&gt;/dev/null</span><br><span class="line">						yes|rm ./install.sh &amp;&gt;/dev/null</span><br><span class="line">						yes|rm ./installbt.sh &amp;&gt;/dev/null</span><br><span class="line">						bt default</span><br><span class="line">						<span class="built_in">exit</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"该系统不是centos系统，将帮您安装宝塔官方提供的三系统集合安装包：Centos/Ubuntu/Debian安装命令 独立运行环境（py3.7）"</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"目前默认是安装在系统盘，没有优化检查源和挂载，如需要安装在其他盘，可以取消安装，自行到宝塔官网https://www.bt.cn/bbs/thread-19376-1-1.html执行脚本安装。"</span></span><br><span class="line">		curl -sSO http://download.bt.cn/install/install_panel.sh &amp;&amp; bash install_panel.sh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>系统运维常用操作</title>
    <url>/2020/12/11/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="CentOS6已经进入EOL寿命终了阶段，yum源将失效，可从centos-vault源继续安装软件，下面是已经修改的源，直接下载替换"><a href="#CentOS6已经进入EOL寿命终了阶段，yum源将失效，可从centos-vault源继续安装软件，下面是已经修改的源，直接下载替换" class="headerlink" title="CentOS6已经进入EOL寿命终了阶段，yum源将失效，可从centos-vault源继续安装软件，下面是已经修改的源，直接下载替换"></a>CentOS6已经进入EOL寿命终了阶段，yum源将失效，可从centos-vault源继续安装软件，下面是已经修改的源，直接下载替换</h3><p><a href="http://103.224.249.63/CentOS6-Base.repo" target="_blank" rel="noopener">http://103.224.249.63/CentOS6-Base.repo</a></p>
<h2 id="系统运维常用操作"><a href="#系统运维常用操作" class="headerlink" title="系统运维常用操作"></a>系统运维常用操作</h2><a id="more"></a>

<hr>
<h3 id="宝塔的管理"><a href="#宝塔的管理" class="headerlink" title="宝塔的管理"></a>宝塔的管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/xvdb &lt;&lt; EOF</span><br><span class="line">n</span><br><span class="line">p</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wq</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkfs.ext4 /dev/xvdb1</span><br><span class="line">mkdir /www</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/dev/xvdb1 /www ext4    defaults    0  0'</span> &gt;&gt; /etc/fstab</span><br><span class="line">mount -a</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>

<p>一键脚本分盘安装宝塔 wget -O install.sh <a href="http://103.224.249.63/mountbt.sh" target="_blank" rel="noopener">http://103.224.249.63/mountbt.sh</a> &amp;&amp; sh install.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">centos6 yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh 宝塔5.9</span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://125.88.182.172:5880/install/install.sh &amp;&amp; sh install.sh</span><br><span class="line"></span><br><span class="line">centos7 yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>
<p>香港备用节点：yum install -y wget &amp;&amp; wget -O install.sh <a href="http://103.224.251.67:5880/install/install_6.0.sh" target="_blank" rel="noopener">http://103.224.251.67:5880/install/install_6.0.sh</a> &amp;&amp; sh install.sh<br>yum install -y wget &amp;&amp; wget -O install.sh <a href="http://123.129.198.197/install/install_6.0.sh" target="_blank" rel="noopener">http://123.129.198.197/install/install_6.0.sh</a> &amp;&amp; sh install.sh</p>
<p>宝塔卸载liunx <a href="https://www.22vd.com/45898.html" target="_blank" rel="noopener">https://www.22vd.com/45898.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.bt.cn/install/bt-uninstall.sh</span><br><span class="line">sh bt-uninstall.sh</span><br></pre></td></tr></table></figure>
<p>转移系统盘的宝塔到指定磁盘<br>先挂载指定磁盘到/data，再转移</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /data</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/dev/xvdb1  /data ext4   defaults    0  0'</span> &gt;&gt; /etc/fstab</span><br><span class="line">mount -a</span><br><span class="line">df -h</span><br><span class="line">service bt stop</span><br><span class="line">mv /www/* /data</span><br><span class="line">umount /data</span><br><span class="line">sed -i <span class="string">'$s/data/www/g'</span> /etc/fstab</span><br><span class="line">mount -a</span><br><span class="line">service bt start</span><br></pre></td></tr></table></figure>
<p>如果宝塔的PHP无法安装，可以尝试使用以下方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">把public.sh和php.sh删除，在执行这个下面命令后，重新安装一下PHP看看</span><br><span class="line">wget http://download.bt.cn/install/public.sh</span><br><span class="line">路径/www/server/panel/install</span><br></pre></td></tr></table></figure>
<h2 id="centos系统防火墙配置"><a href="#centos系统防火墙配置" class="headerlink" title="centos系统防火墙配置"></a>centos系统防火墙配置</h2><p>centos8 目前只支持ext2格式化    网易源 <a href="http://mirrors.163.com/centos/8/BaseOS/x86_64/os/" target="_blank" rel="noopener">http://mirrors.163.com/centos/8/BaseOS/x86_64/os/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">centos7.x防火墙：查看所有打开的端口： firewall-cmd --zone=public --list-ports   </span><br><span class="line">yum -y install firewall</span><br><span class="line">sudo systemctl start firewalld</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> firewalld</span><br><span class="line"> firewall-cmd --state（状态）  </span><br><span class="line"> firewall-cmd --reload （重启）  </span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line">查看开放的端口和服务以及屏蔽的IP</span><br><span class="line">firewall-cmd --zone=public --list-all</span><br><span class="line"></span><br><span class="line">查看系统中查看系统中可用的服务</span><br><span class="line">firewall-cmd --get-services</span><br><span class="line">添加端口</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">添加端口段</span><br><span class="line">firewall-cmd --zone=public --add-port=5060-5061/udp --permanent</span><br><span class="line"></span><br><span class="line">删除端口</span><br><span class="line">firewall-cmd --permanent --zone=public --remove-port=8080/tcp</span><br><span class="line">热加载才能生效</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">屏蔽IP</span><br><span class="line">firewall-cmd --permanent --add-rich-rule=<span class="string">"rule family=ipv4 source address=43.229.53.61 reject"</span></span><br><span class="line">取消屏蔽IP</span><br><span class="line">firewall-cmd --permanent --remove-rich-rule=<span class="string">"rule family=ipv4 source address=43.229.53.61 reject"</span></span><br><span class="line"></span><br><span class="line">查看屏蔽结果</span><br><span class="line">firewall-cmd --list-rich-rules</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">centos6.x: </span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT(执行命令放行指定端口)</span><br><span class="line">/etc/rc.d/init.d/iptables save(保存端口配置)</span><br><span class="line">/etc/rc.d/init.d/iptables restart(重启防火墙)</span><br><span class="line">/etc/init.d/iptables status(查看端口是否开放)</span><br><span class="line"></span><br><span class="line">开机自启</span><br><span class="line">开启： chkconfig iptables on</span><br><span class="line">关闭： chkconfig iptables off</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/iptables</span><br><span class="line">-A INPUT -m state –state NEW -m tcp -p tcp –dport 端口 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="win系统配置多人远程"><a href="#win系统配置多人远程" class="headerlink" title="win系统配置多人远程"></a>win系统配置多人远程</h3><p>默认远程数为2个，如需添加需要配置</p>
<h3 id="注意：需要先安装远程管理服务-选择远程桌面会话主机"><a href="#注意：需要先安装远程管理服务-选择远程桌面会话主机" class="headerlink" title="注意：需要先安装远程管理服务  选择远程桌面会话主机"></a>注意：需要先安装远程管理服务  选择远程桌面会话主机</h3><p>打开cmd，输入gpedit.msc 组策略，找到【计算机设置】–【管理模板】–【windows组件】–【远程桌面服务】–【远程桌面会话主机】–【连接】<br>1、拒绝将已经登录到控制台会话的管理员注销—选择启用 ? ? —— 防止恶搞T管理员<br>2、限制连接的数量—选择启用，配置‘允许的RD最大连接数’为10个<br>3、将远程桌面服务用户限制到单独的远程桌面服务会话—选择禁用<br>最后复制 gpupdate/force 命令到管理员命令提示符窗口中, 回车,显示: 正在更新策略… 计算机策略更新成功完成。</p>
<h3 id="liunx服务器异常重启日志查看"><a href="#liunx服务器异常重启日志查看" class="headerlink" title="liunx服务器异常重启日志查看"></a>liunx服务器异常重启日志查看</h3><p>执行命令”cd /var/log“进入系统所在日志目录<br>执行命令”last | grep reboot“ 查看过去重启的日志；<br>执行命令”last reboot | head -1“ 查看最近的一条重启记录；<br>为了排查问题，也可以执行命令”last -x|grep shutdown | head -1“查看上次关机的日期和时间：<br>执行命令”history“ 查看最近系统执行了哪些操作<br>执行命令”cat /var/log/messages|grep WARNING 查看整个系统日志的报错信息；</p>
<h3 id="系统激活软件"><a href="#系统激活软件" class="headerlink" title="系统激活软件"></a>系统激活软件</h3><p>优先使用手动进行激活 <a href="http://0x3ev0.coding-pages.com/2020/09/24/手动KVM微软系统激活/" target="_blank" rel="noopener">http://0x3ev0.coding-pages.com/2020/09/24/手动KVM微软系统激活/</a><br>激活工具   <a href="https://www.lanzoux.com/imsIDgjjvvg" target="_blank" rel="noopener">https://www.lanzoux.com/imsIDgjjvvg</a><br><a href="https://cangshui.net/-down/-mysh/kms/KMS-Cangshui.net.bat" target="_blank" rel="noopener">https://cangshui.net/-down/-mysh/kms/KMS-Cangshui.net.bat</a></p>
<h3 id="同步时间命令"><a href="#同步时间命令" class="headerlink" title="同步时间命令"></a>同步时间命令</h3><p>yum -y install ntp<br>hwclock - -show  查看硬件时间<br>ntpdate  ntp.api.bz  同步系统时间<br>hwclock - -hctosys  设置系统时间和硬件时间同步<br>hwclock  -w  保存时钟</p>
<p>或者<br>ntpdate  ntp.api.bz  同步系统时间<br>直接执行 hwclock - -systohc  写入硬件时间</p>
<h3 id="xen转移机器"><a href="#xen转移机器" class="headerlink" title="xen转移机器"></a>xen转移机器</h3><p>模板导出; xe vm-export uuid=3fb1a8cc-2eac-24c4-f556-bc33320a98c6 filename=xvm编号<br>模板导入: xe vm-import -h 节点内网ip -u root -pw 节点密码 filename=./xvm编号<br>service iptables start<br>service iptables stop</p>
<p>iptables -I INPUT -s 需要放行的ip -p tcp –dport 443 -j ACCEPT<br>iptables -D INPUT -s 需要屏蔽的ip -p tcp –dport 443 -j ACCEPT<br>iptables -I INPUT -s 全部放行的ip -j ACCEPT</p>
<h3 id="mysql日志分析"><a href="#mysql日志分析" class="headerlink" title="mysql日志分析"></a>mysql日志分析</h3><p>mysql日志分析：<a href="https://www.cnblogs.com/f-ck-need-u/p/9001061.html" target="_blank" rel="noopener">https://www.cnblogs.com/f-ck-need-u/p/9001061.html</a></p>
<p>查看数据库的最大连接数<br>mysql&gt;  show variables like ‘%max_connections%’;</p>
<p>查看数据库当前连接数，并发数。<br>mysql&gt; show status like ‘Threads%’;</p>
<p>Threads_cached : 代表当前此时此刻线程缓存中有多少空闲线程。<br>Threads_connected :代表当前已建立连接的数量，因为一个连接就需要一个线程，所以也可以看成当前被使用的线程数。<br>Threads_created :代表从最近一次服务启动，已创建线程的数量。<br>Threads_running :代表当前激活的（非睡眠状态）线程数。并不是代表正在使用的线程数，有时候连接已建立，但是连接处于sleep状态，这里相对应的线程也是sleep状态。</p>
<p>查看数据库编码<br>mysql&gt; show variables like ‘character%’;</p>
<p>character_set_client      为客户端编码方式；<br>character_set_connection  为建立连接使用的编码；<br>character_set_database    为数据库的编码；<br>character_set_results     为结果集的编码；<br>character_set_server      为数据库服务器的编码；<br>只要保证以上采用的编码方式一样，就不会出现乱码问题。</p>
<p>查看日志分析<br>mysql&gt; show global variables like ‘%log%’;</p>
<p>查看慢日志超时时间<br>mysql&gt; show global variables like ‘long%’;</p>
<p>其中这个慢查询时间并不是只表示语句自身执行超过的时间(秒)还包含由于其他资源被征用造成阻塞的查询执行时间或其他原因等都被记录到慢查询中。<br>所以这个慢查的时长表示从查询开始到查询结束中间包含可能的任何原因所经历的所有时间。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>查看当前目录文件大小前十的文件du -a -h | sort -n -r | head -n 10<br>修复数据表check table 表名     repair table 表名</p>
<p>[root@jyrac2 /]# mkfs.ext3 /dev/sda3<br>mke2fs 1.39 (29-May-2006)<br>Could not stat /dev/sda3 — No such file or directory</p>
<p>The device apparently does not exist; did you specify it correctly?</p>
<p>解决这个问题可以使用partprobe 命令,partprobe包含在parted的rpm软件包中。partprobe可以修改kernel中分区表，使kernel重新读取分区表。 因此，使用该命令就可以创建分区并且在不重新启动机器的情况下系统能够识别这些分区。<br>检查是否安装了partprobe软件包<br>[root@jyrac2 /]# rpm -q parted<br>parted-1.8.1-23.el5</p>
<p>[root@jyrac2 /]# partprobe<br>[root@jyrac2 /]# mkfs -t ext4 /dev/sda3</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>手动KVM微软系统激活</title>
    <url>/2020/09/24/%E6%89%8B%E5%8A%A8KVM%E5%BE%AE%E8%BD%AF%E7%B3%BB%E7%BB%9F%E6%BF%80%E6%B4%BB/</url>
    <content><![CDATA[<h2 id="手动KVM激活"><a href="#手动KVM激活" class="headerlink" title="手动KVM激活"></a>手动KVM激活</h2><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slmgr.vbs -upk</span><br><span class="line">slmgr.vbs -ipk W269N-WFGWX-YVC9B-4J6C9-T83GX      <span class="comment">#不同系统版本这里的激活码不一样，请往下翻寻找表格！</span></span><br><span class="line">slmgr.vbs -skms kms.cangshui.net                  <span class="comment">#KMS服务器</span></span><br><span class="line">slmgr.vbs -ato</span><br><span class="line">slmgr.vbs -dlv</span><br></pre></td></tr></table></figure>
<p>微软官方文档<br>KMS 客户端安装密钥 <a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys</a><br>原文：<a href="https://kms.cangshui.net/#cta" target="_blank" rel="noopener">https://kms.cangshui.net/#cta</a></p>
<p>Windows Server 半年频道版本<br>Windows Server 版本 1909、版本1903 和版本 1809<br>WINDOWS SERVER 版本 1909、版本1903 和版本 1809<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows Server Datacenter    6NMRW-2C8FM-D24W7-TQWMY-CWH2D<br>Windows Server Standard    N2KJX-J94YW-TQVFB-DG9YT-724CC<br>Windows Server LTSC/LTSB 版本<br>Windows Server 2019<br>WINDOWS SERVER 2019<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows Server 2019 Datacenter    WMDGN-G9PQG-XVVXX-R3X43-63DFG<br>Windows Server 2019 Standard    N69G4-B89J2-4G8F4-WWYCC-J464C<br>Windows Server 2019 Essentials    WVDHN-86M7X-466P6-VHXV7-YY726<br>Windows Server 2016<br>WINDOWS SERVER 2016<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows Server 2016 Datacenter    CB7KF-BWN84-R7R2Y-793K2-8XDDG<br>Windows Server 2016 Standard    WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY<br>Windows Server 2016 Essentials    JCKRF-N37P4-C2D82-9YXRT-4M63B<br>Windows 10，所有支持的半年频道版本<br>有关受支持的版本和服务终止日期的信息，请参阅 Windows 生命周期情况说明书。<br>WINDOWS 10，所有支持的半年频道版本<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows 10 专业版    W269N-WFGWX-YVC9B-4J6C9-T83GX<br>Windows 10 专业版 N    MH37W-N47XK-V7XM9-C7227-GCQG9<br>Windows 10 专业工作站版    NRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J<br>Windows 10 专业工作站版 N    9FNHH-K3HBT-3W4TD-6383H-6XYWF<br>Windows 10 专业教育版    6TP4R-GNPTD-KYYHQ-7B7DP-J447Y<br>Windows 10 专业教育版 N    YVWGF-BXNMC-HTQYQ-CPQ99-66QFC<br>Windows 10 教育版    NW6C2-QMPVW-D7KKK-3GKT6-VCFB2<br>Windows 10 教育版 N    2WH4N-8QGBV-H22JP-CT43Q-MDWWJ<br>Windows 10 企业版    NPPR9-FWDCX-D2C8J-H872K-2YT43<br>Windows 10 企业版 N    DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4<br>Windows 10 企业版 G    YYVX9-NTFWV-6MDM3-9PT4T-4M68B<br>Windows 10 企业版 G N    44RPN-FTY23-9VTTB-MP9BX-T84FV<br>Windows 10 LTSC/LTSB 版本<br>Windows 10 LTSC 2019<br>WINDOWS 10 LTSC 2019<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows 10 企业版 LTSC 2019    M7XTQ-FN8P6-TTKYV-9D4CC-J462D<br>Windows 10 企业版 N LTSC 2019    92NFX-8DJQP-P6BBQ-THF9C-7CG2H<br>Windows 10 LTSB 2016<br>WINDOWS 10 LTSB 2016<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows 10 企业版 LTSB 2016    DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ<br>Windows 10 企业版 N LTSB 2016    QFFDN-GRT3P-VKWWX-X7T3R-8B639<br>Windows 10 LTSB 2015<br>WINDOWS 10 LTSB 2015<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows 10 企业版 2015 LTSB    WNMTR-4C88C-JK8YV-HQ7T2-76DF9<br>Windows 10 企业版 2015 LTSB N    2F77B-TNFGY-69QQF-B8YKP-D69TJ<br>早期版本的 Windows Server<br>Windows Server 版本 1803<br>WINDOWS SERVER 版本 1803<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows Server Datacenter    2HXDN-KRXHB-GPYC7-YCKFJ-7FVDG<br>Windows Server Standard    PTXN8-JFHJM-4WC78-MPCBR-9W4KR<br>Windows Server 版本 1709<br>WINDOWS SERVER 版本 1709<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows Server Datacenter    6Y6KB-N82V8-D8CQV-23MJW-BWTG6<br>Windows Server Standard    DPCNP-XQFKJ-BJF7R-FRC8D-GF6G4<br>Windows Server 2012 R2<br>WINDOWS SERVER 2012 R2<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows Server 2012 R2 Server Standard    D2N9P-3P6X9-2R39C-7RTCD-MDVJX<br>Windows Server 2012 R2 Datacenter    W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9<br>Windows Server 2012 R2 Essentials    KNC87-3J2TX-XB4WP-VCPJV-M4FWM<br>Windows Server 2012<br>WINDOWS SERVER 2012<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows Server 2012    BN3D2-R7TKB-3YPBD-8DRP2-27GG4<br>Windows Server 2012 N    8N2M2-HWPGY-7PGT9-HGDD8-GVGGY<br>Windows Server 2012 单语言版    2WN2H-YGCQR-KFX6K-CD6TF-84YXQ<br>Windows Server 2012 特定国家/地区版    4K36P-JN4VD-GDC6V-KDT89-DYFKP<br>Windows Server 2012 Server 标准版    XC9B7-NBPP2-83J2H-RHMBY-92BT4<br>Windows Server 2012 MultiPoint 标准版    HM7DN-YVMH3-46JC3-XYTG7-CYQJJ<br>Windows Server 2012 MultiPoint 高级版    XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G<br>Windows Server 2012 Datacenter    48HP8-DN98B-MYWDG-T2DCC-8W83P<br>Windows Server 2008 R2<br>WINDOWS SERVER 2008 R2<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows Server 2008 R2 Web 版    6TPJF-RBVHG-WBW2R-86QPH-6RTM4<br>Windows Server 2008 R2 HPC 版    TT8MH-CG224-D3D7Q-498W2-9QCTX<br>Windows Server 2008 R2 标准版    YC6KT-GKW9T-YTKYR-T4X34-R7VHC<br>Windows Server 2008 R2 企业版    489J6-VHDMP-X63PK-3K798-CPX3Y<br>Windows Server 2008 R2 Datacenter    74YFP-3QFB3-KQT8W-PMXWJ-7M648<br>面向基于 Itanium 系统的 Windows Server 2008 R2    GT63C-RJFQ3-4GMB6-BRFB9-CB83V<br>Windows 2008 Server<br>WINDOWS 2008 SERVER<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows Web Server 2008    WYR28-R7TFJ-3X2YQ-YCY4H-M249D<br>Windows Server 2008 标准版    TM24T-X9RMF-VWXK6-X8JC9-BFGM2<br>不带 Hyper-V 的 Windows Server 2008 标准版    W7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ<br>Windows Server 2008 企业版    YQGMW-MPWTJ-34KDK-48M3W-X4Q6V<br>不带 Hyper-V 的 Windows Server 2008 企业版    39BXF-X8Q23-P2WWT-38T2F-G3FPG<br>Windows Server 2008 HPC    RCTX3-KWVHP-BR6TB-RB6DM-6X7HP<br>Windows Server 2008 Datacenter    7M67G-PC374-GR742-YH8V4-TCBY3<br>不带 Hyper-V 的 Windows Server 2008 数据中心版    22XQ2-VRXRG-P8D42-K34TD-G3QQC<br>面向基于 Itanium 系统的 Windows Server 2008    4DWFP-JF3DJ-B7DTH-78FJB-PDRHK<br>早期版本的 Windows<br>Windows 8.1<br>WINDOWS 8.1<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows 8.1 专业版    GCRJD-8NW9H-F2CDX-CCM8D-9D6T9<br>Windows 8.1 专业版 N    HMCNV-VVBFX-7HMBH-CTY9B-B4FXY<br>Windows 8.1 企业版    MHF9N-XY6XB-WVXMC-BTDCT-MKKG7<br>Windows 8.1 企业版 N    TT4HM-HN7YT-62K67-RGRQJ-JFFXW<br>Windows 8<br>WINDOWS 8<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows 8 专业版    NG4HW-VH26C-733KW-K6F98-J8CK4<br>Windows 8 专业版 N    XCVCF-2NXM9-723PB-MHCB7-2RYQQ<br>Windows 8 企业版    32JNW-9KQ84-P47T8-D8GGY-CWCK7<br>Windows 8 企业版 N    JMNMF-RHW7P-DMY6X-RF3DR-X2BQT<br>Windows 7<br>WINDOWS 7<br>操作系统版本    KMS 客户端安装程序密钥<br>Windows 7 专业版    FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4<br>Windows 7 专业版 N    MRPKT-YTG23-K7D7T-X2JMM-QY7MG<br>Windows 7 专业版 E    W82YF-2Q76Y-63HXB-FGJG9-GF7QX<br>Windows 7 企业版    33PXH-7Y6KF-2VJC9-XBBR8-HVTHH<br>Windows 7 企业版 N    YDRBP-3D83W-TY26F-D46B2-XCKRJ<br>Windows 7 企业版 E    C29WB-22CC8-VJ326-GHFJW-H9DH4</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
  </entry>
  <entry>
    <title>centos7重置密码</title>
    <url>/2020/07/19/centos7%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h2 id="CentOS-7-amp-RHEL-7进入单用户方式和重置密码方式发生了较大变化，GRUB由b引导变成了ctrl-x引导。"><a href="#CentOS-7-amp-RHEL-7进入单用户方式和重置密码方式发生了较大变化，GRUB由b引导变成了ctrl-x引导。" class="headerlink" title="CentOS 7&amp;RHEL 7进入单用户方式和重置密码方式发生了较大变化，GRUB由b引导变成了ctrl+x引导。"></a>CentOS 7&amp;RHEL 7进入单用户方式和重置密码方式发生了较大变化，GRUB由b引导变成了ctrl+x引导。</h2><h2 id="centos重置密码主要有rd-break和init两种方法。"><a href="#centos重置密码主要有rd-break和init两种方法。" class="headerlink" title="centos重置密码主要有rd.break和init两种方法。"></a>centos重置密码主要有rd.break和init两种方法。</h2><a id="more"></a>
<h2 id="rd-break方法："><a href="#rd-break方法：" class="headerlink" title="rd.break方法："></a>rd.break方法：</h2><p>1、启动的时候，在启动界面，相应启动项，内核名称上按“e”；<br>2、进入后，找到linux16开头的地方，按“end”键到最后，输入rd.break，按ctrl+x进入；<br>3、进去后输入命令mount，发现根为/sysroot/，并且不能写，只有ro=readonly权限；<br>4、mount -o remount,rw /sysroot/，重新挂载，之后mount，发现有了r,w权限；<br>5、chroot /sysroot/ 改变根；<br>（1）echo RedHat|passwd –stdin root 修改root密码为redhat，或者输入passwd，交互修改；<br>（2）还有就是先cp一份，然后修改/etc/shadow文件<br>6、touch /.autorelabel 这句是为了selinux生效<br>7、ctrl+d 退出<br>8、然后reboot<br>至此，密码修改完成</p>
<h2 id="init方法："><a href="#init方法：" class="headerlink" title="init方法："></a>init方法：</h2><ol>
<li>启动系统，并在GRUB2启动屏显时，按下e键进入编辑模式。</li>
<li>在linux16/linux/linuxefi所在参数行尾添加以下内容：init=/bin/sh</li>
<li>按Ctrl+x启动到shell。</li>
<li>挂载文件系统为可写模式：mount –o remount,rw /</li>
<li>运行passwd,并按提示修改root密码。</li>
<li>如何之前系统启用了selinux，必须运行以下命令，否则将无法正常启动系统：touch /.autorelabel</li>
<li>运行命令exec /sbin/init来正常启动，或者用命令exec /sbin/reboot重启</li>
</ol>
<p>passwd报错为Linux passwd: 拒绝权限（Permission denied）</p>
<h2 id="原因1：-usr-bin-passwd-权限异常"><a href="#原因1：-usr-bin-passwd-权限异常" class="headerlink" title="原因1：/usr/bin/passwd 权限异常"></a>原因1：/usr/bin/passwd 权限异常</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">正常情况下的权限：</span><br><span class="line">ls -l /usr/bin/passwd</span><br><span class="line">-rwsr-xr-x 1 root root 34392 2009-05-22 16:03 /usr/bin/passwd</span><br><span class="line">修复命令：</span><br><span class="line">chown root:root /usr/bin/passwd</span><br><span class="line">chmod u=rwx,go=rx,u+s /usr/bin/passwd</span><br></pre></td></tr></table></figure>

<h2 id="原因2：SELinux-未关闭"><a href="#原因2：SELinux-未关闭" class="headerlink" title="原因2：SELinux 未关闭"></a>原因2：SELinux 未关闭</h2><p>2.1.查看SELinux状态<br>方法1：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># /usr/sbin/sestatus -v</span></span><br><span class="line">SELinux status:                 enabled</span><br><span class="line">SELinuxfs mount:                /selinux</span><br><span class="line">Current mode:                   enforcing</span><br></pre></td></tr></table></figure>
<p>方法2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># getenforce</span></span><br><span class="line">Enforcing</span><br></pre></td></tr></table></figure>
<p>2.2.关闭SELinux<br>1、临时关闭（不用重启机器）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenforce 0    <span class="comment">#设置SELinux 成为permissive模式</span></span><br><span class="line"><span class="comment">#setenforce 1    #设置SELinux 成为enforcing模式</span></span><br></pre></td></tr></table></figure>
<p>2、修改配置文件需要重启机器： vi /etc/selinux/config 将SELINUX=enforcing改为SELINUX=disabled 重启</p>
<p>排查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsattr /etc/passwd /etc/shadow，检查是否有i属性，如果有i属性，则文件无法修改删除。</span><br><span class="line">删除+i权限，chattr -i /etc/passwd /etc/shadow</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Lsattr /usr/bin/</span><br><span class="line">lsattr /usr/bin/passwd</span><br><span class="line">chattr -i lsattr /usr/bin/ lsattr /usr/bin/passwd</span><br></pre></td></tr></table></figure>
<p>一般权限问题基本解决，如果还是不行建议检查是否有安装加密软件。</p>
<h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><p>还有使用插入镜像的处理方式，这钟一般是无法进入内核选项界面时使用，一般机房常用，可以参考教程：<a href="https://www.linuxidc.com/linux/2019-08/160366.htm" target="_blank" rel="noopener">https://www.linuxidc.com/linux/2019-08/160366.htm</a></p>
]]></content>
      <categories>
        <category>Liunx</category>
      </categories>
  </entry>
  <entry>
    <title>Liunx磁盘挂载</title>
    <url>/2020/07/14/Liunx%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD/</url>
    <content><![CDATA[<hr>
<h2 id="Liunx挂载"><a href="#Liunx挂载" class="headerlink" title="Liunx挂载"></a>Liunx挂载</h2><a id="more"></a>

<hr>
<p>  Liunx常用的磁盘挂载方式为逻辑分区挂载和UUID挂载，个人觉得前者比后者更加灵活和稳定，由于磁盘随着不断使用需要进行扩展，LVM分区的文件格式更加方便这边的管理，磁盘的UUID存在由于某些因素导致UUID的变更需要重新绑定，操作演示为centos7系统。<br>分区挂载<br>1.fdisk -l #查看磁盘信息</p>
<p>2.查看到sdb这个磁盘并未进行分区操作，现在分区配置：fdisk /dev/sdb<br>n p 设置主分区(1-4) 分配磁盘空间 wq</p>
<p>3.要使用磁盘，先要进行格式化磁盘，常见的文件格式有ext2，ext3，ext4以及xfs这里推荐使用性能相对好点的ext4或xfs文件系统的。</p>
<p>4.接下来是挂载,先在根目录创建您需要的把分区挂载的目录 mkdir /文件名 然后，进行挂载，如需临时挂载可以执行mount /dev/sdb1 /文件名 ，如需进行长期的挂载，可以先编辑添加挂载信息，<br>vi /etc/fstab 再进行mount/文件名 挂载。</p>
<p>5.使用df –h 查看sdb1分区已经挂载。</p>
<p>UUID挂载<br>  分区操作和之前的一样，自需把挂载的路劲改为磁盘相应的UUID即可：<br>1.使用blkid /dev/sdb1 查看硬盘UUID</p>
<p>2.再进行挂载</p>
<p>3.完成UUID的挂载。</p>
<h1 id="扩展分区"><a href="#扩展分区" class="headerlink" title="扩展分区"></a>扩展分区</h1><p>  随着服务器长期的使用，根目录或者数据目录都会面临空间占满的情况。因此我们需要对硬盘进行扩展，一般的根目录的磁盘分区选择LVM的管理机制，由于传统的磁盘管理不能对磁盘进行磁盘管理，因此诞生了LVM技术，LVM技术最大的特点就是对磁盘进行动态管理。由于LVM的逻辑卷的大小更改可以进行动态调整，且不会出现丢失数据的情况。可以通过使用虚拟卷组给根目录进行磁盘的扩容，操作演示为centos7系统。</p>
<p>LVM根分区的扩容<br>1.新建xvdb1，8e设置为LVM机制<br>fdisk /dev/xvdb<br>n p  t 8e<br>pvcreate /dev/xvdb1 #创建物理卷<br>查看卷组 vgdisplay</p>
<p>2.将初始化的分区加入到虚拟卷组中去 vgextend centos(卷组名) /dev/xvdb1</p>
<p>把需要扩展的资源赋予/dev/mapper/centos-root下</p>
<p>3.调整磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvextend -L +10G /dev/mapper/centos-root <span class="comment">#添加部分磁盘资源</span></span><br><span class="line">lvextend -l +100%FREE /dev/mapper/centos-root <span class="comment">#添加全部新的磁盘资源</span></span><br><span class="line"></span><br><span class="line">xfs_growfs /dev/mapper/centos-root　<span class="comment">#扩展root分区,使上述的设置生效。xfs文件系统的调整命令是xfs_growfs（只支持增大若必须缩小需要格式化数据）</span></span><br><span class="line">resize2fs /dev/mapper/vg_root-lv_root <span class="comment"># ext2/ext3/ext4文件系统的调整命令是resize2fs（增大和减小都支持）</span></span><br></pre></td></tr></table></figure>
<p>#注<br>ext4文件系统的缩容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.先要umount取消磁盘的挂载</span><br><span class="line">2.e2fsck -f &#x2F;dev&#x2F;磁盘名称 (检查磁盘)</span><br><span class="line">3.resize2fs &#x2F;dev&#x2F;磁盘名称 10G(磁盘大小)</span><br><span class="line">4.lvresize -L 10G &#x2F;dev&#x2F;磁盘大小</span><br></pre></td></tr></table></figure>


<p>##非LVM根分区的扩容</p>
<p>  有些系统由于其他因素在安装系统时分区使用了标准的管理机制，我们可以在原来的需要扩展的磁盘上进行扩展并不会导致数据的丢失（此方法同样适合使用到数据盘下，不同的是数据盘需要先要取消挂载再进行原盘扩容umount时提示无法卸载，则是有进程占用分区，使用如下命令来终止占用进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># fuser -m -k /分区名</span></span><br><span class="line">[root@localhost ~]<span class="comment"># umount /分区名 所以通常建议在init 1单用户下进行）。</span></span><br></pre></td></tr></table></figure>
<p>1.添加存储<br>在原磁盘继续添加空间的情况一般是动态磁盘或者是分布式存储。<br>      2.进行原盘扩展<br>    进行分区挂载磁盘，必须记住根分区的启始位置。</p>
<p>然后删除根分区，再重新创建新的根分区，新建的分区的启始位置要和之前的一样，才能保证数据的完整可用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">partpeobe /dev/sda <span class="comment">#刷新分区</span></span><br><span class="line">xfs_growfs /dev/sda3</span><br></pre></td></tr></table></figure>
<p>lsblk #查看分区状态</p>
<p>完成扩展。</p>
]]></content>
      <categories>
        <category>Liunx</category>
      </categories>
  </entry>
  <entry>
    <title>Python爬虫获取豆瓣top250优秀电影</title>
    <url>/2020/06/18/Python%E7%88%AC%E8%99%AB%E8%8E%B7%E5%8F%96%E8%B1%86%E7%93%A3top250%E4%BC%98%E7%A7%80%E7%94%B5%E5%BD%B1/</url>
    <content><![CDATA[<h2 id="具体源码"><a href="#具体源码" class="headerlink" title="具体源码"></a>具体源码</h2><a id="more"></a>

<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- codeing = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020/6/7 9:53</span></span><br><span class="line"><span class="comment">#@Author : 鱼头</span></span><br><span class="line"><span class="comment">#@File : test.py</span></span><br><span class="line"><span class="comment">#@Software : PyCharm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import bs4      <span class="comment">#网页解析，获取数据</span></span><br><span class="line">import re       <span class="comment">#正则表达式，进行文字匹配</span></span><br><span class="line">import urllib.request,urllib.error      <span class="comment">#制定URL，获取网页数据</span></span><br><span class="line">import xlwt     <span class="comment">#进行excel操作</span></span><br><span class="line">import sqlite3  <span class="comment">#进行SQLite数据库操作</span></span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        baseurl = <span class="string">"https://movie.douban.com/top250?start="</span></span><br><span class="line">        datalist = getData(baseurl)</span><br><span class="line">        savepath = <span class="string">"豆瓣电影Top250.xls"</span></span><br><span class="line">        data = saveDate(datalist,savepath)</span><br><span class="line"></span><br><span class="line"><span class="comment">#抓取网页</span></span><br><span class="line">def getData(baseurl):</span><br><span class="line">        datalist = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(0,10):   <span class="comment">#调用获取页面信息的函数10次</span></span><br><span class="line">                url = baseurl + str(i*25)</span><br><span class="line">                html = askURL(url)      <span class="comment">#保存获取到的网页源码</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">#逐一解析数据</span></span><br><span class="line">                soup = BeautifulSoup(html,<span class="string">"html.parser"</span>)</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">'div'</span>,class_=<span class="string">"item"</span>):         <span class="comment">#查找符合要求的字符串，形成列表</span></span><br><span class="line">                        <span class="comment">#影片详情链接的规则</span></span><br><span class="line">                        findLink = re.compile(r<span class="string">'&lt;a href="(.*?)"&gt;'</span>)      <span class="comment">#创建正则表达式对象，表示规则（字符串的模式)</span></span><br><span class="line">                        <span class="comment">#影片图片的链接</span></span><br><span class="line">                        findImgSrc = re.compile(r<span class="string">'&lt;img.*src="(.*?)"'</span>,re.S) <span class="comment">#re.S 让换行符包含在字符中</span></span><br><span class="line">                        <span class="comment">#影片的片名</span></span><br><span class="line">                        findTitle = re.compile(r<span class="string">'&lt;span class="title"&gt;(.*)&lt;/span&gt;'</span>)</span><br><span class="line">                        <span class="comment">#评分</span></span><br><span class="line">                        findRating = re.compile(r<span class="string">'&lt;span class="rating_num" property="v:average"&gt;(.*)&lt;/span&gt;'</span>)</span><br><span class="line">                        <span class="comment">#评论人数</span></span><br><span class="line">                        findJudge = re.compile(r<span class="string">'&lt;span&gt;(\d*)人评价&lt;/span&gt;'</span>)</span><br><span class="line">                        <span class="comment">#概况</span></span><br><span class="line">                        findInq = re.compile(r<span class="string">'&lt;span class="inq"&gt;(.*)&lt;/span&gt;'</span>)</span><br><span class="line">                        <span class="comment">#内容</span></span><br><span class="line">                        findBd = re.compile(r<span class="string">'&lt;p class=""&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">#print(item)</span></span><br><span class="line">                        data = []</span><br><span class="line">                        item = str(item)</span><br><span class="line">                        link = re.findall(findLink,item)[0]     <span class="comment">#re库用来通过正则表达式查找指定的字符串</span></span><br><span class="line">                        data.append(link)</span><br><span class="line">                        imgSrc = re.findall(findImgSrc,item)[0]</span><br><span class="line">                        data.append(imgSrc)</span><br><span class="line">                        titles = re.findall(findTitle,item)</span><br><span class="line">                        <span class="keyword">if</span>(len(titles) == 2):</span><br><span class="line">                                ctitle = titles[0]      <span class="comment">#添加中国名</span></span><br><span class="line">                                data.append(ctitle)</span><br><span class="line">                                otitle = titles[1].replace(<span class="string">"/"</span>,<span class="string">""</span>)      <span class="comment">#替换符号</span></span><br><span class="line">                                data.append(otitle)     <span class="comment">#添加外国名</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                                data.append(titles[0])</span><br><span class="line">                                data.append(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">                        rating = re.findall(findRating,item)[0]</span><br><span class="line">                        data.append(rating)</span><br><span class="line"></span><br><span class="line">                        judgeNum = re.findall(findJudge,item)[0]</span><br><span class="line">                        data.append(judgeNum)</span><br><span class="line"></span><br><span class="line">                        inq =re.findall(findInq,item)</span><br><span class="line">                        <span class="keyword">if</span> len(inq) !=0:</span><br><span class="line">                                inq =inq[0].replace(<span class="string">"。"</span>,<span class="string">""</span>)</span><br><span class="line">                                data.append(inq)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                                data.append(<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line">                        bd = re.findall(findBd,item)[0]</span><br><span class="line">                        bd = re.sub(<span class="string">'&lt;br(\s+)?/&gt;(\s+)?'</span>,<span class="string">" "</span>,bd) <span class="comment">#去掉&lt;br/&gt;</span></span><br><span class="line">                        bd = re.sub(<span class="string">'/'</span>,<span class="string">" "</span>,bd) <span class="comment">#去除/</span></span><br><span class="line">                        data.append(bd.strip()) <span class="comment">#去空格</span></span><br><span class="line"></span><br><span class="line">                        datalist.append(data)</span><br><span class="line">        <span class="comment">#print(datalist)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> datalist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#得到指定一个URL的网页内容</span></span><br><span class="line">def askURL(url):</span><br><span class="line">        head = &#123;              <span class="comment">#模拟浏览器头部信息，向服务器发消息</span></span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        request = urllib.request.Request(url,headers=head)</span><br><span class="line">        html = <span class="string">""</span></span><br><span class="line">        try:</span><br><span class="line">                response = urllib.request.urlopen(request)</span><br><span class="line">                html = response.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">                <span class="comment">#print(html)</span></span><br><span class="line">        except urllib.error.URLError as e:</span><br><span class="line">                <span class="keyword">if</span> hasattr(e,<span class="string">"code"</span>):</span><br><span class="line">                        <span class="built_in">print</span>(e.code)</span><br><span class="line">                <span class="keyword">if</span> hasattr(e,<span class="string">"reason"</span>):</span><br><span class="line">                        <span class="built_in">print</span>(e,<span class="string">"reason"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存数据</span></span><br><span class="line">def saveDate(datalist,savepath):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"save..."</span>)</span><br><span class="line">        book = xlwt.Workbook(encoding=<span class="string">"utf-8"</span>,style_compression=0)</span><br><span class="line">        sheet = book.add_sheet(<span class="string">'豆瓣电影Top250'</span>,cell_overwrite_ok=True)</span><br><span class="line">        col = (<span class="string">"电影详情链接"</span>,<span class="string">"图片链接"</span>,<span class="string">"影片中文名"</span>,<span class="string">"影片外国名"</span>,<span class="string">"评分"</span>,<span class="string">"评分人数"</span>,<span class="string">"概括"</span>,<span class="string">"相关信息"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(0,8):</span><br><span class="line">                sheet.write(0,i,col[i])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(0,250):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"第%d条"</span> %(i+1))</span><br><span class="line">                data = datalist[i]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(0,8):</span><br><span class="line">                        sheet.write(i+1,j,data[j])</span><br><span class="line"></span><br><span class="line">        book.save(savepath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">        main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo在博客中上传本地图片</title>
    <url>/2020/05/26/hexo%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h2 id="正确使用相对路径引用的标签插件"><a href="#正确使用相对路径引用的标签插件" class="headerlink" title="正确使用相对路径引用的标签插件"></a>正确使用相对路径引用的标签插件</h2><a id="more"></a>

<h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><hr>
<h3 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h3><p>资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。<br>比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ![](/images/image.jpg)</span><br></pre></td></tr></table></figure>
<p>的方法访问它们。</p>
<h3 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h3><p>1.对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。<br>这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi _config.yml</span><br><span class="line">$ post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>2.当资源文件管理功能打开后，Hexo将会在你每一次通过 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>命令创建新文章时自动创建一个文件夹。<br>这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，<br>这样你就得到了一个更简单而且方便得多的工作流。</p>
<h3 id="相对路径引用的标签插件"><a href="#相对路径引用的标签插件" class="headerlink" title="相对路径引用的标签插件"></a>相对路径引用的标签插件</h3><p>3.通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。<br>在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ &#123;% asset_path slug %&#125;</span><br><span class="line">$ &#123;% asset_img slug [title] %&#125;</span><br><span class="line">$ &#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="错误的引用图片方式"><a href="#错误的引用图片方式" class="headerlink" title="错误的引用图片方式"></a>错误的引用图片方式</h3><p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ![](/example.jpg)</span><br></pre></td></tr></table></figure>
<p>它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>
<h3 id="正确的引用图片方式"><a href="#正确的引用图片方式" class="headerlink" title="正确的引用图片方式"></a>正确的引用图片方式</h3><p>是使用下列的标签插件而不是 markdown ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ &#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p>
<h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h2><hr>
<p>1.配置主页配置文件_config.yml里的post_asset_folder:这个选项设置为ture</p>
<p>2.在source下创建/images文件夹，把你需要上传的图片xxxx.jpg/png复制到这个文件夹</p>
<p>3.然后只需要在xxxx.md中按照markdown的格式引入图片：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ![你想输入的替代文字](/images(调用这个路径)/图片名.jpg)</span><br></pre></td></tr></table></figure>
<h2 id="下面是test"><a href="#下面是test" class="headerlink" title="下面是test"></a>下面是test</h2><p><img src="/images/test.jpg" alt="测试图片"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>我的第一个博客文章</title>
    <url>/2020/05/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<hr>
<h2 id="hexo-github的个人博客搭建"><a href="#hexo-github的个人博客搭建" class="headerlink" title="hexo+github的个人博客搭建"></a>hexo+github的个人博客搭建</h2><a id="more"></a>

<h3 id="一，环境的安装"><a href="#一，环境的安装" class="headerlink" title="一，环境的安装"></a>一，环境的安装</h3><p>我搭建的平台是为liunx系统，因此我们需要安装的环境可以用yum install + 软件名进行安装<br>我们需要安装的环境有git，node(node提供npm对模块下载等，温馨提示：不能使用yum去安装node，需要去官网安装新的版本,不然下面生成静态网页会报错）</p>
<hr>
<p>1.从官网下下载最新的<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="/images/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95.png" alt="安装包选择"></h2><p>2、通过ftp工具上传到linux服务，解压安装包</p>
<p>tar -xvf node-v12.16.3-linux-x64.tar.xz</p>
<p>3.添加环境环境变量</p>
<p>node -v #查看node版本<br>npm -v #查看npm版本<br>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a> #安装淘宝的cnpm 管理器<br>cnpm -v #查看cnpm版本<br>cnpm install -g hexo-cli #安装hexo框架<br>hexo -v #查看hexo版本<br>mkdir blog #创建blog目录<br>cd blog #进入blog目录<br>sudo hexo init #生成博客 初始化博客<br>hexo s #启动本地博客服务<br><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> #本地访问地址<br>hexo n “我的第一篇文章” #创建新的文章</p>
<h1 id="返回blog目录"><a href="#返回blog目录" class="headerlink" title="返回blog目录"></a>返回blog目录</h1><p>hexo clean #清理<br>hexo g #生成</p>
<h1 id="Github创建一个新的仓库-YourGithubName-github-io"><a href="#Github创建一个新的仓库-YourGithubName-github-io" class="headerlink" title="Github创建一个新的仓库 YourGithubName.github.io"></a>Github创建一个新的仓库 YourGithubName.github.io</h1><p>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件</p>
<h1 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h1><hr>
<p>Deployment<br>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a><br>deploy:<br>type: git<br>repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git" target="_blank" rel="noopener">https://github.com/YourGithubName/YourGithubName.github.io.git</a><br>branch: master</p>
<hr>
<p>hexo d #部署到Github仓库里<br><a href="https://YourGithubName.github.io/" target="_blank" rel="noopener">https://YourGithubName.github.io/</a> #访问这个地址可以查看博客</p>
<p>git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia #下载yilia主题到本地</p>
<h1 id="修改hexo根目录下的-config-yml-文件-：-theme-yilia"><a href="#修改hexo根目录下的-config-yml-文件-：-theme-yilia" class="headerlink" title="修改hexo根目录下的 _config.yml 文件 ： theme: yilia"></a>修改hexo根目录下的 _config.yml 文件 ： theme: yilia</h1><p>hexo c #清理一下<br>hexo g #生成<br>hexo d #部署到远程Github仓库<br><a href="https://YourGithubName.github.io/" target="_blank" rel="noopener">https://YourGithubName.github.io/</a> #查看博客</p>
<h1 id="Hexo-NexT主题中添加网页音乐播放器功能"><a href="#Hexo-NexT主题中添加网页音乐播放器功能" class="headerlink" title="Hexo+NexT主题中添加网页音乐播放器功能"></a>Hexo+NexT主题中添加网页音乐播放器功能</h1><h2 id="1-下载Aplayer"><a href="#1-下载Aplayer" class="headerlink" title="1.下载Aplayer"></a>1.下载Aplayer</h2><p>点击访问 Aplayer 源码：GitHub Aplayer。<br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FMoePlayer%2FAPlayer" target="_blank" rel="noopener">https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FMoePlayer%2FAPlayer</a><br>下载到本地，解压后将dist文件夹复制到themes\next\source文件夹下。</p>
<h2 id="2-配置music-js"><a href="#2-配置music-js" class="headerlink" title="2.配置music.js"></a>2.配置music.js</h2><p>新建themes\next\source\dist\music.js文件，添加内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const ap = new APlayer(&#123;</span><br><span class="line">    container: document.getElementById(<span class="string">'aplayer'</span>),</span><br><span class="line">    fixed: <span class="literal">true</span>,</span><br><span class="line">    autoplay: <span class="literal">false</span>,</span><br><span class="line">    audio: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"双人舞 第二幕第三场第14首"</span>,</span><br><span class="line">        artist: <span class="string">'Pyotr Ilyich Tchaikovsky'</span>,</span><br><span class="line">        url: <span class="string">'http://m10.music.126.net/20210323085746/0ecfc3ec2484b5f929f13ddfec786373/ymusic/ccae/888f/4f48/8c67340af1d69e12e15b0c38f677eeca.mp3'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">        name: <span class="string">"莫扎特 - 小步舞曲"</span>,</span><br><span class="line">        artist: <span class="string">'Wolfgang Amadeus Mozart'</span>,</span><br><span class="line">        url: <span class="string">'http://m10.music.126.net/20210323091002/cccfca30ab8d2fce3519d9d89b973660/ymusic/380d/2179/e4c8/048ad6b300de17413689d22136b53c9a.mp3'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">        name: <span class="string">"太阳照常升起"</span>,</span><br><span class="line">        artist: <span class="string">'久石让'</span>,</span><br><span class="line">        url: <span class="string">'http://m10.music.126.net/20210323091549/d511ffe964e5832c397884789b08765f/ymusic/5614/195d/ad51/33fff191fffc2fd5da6c94d71e7777ef.mp3'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">        name: <span class="string">"原来"</span>,</span><br><span class="line">        artist: <span class="string">'林俊杰'</span>,</span><br><span class="line">        url: <span class="string">'http://m10.music.126.net/20210323092130/1c977ea305d0bb662d491e27d0725a6e/ymusic/obj/w5zDlMODwrDDiGjCn8Ky/3094661786/6904/0472/3c23/bbbedff50edf5fcb8b2eb02f731f3e48.mp3'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">        name: <span class="string">"倒带"</span>,</span><br><span class="line">        artist: <span class="string">'蔡依林'</span>,</span><br><span class="line">        url: <span class="string">'http://m10.music.126.net/20210323092554/f73cc7ec59d5b35ea5516a4d1aa5b2af/ymusic/0c70/b478/049f/e602701f487136ebb36d26581e4e6aad.mp3'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>源码中对应的参数解释，这边都有： Aplayer 中文文档:<a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="noopener">https://aplayer.js.org/#/zh-Hans/</a><br>audio 对应的便是音频文件，所以音乐播放器需要播放的音乐是需要自己进行相关信息（如歌曲链接、歌词、封面等）的配置。<br>推荐使用音乐外链网站获取：<a href="http://music.xf1433.com/" target="_blank" rel="noopener">http://music.xf1433.com/</a></p>
<h2 id="3-添加-layout-swig"><a href="#3-添加-layout-swig" class="headerlink" title="3.添加_layout.swig"></a>3.添加_layout.swig</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">打开themes\next\layout\_layout.swig文件，将</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"aplayer"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/APlayer.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/music.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>添加到&lt;body itemscope …&gt;后面就行，即在<body><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"/live2dw/assets/wanko.model.json"},"display":{"position":"left","width":200,"height":400},"mobile":{"show":true},"log":false});</script></body>里面。<br>重新生成，访问页面，就能看到左下角的音乐播放器了。</p>
<h2 id="Hexo-next-主题配置右侧栏的分类和标签打开的是空白"><a href="#Hexo-next-主题配置右侧栏的分类和标签打开的是空白" class="headerlink" title="Hexo next 主题配置右侧栏的分类和标签打开的是空白"></a>Hexo next 主题配置右侧栏的分类和标签打开的是空白</h2><h2 id="1-新建-标签-和分类-页面"><a href="#1-新建-标签-和分类-页面" class="headerlink" title="1. 新建 标签 和分类 页面"></a>1. 新建 标签 和分类 页面</h2><p>只要在 source 文件夹下新建.md文件，并且文章前面按如下格式表明所属分类和标签就行：<br>title: 自学编程成功概率有多少可能<br>date: 2017-05-26 19:57:47<br>tags: [编程,感悟]<br>categories: 技术<br>先根目录输入命令 hexo new page categories 会自动新建 categorier 文件夹并生成一个index.md文件，里面的代码为：<br>title: categories<br>date: 2019-01-30 23:10:51<br>同理，「标签」也一样 hexo new page tags 生成 tags 文件夹，其中会自动生成一个index.md文件,代码为：</p>
<p>title: tags<br>date: 2019-01-30 23:14:51</p>
<h2 id="2-开始配置菜单，如「首页」、「分类」、「标签」等这些菜单"><a href="#2-开始配置菜单，如「首页」、「分类」、「标签」等这些菜单" class="headerlink" title="2. 开始配置菜单，如「首页」、「分类」、「标签」等这些菜单"></a>2. 开始配置菜单，如「首页」、「分类」、「标签」等这些菜单</h2><p>主题文件下的_config.yml</p>
<p>menu:<br>  home: / || home<br>  about: /about/ || user<br>  archives: /archives/ || archive<br>  tags: /tags/ || tags<br>  categories: /categories/ || th<br>  schedule: /schedule/ || calendar<br>  sitemap: /sitemap.xml || sitemap</p>
<h1 id="commonweal-404-heartbeat"><a href="#commonweal-404-heartbeat" class="headerlink" title="commonweal: /404/ || heartbeat"></a>commonweal: /404/ || heartbeat</h1><h1 id="Enable-Disable-menu-icons-菜单图标"><a href="#Enable-Disable-menu-icons-菜单图标" class="headerlink" title="Enable/Disable menu icons.   #菜单图标"></a>Enable/Disable menu icons.   #菜单图标</h1><p>menu_icons:<br>    enable: true<br>然后跑去 language 文件夹 zh-Hans.yml 修改中文名字，菜单就以中文显示了。</p>
<p>menu:<br>  home: 首&emsp;&emsp;页<br>  archives: 归&emsp;&emsp;档<br>  categories: 分&emsp;&emsp;类<br>  schedule: 日程表<br>  sitemap: 站点地图<br>  tags: 标&emsp;&emsp;签<br>  about: 关于博主<br>  search: 站内搜索<br>  top: 最受欢迎</p>
<h1 id="commonweal-公益404"><a href="#commonweal-公益404" class="headerlink" title="commonweal: 公益404"></a>commonweal: 公益404</h1><p>我们发表文章使用「tags」「categories」只需在文章开头添加如下代码：</p>
<hr>
<p>title: 利用GitHub和HEXO免费搭建个人博客高级 美化篇<br>date: 2019-01-29 22:58:56<br>tags: [hexo建站,hexo部署,github部署,个人博客]      #添加的标签<br>categories: hexo博客                              #添加的分类</p>
<hr>
<p>如此即可在菜单栏里的「tags」「categories」看见相应的效果。但是实际上打开是空白页面 本文的重点来了。<br>小tips：每次的手输入 categories 我们可以在D:\blog\scaffolds\post.md 添加如下代码，这样每次新建文章，就自动有了。</p>
<hr>
<p>title: 我的第一个博客文章<br>date: 1590374214000<br>tags:           #新加<br>categories:     #新加</p>
<hr>
<h2 id="3-Hexo-next-主题配置右侧栏的分类和标签打开的是空白"><a href="#3-Hexo-next-主题配置右侧栏的分类和标签打开的是空白" class="headerlink" title="3. Hexo next 主题配置右侧栏的分类和标签打开的是空白"></a>3. Hexo next 主题配置右侧栏的分类和标签打开的是空白</h2><p>先前 categorier 文件夹（D:\blog\source\categories），里面的 index.md 文件打开，修改（即添加一行）为：</p>
<hr>
<p>title: categories<br>date: 2018-01-23 17:14:51<br>type: “categories”   #新添加的</p>
<hr>
<p>同理，「标签」</p>
<hr>
<p>title: tags<br>date: 2018-01-23 17:14:51<br>type: “tags”     #新添加的</p>
<hr>
<p>保存效果为：</p>
<p>tags</p>
<h2 id="4-插播友链的设置方法"><a href="#4-插播友链的设置方法" class="headerlink" title="4. 插播友链的设置方法"></a>4. 插播友链的设置方法</h2><p>主题文件里，就在设置 menu 菜单的下面：</p>
<p>social:   #友链地址<br>  GitHub:<br>  E-Mail:<br>  简书:<br>  QQ:<br>social_icons:  #友链图标<br>  enable: true<br>  icons_only: false<br>  transition: false</p>
]]></content>
  </entry>
</search>
